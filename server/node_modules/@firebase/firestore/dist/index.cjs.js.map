{"version":3,"file":"index.cjs.js","sources":["../src/core/version.ts","../src/util/log.ts","../src/platform/browser/format_json.ts","../src/util/assert.ts","../src/platform/browser/random_bytes.ts","../src/util/misc.ts","../src/core/database_info.ts","../src/util/obj.ts","../src/util/obj_map.ts","../src/util/error.ts","../src/api/timestamp.ts","../src/core/snapshot_version.ts","../src/model/path.ts","../src/model/document_key.ts","../src/util/types.ts","../src/util/byte_string.ts","../src/platform/browser/base64.ts","../src/remote/rpc_error.ts","../src/local/target_data.ts","../src/remote/existence_filter.ts","../src/util/sorted_map.ts","../src/util/sorted_set.ts","../src/model/collections.ts","../src/model/document_set.ts","../src/core/view_snapshot.ts","../src/remote/remote_event.ts","../src/remote/watch_change.ts","../src/model/server_timestamps.ts","../src/model/values.ts","../src/remote/serializer.ts","../src/model/transform_operation.ts","../src/model/mutation.ts","../src/model/object_value.ts","../src/model/document.ts","../src/core/query.ts","../src/core/target.ts","../src/model/mutation_batch.ts","../src/local/persistence_promise.ts","../src/local/remote_document_change_buffer.ts","../src/local/persistence.ts","../src/local/local_documents_view.ts","../src/local/local_view_changes.ts","../src/core/listen_sequence.ts","../src/util/promise.ts","../src/remote/backoff.ts","../src/local/encoded_resource_path.ts","../src/local/memory_index_manager.ts","../src/local/indexeddb_index_manager.ts","../src/local/local_serializer.ts","../src/local/indexeddb_remote_document_cache.ts","../src/core/target_id_generator.ts","../src/local/indexeddb_target_cache.ts","../src/local/indexeddb_persistence.ts","../src/local/indexeddb_mutation_queue.ts","../src/local/indexeddb_schema.ts","../src/local/simple_db.ts","../src/platform/browser/dom.ts","../src/util/async_queue.ts","../src/local/lru_garbage_collector.ts","../src/local/local_store.ts","../src/local/reference_set.ts","../src/util/input_validation.ts","../src/api/blob.ts","../src/api/field_path.ts","../src/api/field_value.ts","../src/api/geo_point.ts","../src/platform/browser/serializer.ts","../src/api/user_data_reader.ts","../src/auth/user.ts","../src/api/credentials.ts","../src/remote/persistent_stream.ts","../src/remote/datastore.ts","../src/core/transaction.ts","../src/remote/online_state_tracker.ts","../src/remote/remote_store.ts","../src/local/shared_client_state_schema.ts","../src/local/shared_client_state.ts","../src/core/view.ts","../src/core/transaction_runner.ts","../src/core/sync_engine.ts","../src/core/event_manager.ts","../src/local/index_free_query_engine.ts","../src/local/memory_mutation_queue.ts","../src/local/memory_remote_document_cache.ts","../src/local/memory_target_cache.ts","../src/local/memory_persistence.ts","../src/remote/stream_bridge.ts","../src/platform/browser/webchannel_connection.ts","../src/platform/browser/connectivity_monitor.ts","../src/remote/connectivity_monitor_noop.ts","../src/core/component_provider.ts","../src/platform/browser/connection.ts","../src/core/firestore_client.ts","../src/util/async_observer.ts","../src/api/observer.ts","../src/api/user_data_writer.ts","../src/api/database.ts","../src/util/api.ts","../src/config.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\n\n/** The semver (www.semver.org) version of the SDK. */\nexport const SDK_VERSION = firebase.SDK_VERSION;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel, LogLevelString } from '@firebase/logger';\nimport { SDK_VERSION } from '../core/version';\nimport { formatJSON } from '../platform/format_json';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/firestore');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function setLogLevel(newLevel: LogLevelString | LogLevel): void {\n  logClient.setLogLevel(newLevel);\n}\n\nexport function logDebug(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logError(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function logWarn(msg: string, ...obj: unknown[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Formats an object as a JSON string, suitable for logging. */\nexport function formatJSON(value: unknown): string {\n  return JSON.stringify(value);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\nimport { logError } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string = 'Unexpected state'): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nexport function hardAssert(\n  assertion: boolean,\n  message?: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n */\nexport function debugAssert(\n  assertion: boolean,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    fail(message);\n  }\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nexport function debugCast<T>(\n  obj: object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor: { new (...args: any[]): T }\n): T | never {\n  debugAssert(\n    obj instanceof constructor,\n    `Expected type '${constructor.name}', but was '${obj.constructor.name}'`\n  );\n  return obj as T;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../../util/assert';\n\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nexport function randomBytes(nBytes: number): Uint8Array {\n  debugAssert(nBytes >= 0, `Expecting non-negative nBytes, got: ${nBytes}`);\n\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  const crypto =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof self !== 'undefined' && (self.crypto || (self as any)['msCrypto']);\n  const bytes = new Uint8Array(nBytes);\n  if (crypto) {\n    crypto.getRandomValues(bytes);\n  } else {\n    // Falls back to Math.random\n    for (let i = 0; i < nBytes; i++) {\n      bytes[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  return bytes;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\nimport { randomBytes } from '../platform/random_bytes';\n\nexport type EventHandler<E> = (value: E) => void;\nexport interface Indexable {\n  [k: string]: unknown;\n}\n\nexport class AutoId {\n  static newId(): string {\n    // Alphanumeric characters\n    const chars =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    // The largest byte value that is a multiple of `char.length`.\n    const maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    debugAssert(\n      0 < maxMultiple && maxMultiple < 256,\n      `Expect maxMultiple to be (0, 256), but got ${maxMultiple}`\n    );\n\n    let autoId = '';\n    const targetLength = 20;\n    while (autoId.length < targetLength) {\n      const bytes = randomBytes(40);\n      for (let i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n    debugAssert(autoId.length === targetLength, 'Invalid auto ID: ' + autoId);\n\n    return autoId;\n  }\n}\n\nexport function primitiveComparator<T>(left: T, right: T): number {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n\nexport interface Equatable<T> {\n  isEqual(other: T): boolean;\n}\n\n/** Helper to compare arrays using isEqual(). */\nexport function arrayEquals<T>(\n  left: T[],\n  right: T[],\n  comparator: (l: T, r: T) => boolean\n): boolean {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nexport function immediateSuccessor(s: string): string {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   * @param forceLongPolling Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean,\n    readonly forceLongPolling: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  isEqual(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n}\n\nexport function objectSize<V>(obj: object): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function isEmpty<V>(obj: Dict<V>): boolean {\n  debugAssert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { forEach, isEmpty } from './obj';\n\ntype Entry<K, V> = [K, V];\n\n/**\n * A map implementation that uses objects as keys. Objects must have an\n * associated equals function and must be immutable. Entries in the map are\n * stored together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nexport class ObjectMap<KeyType, ValueType> {\n  /**\n   * The inner map for a key -> value pair. Due to the possibility of\n   * collisions we keep a list of entries that we do a linear search through\n   * to find an actual match. Note that collisions should be rare, so we still\n   * expect near constant time lookups in practice.\n   */\n  private inner: {\n    [canonicalId: string]: Array<Entry<KeyType, ValueType>>;\n  } = {};\n\n  constructor(\n    private mapKeyFn: (key: KeyType) => string,\n    private equalsFn: (l: KeyType, r: KeyType) => boolean\n  ) {}\n\n  /** Get a value for this key, or undefined if it does not exist. */\n  get(key: KeyType): ValueType | undefined {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return undefined;\n    }\n    for (const [otherKey, value] of matches) {\n      if (this.equalsFn(otherKey, key)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  has(key: KeyType): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  /** Put this key and value in the map. */\n  set(key: KeyType, value: ValueType): void {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      return;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        matches[i] = [key, value];\n        return;\n      }\n    }\n    matches.push([key, value]);\n  }\n\n  /**\n   * Remove this key from the map. Returns a boolean if anything was deleted.\n   */\n  delete(key: KeyType): boolean {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return false;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  forEach(fn: (key: KeyType, val: ValueType) => void): void {\n    forEach(this.inner, (_, entries) => {\n      for (const [k, v] of entries) {\n        fn(k, v);\n      }\n    });\n  }\n\n  isEmpty(): boolean {\n    return isEmpty(this.inner);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\n/**\n * Error Codes describing the different ways Firestore can fail. These come\n * directly from GRPC.\n */\nexport type Code = firestore.FirestoreErrorCode;\n\nexport const Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok' as Code,\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled' as Code,\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown' as Code,\n\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument' as Code,\n\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded' as Code,\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found' as Code,\n\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists' as Code,\n\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller can not be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied' as Code,\n\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated' as Code,\n\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted' as Code,\n\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition' as Code,\n\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted' as Code,\n\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range' as Code,\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented' as Code,\n\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal' as Code,\n\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable' as Code,\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss' as Code\n};\n\n/**\n * An error class used for Firestore-generated errors. Ideally we should be\n * using FirebaseError, but integrating with it is overly arduous at the moment,\n * so we define our own compatible error class (with a `name` of 'FirebaseError'\n * and compatible `code` and `message` fields.)\n */\nexport class FirestoreError extends Error implements firestore.FirestoreError {\n  name = 'FirebaseError';\n  stack?: string;\n\n  constructor(readonly code: Code, readonly message: string) {\n    super(message);\n\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport { primitiveComparator } from '../util/misc';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport class Timestamp {\n  static now(): Timestamp {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date: Date): Timestamp {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds: number): Timestamp {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanos);\n  }\n\n  constructor(readonly seconds: number, readonly nanoseconds: number) {\n    if (nanoseconds < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp nanoseconds out of range: ' + nanoseconds\n      );\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Timestamp seconds out of range: ' + seconds\n      );\n    }\n  }\n\n  toDate(): Date {\n    return new Date(this.toMillis());\n  }\n\n  toMillis(): number {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  _compareTo(other: Timestamp): number {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n\n  isEqual(other: Timestamp): boolean {\n    return (\n      other.seconds === this.seconds && other.nanoseconds === this.nanoseconds\n    );\n  }\n\n  toString(): string {\n    return (\n      'Timestamp(seconds=' +\n      this.seconds +\n      ', nanoseconds=' +\n      this.nanoseconds +\n      ')'\n    );\n  }\n\n  valueOf(): string {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static min(): SnapshotVersion {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n\n  isEqual(other: SnapshotVersion): boolean {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport const DOCUMENT_KEY_NAME = '__name__';\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nabstract class BasePath<B extends BasePath<B>> {\n  private segments: string[];\n  private offset: number;\n  private len: number;\n\n  constructor(segments: string[], offset?: number, length?: number) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail('offset ' + offset + ' out of range ' + segments.length);\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail('length ' + length + ' out of range ' + (segments.length - offset));\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  /**\n   * Abstract constructor method to construct an instance of B with the given\n   * parameters.\n   */\n  protected abstract construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): B;\n\n  /**\n   * Returns a String representation.\n   *\n   * Implementing classes are required to provide deterministic implementations as\n   * the String representation is used to obtain canonical Query IDs.\n   */\n  abstract toString(): string;\n\n  get length(): number {\n    return this.len;\n  }\n\n  isEqual(other: B): boolean {\n    return BasePath.comparator(this, other) === 0;\n  }\n\n  child(nameOrPath: string | B): B {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n\n  /** The index of one past the last segment of the path. */\n  private limit(): number {\n    return this.offset + this.length;\n  }\n\n  popFirst(size?: number): B {\n    size = size === undefined ? 1 : size;\n    debugAssert(\n      this.length >= size,\n      \"Can't call popFirst() with less segments\"\n    );\n    return this.construct(\n      this.segments,\n      this.offset + size,\n      this.length - size\n    );\n  }\n\n  popLast(): B {\n    debugAssert(!this.isEmpty(), \"Can't call popLast() on empty path\");\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment(): string {\n    debugAssert(!this.isEmpty(), \"Can't call firstSegment() on empty path\");\n    return this.segments[this.offset];\n  }\n\n  lastSegment(): string {\n    return this.get(this.length - 1);\n  }\n\n  get(index: number): string {\n    debugAssert(index < this.length, 'Index out of range');\n    return this.segments[this.offset + index];\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  isPrefixOf(other: this): boolean {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isImmediateParentOf(potentialChild: this): boolean {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  forEach(fn: (segment: string) => void): void {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n\n  toArray(): string[] {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator<T extends BasePath<T>>(\n    p1: BasePath<T>,\n    p2: BasePath<T>\n  ): number {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n */\nexport class ResourcePath extends BasePath<ResourcePath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): ResourcePath {\n    return new ResourcePath(segments, offset, length);\n  }\n\n  canonicalString(): string {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    return this.toArray().join('/');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Creates a resource path from the given slash-delimited string.\n   */\n  static fromString(path: string): ResourcePath {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n    if (path.indexOf('//') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid path (${path}). Paths must not contain // in them.`\n      );\n    }\n\n    // We may still have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    const segments = path.split('/').filter(segment => segment.length > 0);\n\n    return new ResourcePath(segments);\n  }\n\n  static EMPTY_PATH = new ResourcePath([]);\n}\n\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/** A dot-separated path for navigating sub-objects within a document. */\nexport class FieldPath extends BasePath<FieldPath> {\n  protected construct(\n    segments: string[],\n    offset?: number,\n    length?: number\n  ): FieldPath {\n    return new FieldPath(segments, offset, length);\n  }\n\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  private static isValidIdentifier(segment: string): boolean {\n    return identifierRegExp.test(segment);\n  }\n\n  canonicalString(): string {\n    return this.toArray()\n      .map(str => {\n        str = str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`');\n        if (!FieldPath.isValidIdentifier(str)) {\n          str = '`' + str + '`';\n        }\n        return str;\n      })\n      .join('.');\n  }\n\n  toString(): string {\n    return this.canonicalString();\n  }\n\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField(): boolean {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField(): FieldPath {\n    return new FieldPath([DOCUMENT_KEY_NAME]);\n  }\n\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path: string): FieldPath {\n    const segments: string[] = [];\n    let current = '';\n    let i = 0;\n\n    const addCurrentSegment = (): void => {\n      if (current.length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field path (${path}). Paths must not be empty, begin ` +\n            `with '.', end with '.', or contain '..'`\n        );\n      }\n      segments.push(current);\n      current = '';\n    };\n\n    let inBackticks = false;\n\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has trailing escape character: ' + path\n          );\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Path has invalid escape sequence: ' + path\n          );\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Unterminated ` in path: ' + path\n      );\n    }\n\n    return new FieldPath(segments);\n  }\n\n  static EMPTY_PATH = new FieldPath([]);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    debugAssert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  static fromName(name: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId: string): boolean {\n    return (\n      this.path.length >= 2 &&\n      this.path.get(this.path.length - 2) === collectionId\n    );\n  }\n\n  isEqual(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static EMPTY = new DocumentKey(new ResourcePath([]));\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// An Object whose keys and values are strings.\nexport interface StringMap {\n  [key: string]: string;\n}\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: unknown): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/** Returns whether the value represents -0. */\nexport function isNegativeZero(value: number): boolean {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === -0 && 1 / value === 1 / -0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: unknown): boolean {\n  return (\n    typeof value === 'number' &&\n    Number.isInteger(value) &&\n    !isNegativeZero(value) &&\n    value <= Number.MAX_SAFE_INTEGER &&\n    value >= Number.MIN_SAFE_INTEGER\n  );\n}\n\n/** The subset of the browser's Window interface used by the SDK. */\nexport interface WindowLike {\n  readonly localStorage: Storage;\n  readonly indexedDB: IDBFactory | null;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n\n/** The subset of the browser's Document interface used by the SDK. */\nexport interface DocumentLike {\n  readonly visibilityState: VisibilityState;\n  addEventListener(type: string, listener: EventListener): void;\n  removeEventListener(type: string, listener: EventListener): void;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { decodeBase64, encodeBase64 } from '../platform/base64';\nimport { primitiveComparator } from './misc';\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n */\nexport class ByteString {\n  static readonly EMPTY_BYTE_STRING = new ByteString('');\n\n  private constructor(private readonly binaryString: string) {}\n\n  static fromBase64String(base64: string): ByteString {\n    const binaryString = decodeBase64(base64);\n    return new ByteString(binaryString);\n  }\n\n  static fromUint8Array(array: Uint8Array): ByteString {\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n\n  toBase64(): string {\n    return encodeBase64(this.binaryString);\n  }\n\n  toUint8Array(): Uint8Array {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n\n  approximateByteSize(): number {\n    return this.binaryString.length * 2;\n  }\n\n  compareTo(other: ByteString): number {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n\n  isEqual(other: ByteString): boolean {\n    return this.binaryString === other.binaryString;\n  }\n}\n\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nexport function binaryStringFromUint8Array(array: Uint8Array): string {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nexport function uint8ArrayFromBinaryString(binaryString: string): Uint8Array {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\n/** Converts a binary string to a Base64 encoded string. */\nexport function encodeBase64(raw: string): string {\n  return btoa(raw);\n}\n\n/** True if and only if the Base64 conversion functions are available. */\nexport function isBase64Available(): boolean {\n  return typeof atob !== 'undefined';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport { logError } from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nexport function isPermanentWriteError(code: Code): boolean {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // lookup by string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status: number): Code {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) {\n        return Code.OK;\n      }\n      if (status >= 400 && status < 500) {\n        return Code.FAILED_PRECONDITION;\n      }\n      if (status >= 500 && status < 600) {\n        return Code.INTERNAL;\n      }\n      return Code.UNKNOWN;\n  }\n}\n\n/**\n * Converts an HTTP response's error status to the equivalent error code.\n *\n * @param status An HTTP error response status (\"FAILED_PRECONDITION\",\n * \"UNKNOWN\", etc.)\n * @returns The equivalent Code. Non-matching responses are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpResponseErrorStatus(status: string): Code {\n  const serverError = status.toLowerCase().replace('_', '-');\n  return Object.values(Code).indexOf(serverError as Code) >= 0\n    ? (serverError as Code)\n    : Code.UNKNOWN;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Target } from '../core/target';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { ByteString } from '../util/byte_string';\n\n/** An enumeration of the different purposes we have for targets. */\nexport const enum TargetPurpose {\n  /** A regular, normal query target. */\n  Listen,\n\n  /**\n   * The query target was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query target was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each target.\n */\nexport class TargetData {\n  constructor(\n    /** The target being listened to. */\n    readonly target: Target,\n    /**\n     * The target ID to which the target corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    readonly targetId: TargetId,\n    /** The purpose of the target. */\n    readonly purpose: TargetPurpose,\n    /**\n     * The sequence number of the last transaction during which this target data\n     * was modified.\n     */\n    readonly sequenceNumber: ListenSequenceNumber,\n    /** The latest snapshot version seen for this target. */\n    readonly snapshotVersion: SnapshotVersion = SnapshotVersion.min(),\n    /**\n     * The maximum snapshot version at which the associated view\n     * contained no limbo documents.\n     */\n    readonly lastLimboFreeSnapshotVersion: SnapshotVersion = SnapshotVersion.min(),\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    readonly resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING\n  ) {}\n\n  /** Creates a new target data instance with an updated sequence number. */\n  withSequenceNumber(sequenceNumber: number): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      sequenceNumber,\n      this.snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated resume token and\n   * snapshot version.\n   */\n  withResumeToken(\n    resumeToken: ByteString,\n    snapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      snapshotVersion,\n      this.lastLimboFreeSnapshotVersion,\n      resumeToken\n    );\n  }\n\n  /**\n   * Creates a new target data instance with an updated last limbo free\n   * snapshot version number.\n   */\n  withLastLimboFreeSnapshotVersion(\n    lastLimboFreeSnapshotVersion: SnapshotVersion\n  ): TargetData {\n    return new TargetData(\n      this.target,\n      this.targetId,\n      this.purpose,\n      this.sequenceNumber,\n      this.snapshotVersion,\n      lastLimboFreeSnapshotVersion,\n      this.resumeToken\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ExistenceFilter {\n  // TODO(b/33078163): just use simplest form of existence filter for now\n  constructor(public count: number) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\n\n/*\n * Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\nexport interface Entry<K, V> {\n  key: K;\n  value: V;\n}\n\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nexport class SortedMap<K, V> {\n  // visible for testing\n  root: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  constructor(\n    public comparator: Comparator<K>,\n    root?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .insert(key, value, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns a copy of the map, with the specified key removed.\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap<K, V>(\n      this.comparator,\n      this.root\n        .remove(key, this.comparator)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  // Returns the value of the node with the given key, or null.\n  get(key: K): V | null {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key: K): number {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  // Returns the total number of nodes in the map.\n  get size(): number {\n    return this.root.size;\n  }\n\n  // Returns the minimum key in the map.\n  minKey(): K | null {\n    return this.root.minKey();\n  }\n\n  // Returns the maximum key in the map.\n  maxKey(): K | null {\n    return this.root.maxKey();\n  }\n\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).inorderTraversal(action);\n  }\n\n  forEach(fn: (k: K, v: V) => void): void {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n\n  toString(): string {\n    const descriptions: string[] = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (this.root as LLRBNode<K, V>).reverseTraversal(action);\n  }\n\n  // Returns an iterator over the SortedMap.\n  getIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, false);\n  }\n\n  getIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, false);\n  }\n\n  getReverseIterator(): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, null, this.comparator, true);\n  }\n\n  getReverseIteratorFrom(key: K): SortedMapIterator<K, V> {\n    return new SortedMapIterator<K, V>(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n\n// An iterator over an LLRBNode.\nexport class SortedMapIterator<K, V> {\n  private isReverse: boolean;\n  private nodeStack: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>>;\n\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    isReverse: boolean\n  ) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): Entry<K, V> {\n    debugAssert(\n      this.nodeStack.length > 0,\n      'getNext() called on iterator when hasNext() is false.'\n    );\n\n    let node = this.nodeStack.pop()!;\n    const result = { key: node.key, value: node.value };\n\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack.length > 0;\n  }\n\n  peek(): Entry<K, V> | null {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return { key: node.key, value: node.value };\n  }\n} // end SortedMapIterator\n\n// Represents a node in a Left-leaning Red-Black tree.\nexport class LLRBNode<K, V> {\n  readonly color: boolean;\n  readonly left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  readonly size: number;\n\n  // Empty node is shared between all LLRB trees.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static EMPTY: LLRBEmptyNode<any, any> = null as any;\n\n  static RED = true;\n  static BLACK = false;\n\n  constructor(\n    public key: K,\n    public value: V,\n    color?: boolean,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V>\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.left as LLRBNode<K, V>).inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.right as LLRBNode<K, V>).inorderTraversal(action)\n    );\n  }\n\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal<T>(action: (k: K, v: V) => T): T {\n    return (\n      (this.right as LLRBNode<K, V>).reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      (this.left as LLRBNode<K, V>).reverseTraversal(action)\n    );\n  }\n\n  // Returns the minimum node in the tree.\n  private min(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min();\n    }\n  }\n\n  // Returns the maximum key in the tree.\n  minKey(): K | null {\n    return this.min().key;\n  }\n\n  // Returns the maximum key in the tree.\n  maxKey(): K | null {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  // Returns new tree, with the key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp();\n  }\n\n  private removeMin(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin(), null);\n    return n.fixUp();\n  }\n\n  // Returns new tree, with the specified item removed.\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let smallest: LLRBNode<K, V>;\n    let n: LLRBNode<K, V> = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n\n  isRed(): boolean {\n    return this.color;\n  }\n\n  // Returns new tree after performing any needed rotations.\n  private fixUp(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedLeft(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight()\n      );\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private moveRedRight(): LLRBNode<K, V> {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n\n  private rotateLeft(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return (this.right as LLRBNode<K, V>).copy(\n      null,\n      null,\n      this.color,\n      nl,\n      null\n    );\n  }\n\n  private rotateRight(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return (this.left as LLRBNode<K, V>).copy(null, null, this.color, null, nr);\n  }\n\n  private colorFlip(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  protected check(): number {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed()) {\n      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = (this.left as LLRBNode<K, V>).check();\n    if (blackDepth !== (this.right as LLRBNode<K, V>).check()) {\n      throw fail('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n\n// Represents an empty node (a leaf node in the Red-Black Tree).\nexport class LLRBEmptyNode<K, V> {\n  get key(): never {\n    throw fail('LLRBEmptyNode has no key.');\n  }\n  get value(): never {\n    throw fail('LLRBEmptyNode has no value.');\n  }\n  get color(): never {\n    throw fail('LLRBEmptyNode has no color.');\n  }\n  get left(): never {\n    throw fail('LLRBEmptyNode has no left child.');\n  }\n  get right(): never {\n    throw fail('LLRBEmptyNode has no right child.');\n  }\n  size = 0;\n\n  // Returns a copy of the current node.\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode<K, V>(key, value);\n  }\n\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  isEmpty(): boolean {\n    return true;\n  }\n\n  inorderTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  reverseTraversal(action: (k: K, v: V) => boolean): boolean {\n    return false;\n  }\n\n  minKey(): K | null {\n    return null;\n  }\n\n  maxKey(): K | null {\n    return null;\n  }\n\n  isRed(): boolean {\n    return false;\n  }\n\n  // For testing.\n  checkMaxDepth(): boolean {\n    return true;\n  }\n\n  protected check(): 0 {\n    return 0;\n  }\n} // end LLRBEmptyNode\n\nLLRBNode.EMPTY = new LLRBEmptyNode<unknown, unknown>();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  getIterator(): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIterator());\n  }\n\n  getIteratorFrom(key: T): SortedSetIterator<T> {\n    return new SortedSetIterator<T>(this.data.getIteratorFrom(key));\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  isEqual(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toArray(): T[] {\n    const res: T[] = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n\nexport class SortedSetIterator<T> {\n  constructor(private iter: SortedMapIterator<T, boolean>) {}\n\n  getNext(): T {\n    return this.iter.getNext().key;\n  }\n\n  hasNext(): boolean {\n    return this.iter.hasNext();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { TargetId } from '../core/types';\nimport { primitiveComparator } from '../util/misc';\nimport { Document, MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\n\n/** Miscellaneous collection types / constants. */\nexport interface DocumentSizeEntry {\n  maybeDocument: MaybeDocument;\n  size: number;\n}\n\nexport type MaybeDocumentMap = SortedMap<DocumentKey, MaybeDocument>;\nconst EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap<DocumentKey, MaybeDocument>(\n  DocumentKey.comparator\n);\nexport function maybeDocumentMap(): MaybeDocumentMap {\n  return EMPTY_MAYBE_DOCUMENT_MAP;\n}\n\nexport type NullableMaybeDocumentMap = SortedMap<\n  DocumentKey,\n  MaybeDocument | null\n>;\n\nexport function nullableMaybeDocumentMap(): NullableMaybeDocumentMap {\n  return maybeDocumentMap();\n}\n\nexport interface DocumentSizeEntries {\n  maybeDocuments: NullableMaybeDocumentMap;\n  sizeMap: SortedMap<DocumentKey, number>;\n}\n\nexport type DocumentMap = SortedMap<DocumentKey, Document>;\nconst EMPTY_DOCUMENT_MAP = new SortedMap<DocumentKey, Document>(\n  DocumentKey.comparator\n);\nexport function documentMap(): DocumentMap {\n  return EMPTY_DOCUMENT_MAP;\n}\n\nexport type DocumentVersionMap = SortedMap<DocumentKey, SnapshotVersion>;\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap<DocumentKey, SnapshotVersion>(\n  DocumentKey.comparator\n);\nexport function documentVersionMap(): DocumentVersionMap {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\n\nexport type DocumentKeySet = SortedSet<DocumentKey>;\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nexport function documentKeySet(...keys: DocumentKey[]): DocumentKeySet {\n  let set = EMPTY_DOCUMENT_KEY_SET;\n  for (const key of keys) {\n    set = set.add(key);\n  }\n  return set;\n}\n\nexport type TargetIdSet = SortedSet<TargetId>;\nconst EMPTY_TARGET_ID_SET = new SortedSet<TargetId>(primitiveComparator);\nexport function targetIdSet(): SortedSet<TargetId> {\n  return EMPTY_TARGET_ID_SET;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from '../util/sorted_map';\n\nimport { documentMap } from './collections';\nimport { Document } from './document';\nimport { DocumentComparator } from './document_comparator';\nimport { DocumentKey } from './document_key';\n\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\n\nexport class DocumentSet {\n  /**\n   * Returns an empty copy of the existing DocumentSet, using the same\n   * comparator.\n   */\n  static emptySet(oldSet: DocumentSet): DocumentSet {\n    return new DocumentSet(oldSet.comparator);\n  }\n\n  private comparator: DocumentComparator;\n  private keyedMap: SortedMap<DocumentKey, Document>;\n  private sortedSet: SortedMap<Document, null>;\n\n  /** The default ordering is by key if the comparator is omitted */\n  constructor(comp?: DocumentComparator) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = (d1: Document, d2: Document) =>\n        comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n    } else {\n      this.comparator = (d1: Document, d2: Document) =>\n        DocumentKey.comparator(d1.key, d2.key);\n    }\n\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap<Document, null>(this.comparator);\n  }\n\n  has(key: DocumentKey): boolean {\n    return this.keyedMap.get(key) != null;\n  }\n\n  get(key: DocumentKey): Document | null {\n    return this.keyedMap.get(key);\n  }\n\n  first(): Document | null {\n    return this.sortedSet.minKey();\n  }\n\n  last(): Document | null {\n    return this.sortedSet.maxKey();\n  }\n\n  isEmpty(): boolean {\n    return this.sortedSet.isEmpty();\n  }\n\n  /**\n   * Returns the index of the provided key in the document set, or -1 if the\n   * document key is not present in the set;\n   */\n  indexOf(key: DocumentKey): number {\n    const doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  }\n\n  get size(): number {\n    return this.sortedSet.size;\n  }\n\n  /** Iterates documents in order defined by \"comparator\" */\n  forEach(cb: (doc: Document) => void): void {\n    this.sortedSet.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Inserts or updates a document with the same key */\n  add(doc: Document): DocumentSet {\n    // First remove the element if we have it.\n    const set = this.delete(doc.key);\n    return set.copy(\n      set.keyedMap.insert(doc.key, doc),\n      set.sortedSet.insert(doc, null)\n    );\n  }\n\n  /** Deletes a document with a given key */\n  delete(key: DocumentKey): DocumentSet {\n    const doc = this.get(key);\n    if (!doc) {\n      return this;\n    }\n\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  }\n\n  isEqual(other: DocumentSet | null | undefined): boolean {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    const thisIt = this.sortedSet.getIterator();\n    const otherIt = other.sortedSet.getIterator();\n    while (thisIt.hasNext()) {\n      const thisDoc = thisIt.getNext().key;\n      const otherDoc = otherIt.getNext().key;\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  toString(): string {\n    const docStrings: string[] = [];\n    this.forEach(doc => {\n      docStrings.push(doc.toString());\n    });\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  }\n\n  private copy(\n    keyedMap: SortedMap<DocumentKey, Document>,\n    sortedSet: SortedMap<Document, null>\n  ): DocumentSet {\n    const newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { DocumentKeySet } from '../model/collections';\nimport { Query } from './query';\n\nexport const enum ChangeType {\n  Added,\n  Removed,\n  Modified,\n  Metadata\n}\n\nexport interface DocumentViewChange {\n  type: ChangeType;\n  doc: Document;\n}\n\nexport const enum SyncState {\n  Local,\n  Synced\n}\n\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nexport class DocumentChangeSet {\n  private changeMap = new SortedMap<DocumentKey, DocumentViewChange>(\n    DocumentKey.comparator\n  );\n\n  track(change: DocumentViewChange): void {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n\n    // Merge the new change with the existing change.\n    if (\n      change.type !== ChangeType.Added &&\n      oldChange.type === ChangeType.Metadata\n    ) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (\n      change.type === ChangeType.Metadata &&\n      oldChange.type !== ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Added,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Removed,\n        doc: oldChange.doc\n      });\n    } else if (\n      change.type === ChangeType.Added &&\n      oldChange.type === ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail(\n        'unsupported combination of changes: ' +\n          JSON.stringify(change) +\n          ' after ' +\n          JSON.stringify(oldChange)\n      );\n    }\n  }\n\n  getChanges(): DocumentViewChange[] {\n    const changes: DocumentViewChange[] = [];\n    this.changeMap.inorderTraversal(\n      (key: DocumentKey, change: DocumentViewChange) => {\n        changes.push(change);\n      }\n    );\n    return changes;\n  }\n}\n\nexport class ViewSnapshot {\n  constructor(\n    readonly query: Query,\n    readonly docs: DocumentSet,\n    readonly oldDocs: DocumentSet,\n    readonly docChanges: DocumentViewChange[],\n    readonly mutatedKeys: DocumentKeySet,\n    readonly fromCache: boolean,\n    readonly syncStateChanged: boolean,\n    readonly excludesMetadataChanges: boolean\n  ) {}\n\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n  static fromInitialDocuments(\n    query: Query,\n    documents: DocumentSet,\n    mutatedKeys: DocumentKeySet,\n    fromCache: boolean\n  ): ViewSnapshot {\n    const changes: DocumentViewChange[] = [];\n    documents.forEach(doc => {\n      changes.push({ type: ChangeType.Added, doc });\n    });\n\n    return new ViewSnapshot(\n      query,\n      documents,\n      DocumentSet.emptySet(documents),\n      changes,\n      mutatedKeys,\n      fromCache,\n      /* syncStateChanged= */ true,\n      /* excludesMetadataChanges= */ false\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return !this.mutatedKeys.isEmpty();\n  }\n\n  isEqual(other: ViewSnapshot): boolean {\n    if (\n      this.fromCache !== other.fromCache ||\n      this.syncStateChanged !== other.syncStateChanged ||\n      !this.mutatedKeys.isEqual(other.mutatedKeys) ||\n      !this.query.isEqual(other.query) ||\n      !this.docs.isEqual(other.docs) ||\n      !this.oldDocs.isEqual(other.oldDocs)\n    ) {\n      return false;\n    }\n    const changes: DocumentViewChange[] = this.docChanges;\n    const otherChanges: DocumentViewChange[] = other.docChanges;\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      if (\n        changes[i].type !== otherChanges[i].type ||\n        !changes[i].doc.isEqual(otherChanges[i].doc)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap,\n  MaybeDocumentMap,\n  targetIdSet\n} from '../model/collections';\nimport { SortedSet } from '../util/sorted_set';\nimport { ByteString } from '../util/byte_string';\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nexport class RemoteEvent {\n  constructor(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    readonly snapshotVersion: SnapshotVersion,\n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    readonly targetChanges: Map<TargetId, TargetChange>,\n    /**\n     * A set of targets that is known to be inconsistent. Listens for these\n     * targets should be re-established without resume tokens.\n     */\n    readonly targetMismatches: SortedSet<TargetId>,\n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    readonly documentUpdates: MaybeDocumentMap,\n    /**\n     * A set of which document updates are due only to limbo resolution targets.\n     */\n    readonly resolvedLimboDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * HACK: Views require RemoteEvents in order to determine whether the view is\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\n   * used to create a synthesized RemoteEvent that can be used to apply a\n   * CURRENT status change to a View, for queries executed in a different tab.\n   */\n  // PORTING NOTE: Multi-tab only\n  static createSynthesizedRemoteEventForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n    targetChanges.set(\n      targetId,\n      TargetChange.createSynthesizedTargetChangeForCurrentChange(\n        targetId,\n        current\n      )\n    );\n    return new RemoteEvent(\n      SnapshotVersion.min(),\n      targetChanges,\n      targetIdSet(),\n      maybeDocumentMap(),\n      documentKeySet()\n    );\n  }\n}\n\n/**\n * A TargetChange specifies the set of changes for a specific target as part of\n * a RemoteEvent. These changes track which documents are added, modified or\n * removed, as well as the target's resume token and whether the target is\n * marked CURRENT.\n * The actual changes *to* documents are not part of the TargetChange since\n * documents may be part of multiple targets.\n */\nexport class TargetChange {\n  constructor(\n    /**\n     * An opaque, server-assigned token that allows watching a query to be resumed\n     * after disconnecting without retransmitting all the data that matches the\n     * query. The resume token essentially identifies a point in time from which\n     * the server should resume sending results.\n     */\n    readonly resumeToken: ByteString,\n    /**\n     * The \"current\" (synced) status of this target. Note that \"current\"\n     * has special meaning in the RPC protocol that implies that a target is\n     * both up-to-date and consistent with the rest of the watch stream.\n     */\n    readonly current: boolean,\n    /**\n     * The set of documents that were newly assigned to this target as part of\n     * this remote event.\n     */\n    readonly addedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were already assigned to this target but received\n     * an update during this remote event.\n     */\n    readonly modifiedDocuments: DocumentKeySet,\n    /**\n     * The set of documents that were removed from this target as part of this\n     * remote event.\n     */\n    readonly removedDocuments: DocumentKeySet\n  ) {}\n\n  /**\n   * This method is used to create a synthesized TargetChanges that can be used to\n   * apply a CURRENT status change to a View (for queries executed in a different\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\n   */\n  static createSynthesizedTargetChangeForCurrentChange(\n    targetId: TargetId,\n    current: boolean\n  ): TargetChange {\n    return new TargetChange(\n      ByteString.EMPTY_BYTE_STRING,\n      current,\n      documentKeySet(),\n      documentKeySet(),\n      documentKeySet()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { ChangeType } from '../core/view_snapshot';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  maybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ExistenceFilter } from './existence_filter';\nimport { RemoteEvent, TargetChange } from './remote_event';\nimport { ByteString } from '../util/byte_string';\nimport { isDocumentTarget } from '../core/target';\n\n/**\n * Internal representation of the watcher API protocol buffers.\n */\nexport type WatchChange =\n  | DocumentWatchChange\n  | WatchTargetChange\n  | ExistenceFilterChange;\n\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nexport class DocumentWatchChange {\n  constructor(\n    /** The new document applies to all of these targets. */\n    public updatedTargetIds: TargetId[],\n    /** The new document is removed from all of these targets. */\n    public removedTargetIds: TargetId[],\n    /** The key of the document for this change. */\n    public key: DocumentKey,\n    /**\n     * The new document or NoDocument if it was deleted. Is null if the\n     * document went out of view without the server sending a new document.\n     */\n    public newDoc: MaybeDocument | null\n  ) {}\n}\n\nexport class ExistenceFilterChange {\n  constructor(\n    public targetId: TargetId,\n    public existenceFilter: ExistenceFilter\n  ) {}\n}\n\nexport const enum WatchTargetChangeState {\n  NoChange,\n  Added,\n  Removed,\n  Current,\n  Reset\n}\n\nexport class WatchTargetChange {\n  constructor(\n    /** What kind of change occurred to the watch target. */\n    public state: WatchTargetChangeState,\n    /** The target IDs that were added/removed/set. */\n    public targetIds: TargetId[],\n    /**\n     * An opaque, server-assigned token that allows watching a target to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the target. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING,\n    /** An RPC error indicating why the watch failed. */\n    public cause: FirestoreError | null = null\n  ) {}\n}\n\n/** Tracks the internal state of a Watch target. */\nclass TargetState {\n  /**\n   * The number of pending responses (adds or removes) that we are waiting on.\n   * We only consider targets active that have no pending responses.\n   */\n  private pendingResponses = 0;\n\n  /**\n   * Keeps track of the document changes since the last raised snapshot.\n   *\n   * These changes are continuously updated as we receive document updates and\n   * always reflect the current set of changes against the last issued snapshot.\n   */\n  private documentChanges: SortedMap<\n    DocumentKey,\n    ChangeType\n  > = snapshotChangesMap();\n\n  /** See public getters for explanations of these fields. */\n  private _resumeToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n  private _current = false;\n\n  /**\n   * Whether this target state should be included in the next snapshot. We\n   * initialize to true so that newly-added targets are included in the next\n   * RemoteEvent.\n   */\n  private _hasPendingChanges = true;\n\n  /**\n   * Whether this target has been marked 'current'.\n   *\n   * 'Current' has special meaning in the RPC protocol: It implies that the\n   * Watch backend has sent us all changes up to the point at which the target\n   * was added and that the target is consistent with the rest of the watch\n   * stream.\n   */\n  get current(): boolean {\n    return this._current;\n  }\n\n  /** The last resume token sent to us for this target. */\n  get resumeToken(): ByteString {\n    return this._resumeToken;\n  }\n\n  /** Whether this target has pending target adds or target removes. */\n  get isPending(): boolean {\n    return this.pendingResponses !== 0;\n  }\n\n  /** Whether we have modified any state that should trigger a snapshot. */\n  get hasPendingChanges(): boolean {\n    return this._hasPendingChanges;\n  }\n\n  /**\n   * Applies the resume token to the TargetChange, but only when it has a new\n   * value. Empty resumeTokens are discarded.\n   */\n  updateResumeToken(resumeToken: ByteString): void {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  }\n\n  /**\n   * Creates a target change from the current set of changes.\n   *\n   * To reset the document changes after raising this snapshot, call\n   * `clearPendingChanges()`.\n   */\n  toTargetChange(): TargetChange {\n    let addedDocuments = documentKeySet();\n    let modifiedDocuments = documentKeySet();\n    let removedDocuments = documentKeySet();\n\n    this.documentChanges.forEach((key, changeType) => {\n      switch (changeType) {\n        case ChangeType.Added:\n          addedDocuments = addedDocuments.add(key);\n          break;\n        case ChangeType.Modified:\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n        case ChangeType.Removed:\n          removedDocuments = removedDocuments.add(key);\n          break;\n        default:\n          fail('Encountered invalid change type: ' + changeType);\n      }\n    });\n\n    return new TargetChange(\n      this._resumeToken,\n      this._current,\n      addedDocuments,\n      modifiedDocuments,\n      removedDocuments\n    );\n  }\n\n  /**\n   * Resets the document changes and sets `hasPendingChanges` to false.\n   */\n  clearPendingChanges(): void {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  }\n\n  addDocumentChange(key: DocumentKey, changeType: ChangeType): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  }\n\n  removeDocumentChange(key: DocumentKey): void {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  }\n\n  recordPendingTargetRequest(): void {\n    this.pendingResponses += 1;\n  }\n\n  recordTargetResponse(): void {\n    this.pendingResponses -= 1;\n  }\n\n  markCurrent(): void {\n    this._hasPendingChanges = true;\n    this._current = true;\n  }\n}\n\n/**\n * Interface implemented by RemoteStore to expose target metadata to the\n * WatchChangeAggregator.\n */\nexport interface TargetMetadataProvider {\n  /**\n   * Returns the set of remote document keys for the given target ID as of the\n   * last raised snapshot.\n   */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet;\n\n  /**\n   * Returns the TargetData for an active target ID or 'null' if this target\n   * has become inactive\n   */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null;\n}\n\nconst LOG_TAG = 'WatchChangeAggregator';\n\n/**\n * A helper class to accumulate watch changes into a RemoteEvent.\n */\nexport class WatchChangeAggregator {\n  constructor(private metadataProvider: TargetMetadataProvider) {}\n\n  /** The internal state of all tracked targets. */\n  private targetStates = new Map<TargetId, TargetState>();\n\n  /** Keeps track of the documents to update since the last raised snapshot. */\n  private pendingDocumentUpdates = maybeDocumentMap();\n\n  /** A mapping of document keys to their set of target IDs. */\n  private pendingDocumentTargetMapping = documentTargetMap();\n\n  /**\n   * A list of targets with existence filter mismatches. These targets are\n   * known to be inconsistent and their listens needs to be re-established by\n   * RemoteStore.\n   */\n  private pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n  /**\n   * Processes and adds the DocumentWatchChange to the current set of changes.\n   */\n  handleDocumentChange(docChange: DocumentWatchChange): void {\n    for (const targetId of docChange.updatedTargetIds) {\n      if (docChange.newDoc instanceof Document) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else if (docChange.newDoc instanceof NoDocument) {\n        this.removeDocumentFromTarget(\n          targetId,\n          docChange.key,\n          docChange.newDoc\n        );\n      }\n    }\n\n    for (const targetId of docChange.removedTargetIds) {\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  }\n\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n  handleTargetChange(targetChange: WatchTargetChange): void {\n    this.forEachTarget(targetChange, targetId => {\n      const targetState = this.ensureTargetState(targetId);\n      switch (targetChange.state) {\n        case WatchTargetChangeState.NoChange:\n          if (this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Added:\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n        case WatchTargetChangeState.Removed:\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            this.removeTarget(targetId);\n          }\n          debugAssert(\n            !targetChange.cause,\n            'WatchChangeAggregator does not handle errored targets'\n          );\n          break;\n        case WatchTargetChangeState.Current:\n          if (this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case WatchTargetChangeState.Reset:\n          if (this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            this.resetTarget(targetId);\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        default:\n          fail('Unknown target watch change state: ' + targetChange.state);\n      }\n    });\n  }\n\n  /**\n   * Iterates over all targetIds that the watch change applies to: either the\n   * targetIds explicitly listed in the change or the targetIds of all currently\n   * active targets.\n   */\n  forEachTarget(\n    targetChange: WatchTargetChange,\n    fn: (targetId: TargetId) => void\n  ): void {\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach((_, targetId) => {\n        if (this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handles existence filters and synthesizes deletes for filter mismatches.\n   * Targets that are invalidated by filter mismatches are added to\n   * `pendingTargetResets`.\n   */\n  handleExistenceFilter(watchChange: ExistenceFilterChange): void {\n    const targetId = watchChange.targetId;\n    const expectedCount = watchChange.existenceFilter.count;\n\n    const targetData = this.targetDataForActiveTarget(targetId);\n    if (targetData) {\n      const target = targetData.target;\n      if (isDocumentTarget(target)) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          const key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(\n            targetId,\n            key,\n            new NoDocument(key, SnapshotVersion.min())\n          );\n        } else {\n          hardAssert(\n            expectedCount === 1,\n            'Single document existence filter with count: ' + expectedCount\n          );\n        }\n      } else {\n        const currentSize = this.getCurrentDocumentCountForTarget(targetId);\n        if (currentSize !== expectedCount) {\n          // Existence filter mismatch: We reset the mapping and raise a new\n          // snapshot with `isFromCache:true`.\n          this.resetTarget(targetId);\n          this.pendingTargetResets = this.pendingTargetResets.add(targetId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the currently accumulated state into a remote event at the\n   * provided snapshot version. Resets the accumulated changes before returning.\n   */\n  createRemoteEvent(snapshotVersion: SnapshotVersion): RemoteEvent {\n    const targetChanges = new Map<TargetId, TargetChange>();\n\n    this.targetStates.forEach((targetState, targetId) => {\n      const targetData = this.targetDataForActiveTarget(targetId);\n      if (targetData) {\n        if (targetState.current && isDocumentTarget(targetData.target)) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document. This\n          // resolves the limbo state of the document, removing it from\n          // limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          const key = new DocumentKey(targetData.target.path);\n          if (\n            this.pendingDocumentUpdates.get(key) === null &&\n            !this.targetContainsDocument(targetId, key)\n          ) {\n            this.removeDocumentFromTarget(\n              targetId,\n              key,\n              new NoDocument(key, snapshotVersion)\n            );\n          }\n        }\n\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n\n    let resolvedLimboDocuments = documentKeySet();\n\n    // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n    this.pendingDocumentTargetMapping.forEach((key, targets) => {\n      let isOnlyLimboTarget = true;\n\n      targets.forEachWhile(targetId => {\n        const targetData = this.targetDataForActiveTarget(targetId);\n        if (\n          targetData &&\n          targetData.purpose !== TargetPurpose.LimboResolution\n        ) {\n          isOnlyLimboTarget = false;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n\n    const remoteEvent = new RemoteEvent(\n      snapshotVersion,\n      targetChanges,\n      this.pendingTargetResets,\n      this.pendingDocumentUpdates,\n      resolvedLimboDocuments\n    );\n\n    this.pendingDocumentUpdates = maybeDocumentMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedSet<TargetId>(primitiveComparator);\n\n    return remoteEvent;\n  }\n\n  /**\n   * Adds the provided document to the internal list of document updates and\n   * its document key to the given target's mapping.\n   */\n  // Visible for testing.\n  addDocumentToTarget(targetId: TargetId, document: MaybeDocument): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const changeType = this.targetContainsDocument(targetId, document.key)\n      ? ChangeType.Modified\n      : ChangeType.Added;\n\n    const targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n      document.key,\n      document\n    );\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      document.key,\n      this.ensureDocumentTargetMapping(document.key).add(targetId)\n    );\n  }\n\n  /**\n   * Removes the provided document from the target mapping. If the\n   * document no longer matches the target, but the document's state is still\n   * known (e.g. we know that the document was deleted or we received the change\n   * that caused the filter mismatch), the new document can be provided\n   * to update the remote document cache.\n   */\n  // Visible for testing.\n  removeDocumentFromTarget(\n    targetId: TargetId,\n    key: DocumentKey,\n    updatedDocument: MaybeDocument | null\n  ): void {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    const targetState = this.ensureTargetState(targetId);\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, ChangeType.Removed);\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n      key,\n      this.ensureDocumentTargetMapping(key).delete(targetId)\n    );\n\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(\n        key,\n        updatedDocument\n      );\n    }\n  }\n\n  removeTarget(targetId: TargetId): void {\n    this.targetStates.delete(targetId);\n  }\n\n  /**\n   * Returns the current count of documents in the target. This includes both\n   * the number of documents that the LocalStore considers to be part of the\n   * target as well as any accumulated changes.\n   */\n  private getCurrentDocumentCountForTarget(targetId: TargetId): number {\n    const targetState = this.ensureTargetState(targetId);\n    const targetChange = targetState.toTargetChange();\n    return (\n      this.metadataProvider.getRemoteKeysForTarget(targetId).size +\n      targetChange.addedDocuments.size -\n      targetChange.removedDocuments.size\n    );\n  }\n\n  /**\n   * Increment the number of acks needed from watch before we can consider the\n   * server to be 'in-sync' with the client's active targets.\n   */\n  recordPendingTargetRequest(targetId: TargetId): void {\n    // For each request we get we need to record we need a response for it.\n    const targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  }\n\n  private ensureTargetState(targetId: TargetId): TargetState {\n    let result = this.targetStates.get(targetId);\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n    return result;\n  }\n\n  private ensureDocumentTargetMapping(key: DocumentKey): SortedSet<TargetId> {\n    let targetMapping = this.pendingDocumentTargetMapping.get(key);\n\n    if (!targetMapping) {\n      targetMapping = new SortedSet<TargetId>(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(\n        key,\n        targetMapping\n      );\n    }\n\n    return targetMapping;\n  }\n\n  /**\n   * Verifies that the user is still interested in this target (by calling\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\n   * from watch.\n   */\n  protected isActiveTarget(targetId: TargetId): boolean {\n    const targetActive = this.targetDataForActiveTarget(targetId) !== null;\n    if (!targetActive) {\n      logDebug(LOG_TAG, 'Detected inactive target', targetId);\n    }\n    return targetActive;\n  }\n\n  /**\n   * Returns the TargetData for an active target (i.e. a target that the user\n   * is still interested in that has no outstanding target change requests).\n   */\n  protected targetDataForActiveTarget(targetId: TargetId): TargetData | null {\n    const targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending\n      ? null\n      : this.metadataProvider.getTargetDataForTarget(targetId);\n  }\n\n  /**\n   * Resets the state of a Watch target to its initial state (e.g. sets\n   * 'current' to false, clears the resume token and removes its target mapping\n   * from all documents).\n   */\n  private resetTarget(targetId: TargetId): void {\n    debugAssert(\n      !this.targetStates.get(targetId)!.isPending,\n      'Should only reset active targets'\n    );\n    this.targetStates.set(targetId, new TargetState());\n\n    // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(key => {\n      this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\n    });\n  }\n  /**\n   * Returns whether the LocalStore considers the document to be part of the\n   * specified target.\n   */\n  private targetContainsDocument(\n    targetId: TargetId,\n    key: DocumentKey\n  ): boolean {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  }\n}\n\nfunction documentTargetMap(): SortedMap<DocumentKey, SortedSet<TargetId>> {\n  return new SortedMap<DocumentKey, SortedSet<TargetId>>(\n    DocumentKey.comparator\n  );\n}\n\nfunction snapshotChangesMap(): SortedMap<DocumentKey, ChangeType> {\n  return new SortedMap<DocumentKey, ChangeType>(DocumentKey.comparator);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\nimport { Timestamp } from '../api/timestamp';\nimport { normalizeTimestamp } from './values';\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nexport function isServerTimestamp(value: api.Value | null): boolean {\n  const type = (value?.mapValue?.fields || {})[TYPE_KEY]?.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nexport function serverTimestamp(\n  localWriteTime: Timestamp,\n  previousValue: api.Value | null\n): api.Value {\n  const mapValue: api.MapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n\n  if (previousValue) {\n    mapValue.fields![PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return { mapValue };\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nexport function getPreviousValue(value: api.Value): api.Value | null {\n  const previousValue = value.mapValue!.fields![PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nexport function getLocalWriteTime(value: api.Value): Timestamp {\n  const localWriteTime = normalizeTimestamp(\n    value.mapValue!.fields![LOCAL_WRITE_TIME_KEY].timestampValue!\n  );\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { TypeOrder } from './object_value';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach, objectSize } from '../util/obj';\nimport { ByteString } from '../util/byte_string';\nimport { isNegativeZero } from '../util/types';\nimport { DocumentKey } from './document_key';\nimport { arrayEquals, primitiveComparator } from '../util/misc';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  getLocalWriteTime,\n  getPreviousValue,\n  isServerTimestamp\n} from './server_timestamps';\n\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/\n);\n\n/** Extracts the backend's type order for the provided value. */\nexport function typeOrder(value: api.Value): TypeOrder {\n  if ('nullValue' in value) {\n    return TypeOrder.NullValue;\n  } else if ('booleanValue' in value) {\n    return TypeOrder.BooleanValue;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return TypeOrder.NumberValue;\n  } else if ('timestampValue' in value) {\n    return TypeOrder.TimestampValue;\n  } else if ('stringValue' in value) {\n    return TypeOrder.StringValue;\n  } else if ('bytesValue' in value) {\n    return TypeOrder.BlobValue;\n  } else if ('referenceValue' in value) {\n    return TypeOrder.RefValue;\n  } else if ('geoPointValue' in value) {\n    return TypeOrder.GeoPointValue;\n  } else if ('arrayValue' in value) {\n    return TypeOrder.ArrayValue;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return TypeOrder.ServerTimestampValue;\n    }\n    return TypeOrder.ObjectValue;\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nexport function valueEquals(left: api.Value, right: api.Value): boolean {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return true;\n    case TypeOrder.BooleanValue:\n      return left.booleanValue === right.booleanValue;\n    case TypeOrder.ServerTimestampValue:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case TypeOrder.TimestampValue:\n      return timestampEquals(left, right);\n    case TypeOrder.StringValue:\n      return left.stringValue === right.stringValue;\n    case TypeOrder.BlobValue:\n      return blobEquals(left, right);\n    case TypeOrder.RefValue:\n      return left.referenceValue === right.referenceValue;\n    case TypeOrder.GeoPointValue:\n      return geoPointEquals(left, right);\n    case TypeOrder.NumberValue:\n      return numberEquals(left, right);\n    case TypeOrder.ArrayValue:\n      return arrayEquals(\n        left.arrayValue!.values || [],\n        right.arrayValue!.values || [],\n        valueEquals\n      );\n    case TypeOrder.ObjectValue:\n      return objectEquals(left, right);\n    default:\n      return fail('Unexpected value type: ' + JSON.stringify(left));\n  }\n}\n\nfunction timestampEquals(left: api.Value, right: api.Value): boolean {\n  if (\n    typeof left.timestampValue === 'string' &&\n    typeof right.timestampValue === 'string' &&\n    left.timestampValue.length === right.timestampValue.length\n  ) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  const leftTimestamp = normalizeTimestamp(left.timestampValue!);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue!);\n  return (\n    leftTimestamp.seconds === rightTimestamp.seconds &&\n    leftTimestamp.nanos === rightTimestamp.nanos\n  );\n}\n\nfunction geoPointEquals(left: api.Value, right: api.Value): boolean {\n  return (\n    normalizeNumber(left.geoPointValue!.latitude) ===\n      normalizeNumber(right.geoPointValue!.latitude) &&\n    normalizeNumber(left.geoPointValue!.longitude) ===\n      normalizeNumber(right.geoPointValue!.longitude)\n  );\n}\n\nfunction blobEquals(left: api.Value, right: api.Value): boolean {\n  return normalizeByteString(left.bytesValue!).isEqual(\n    normalizeByteString(right.bytesValue!)\n  );\n}\n\nexport function numberEquals(left: api.Value, right: api.Value): boolean {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return (\n      normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue)\n    );\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue!);\n    const n2 = normalizeNumber(right.doubleValue!);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left: api.Value, right: api.Value): boolean {\n  const leftMap = left.mapValue!.fields || {};\n  const rightMap = right.mapValue!.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (\n        rightMap[key] === undefined ||\n        !valueEquals(leftMap[key], rightMap[key])\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/** Returns true if the ArrayValue contains the specified element. */\nexport function arrayValueContains(\n  haystack: api.ArrayValue,\n  needle: api.Value\n): boolean {\n  return (\n    (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined\n  );\n}\n\nexport function valueCompare(left: api.Value, right: api.Value): number {\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case TypeOrder.NullValue:\n      return 0;\n    case TypeOrder.BooleanValue:\n      return primitiveComparator(left.booleanValue!, right.booleanValue!);\n    case TypeOrder.NumberValue:\n      return compareNumbers(left, right);\n    case TypeOrder.TimestampValue:\n      return compareTimestamps(left.timestampValue!, right.timestampValue!);\n    case TypeOrder.ServerTimestampValue:\n      return compareTimestamps(\n        getLocalWriteTime(left),\n        getLocalWriteTime(right)\n      );\n    case TypeOrder.StringValue:\n      return primitiveComparator(left.stringValue!, right.stringValue!);\n    case TypeOrder.BlobValue:\n      return compareBlobs(left.bytesValue!, right.bytesValue!);\n    case TypeOrder.RefValue:\n      return compareReferences(left.referenceValue!, right.referenceValue!);\n    case TypeOrder.GeoPointValue:\n      return compareGeoPoints(left.geoPointValue!, right.geoPointValue!);\n    case TypeOrder.ArrayValue:\n      return compareArrays(left.arrayValue!, right.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return compareMaps(left.mapValue!, right.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + leftType);\n  }\n}\n\nfunction compareNumbers(left: api.Value, right: api.Value): number {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left: api.Timestamp, right: api.Timestamp): number {\n  if (\n    typeof left === 'string' &&\n    typeof right === 'string' &&\n    left.length === right.length\n  ) {\n    return primitiveComparator(left, right);\n  }\n\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n\n  const comparison = primitiveComparator(\n    leftTimestamp.seconds,\n    rightTimestamp.seconds\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath: string, rightPath: string): number {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left: api.LatLng, right: api.LatLng): number {\n  const comparison = primitiveComparator(\n    normalizeNumber(left.latitude),\n    normalizeNumber(right.latitude)\n  );\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(\n    normalizeNumber(left.longitude),\n    normalizeNumber(right.longitude)\n  );\n}\n\nfunction compareBlobs(\n  left: string | Uint8Array,\n  right: string | Uint8Array\n): number {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left: api.ArrayValue, right: api.ArrayValue): number {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left: api.MapValue, right: api.MapValue): number {\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nexport function canonicalId(value: api.Value): string {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value: api.Value): string {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue!;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue!;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue!;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue!);\n  } else if ('stringValue' in value) {\n    return value.stringValue!;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue!);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue!);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue!);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue!);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue!);\n  } else {\n    return fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction canonifyByteString(byteString: string | Uint8Array): string {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp: api.Timestamp): string {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\n\nfunction canonifyGeoPoint(geoPoint: api.LatLng): string {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\n\nfunction canonifyReference(referenceValue: string): string {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue: api.MapValue): string {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields![key])}`;\n  }\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue: api.ArrayValue): string {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nexport function estimateByteSize(value: api.Value): number {\n  switch (typeOrder(value)) {\n    case TypeOrder.NullValue:\n      return 4;\n    case TypeOrder.BooleanValue:\n      return 4;\n    case TypeOrder.NumberValue:\n      return 8;\n    case TypeOrder.TimestampValue:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case TypeOrder.ServerTimestampValue:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case TypeOrder.StringValue:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue!.length * 2;\n    case TypeOrder.BlobValue:\n      return normalizeByteString(value.bytesValue!).approximateByteSize();\n    case TypeOrder.RefValue:\n      return value.referenceValue!.length;\n    case TypeOrder.GeoPointValue:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case TypeOrder.ArrayValue:\n      return estimateArrayByteSize(value.arrayValue!);\n    case TypeOrder.ObjectValue:\n      return estimateMapByteSize(value.mapValue!);\n    default:\n      throw fail('Invalid value type: ' + JSON.stringify(value));\n  }\n}\n\nfunction estimateMapByteSize(mapValue: api.MapValue): number {\n  let size = 0;\n  forEach(mapValue.fields || {}, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\n\nfunction estimateArrayByteSize(arrayValue: api.ArrayValue): number {\n  return (arrayValue.values || []).reduce(\n    (previousSize, value) => previousSize + estimateByteSize(value),\n    0\n  );\n}\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nexport function normalizeTimestamp(\n  date: api.Timestamp\n): { seconds: number; nanos: number } {\n  hardAssert(!!date, 'Cannot normalize null or undefined timestamp.');\n\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction, 'invalid timestamp: ' + date);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n\n    return { seconds, nanos };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return { seconds, nanos };\n  }\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nexport function normalizeNumber(value: number | string | undefined): number {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nexport function normalizeByteString(blob: string | Uint8Array): ByteString {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/** Returns a reference value for the provided database and key. */\nexport function refValue(databaseId: DatabaseId, key: DocumentKey): api.Value {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${\n      databaseId.database\n    }/documents/${key.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an IntegerValue . */\nexport function isInteger(\n  value?: api.Value | null\n): value is { integerValue: string | number } {\n  return !!value && 'integerValue' in value;\n}\n\n/** Returns true if `value` is a DoubleValue. */\nexport function isDouble(\n  value?: api.Value | null\n): value is { doubleValue: string | number } {\n  return !!value && 'doubleValue' in value;\n}\n\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nexport function isNumber(value?: api.Value | null): boolean {\n  return isInteger(value) || isDouble(value);\n}\n\n/** Returns true if `value` is an ArrayValue. */\nexport function isArray(\n  value?: api.Value | null\n): value is { arrayValue: api.ArrayValue } {\n  return !!value && 'arrayValue' in value;\n}\n\n/** Returns true if `value` is a ReferenceValue. */\nexport function isReferenceValue(\n  value?: api.Value | null\n): value is { referenceValue: string } {\n  return !!value && 'referenceValue' in value;\n}\n\n/** Returns true if `value` is a NullValue. */\nexport function isNullValue(\n  value?: api.Value | null\n): value is { nullValue: 'NULL_VALUE' } {\n  return !!value && 'nullValue' in value;\n}\n\n/** Returns true if `value` is NaN. */\nexport function isNanValue(\n  value?: api.Value | null\n): value is { doubleValue: 'NaN' | number } {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nexport function isMapValue(\n  value?: api.Value | null\n): value is { mapValue: api.MapValue } {\n  return !!value && 'mapValue' in value;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { Timestamp } from '../api/timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  LimitType,\n  Operator,\n  OrderBy,\n  Query\n} from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { isDocumentTarget, Target } from '../core/target';\nimport { TargetId } from '../core/types';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ObjectValue } from '../model/object_value';\nimport {\n  DeleteMutation,\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  MutationResult,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation,\n  VerifyMutation\n} from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { ByteString } from '../util/byte_string';\nimport {\n  isNegativeZero,\n  isNullOrUndefined,\n  isSafeInteger\n} from '../util/types';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform,\n  TransformOperation\n} from '../model/transform_operation';\nimport { ExistenceFilter } from './existence_filter';\nimport { mapCodeFromRpcCode } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  WatchChange,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { isNanValue, isNullValue, normalizeTimestamp } from '../model/values';\nimport {\n  TargetChangeTargetChangeType,\n  WriteResult\n} from '../protos/firestore_proto_api';\n\nconst DIRECTIONS = (() => {\n  const dirs: { [dir: string]: api.OrderDirection } = {};\n  dirs[Direction.ASCENDING] = 'ASCENDING';\n  dirs[Direction.DESCENDING] = 'DESCENDING';\n  return dirs;\n})();\n\nconst OPERATORS = (() => {\n  const ops: { [op: string]: api.FieldFilterOp } = {};\n  ops[Operator.LESS_THAN] = 'LESS_THAN';\n  ops[Operator.LESS_THAN_OR_EQUAL] = 'LESS_THAN_OR_EQUAL';\n  ops[Operator.GREATER_THAN] = 'GREATER_THAN';\n  ops[Operator.GREATER_THAN_OR_EQUAL] = 'GREATER_THAN_OR_EQUAL';\n  ops[Operator.EQUAL] = 'EQUAL';\n  ops[Operator.ARRAY_CONTAINS] = 'ARRAY_CONTAINS';\n  ops[Operator.IN] = 'IN';\n  ops[Operator.ARRAY_CONTAINS_ANY] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\n\nfunction assertPresent(value: unknown, description: string): asserts value {\n  debugAssert(!isNullOrUndefined(value), description + ' is missing');\n}\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nexport class JsonProtoSerializer {\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly useProto3Json: boolean\n  ) {}\n}\n\nfunction fromRpcStatus(status: api.Status): FirestoreError {\n  const code =\n    status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\n  return new FirestoreError(code, status.message || '');\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\nfunction toInt32Proto(\n  serializer: JsonProtoSerializer,\n  val: number | null\n): number | { value: number } | null {\n  if (serializer.useProto3Json || isNullOrUndefined(val)) {\n    return val;\n  } else {\n    return { value: val };\n  }\n}\n\n/**\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\n */\nfunction fromInt32Proto(\n  val: number | { value: number } | undefined\n): number | null {\n  let result;\n  if (typeof val === 'object') {\n    result = val.value;\n  } else {\n    result = val;\n  }\n  return isNullOrUndefined(result) ? null : result;\n}\n\n/**\n * Returns an IntegerValue for `value`.\n */\nexport function toInteger(value: number): api.Value {\n  return { integerValue: '' + value };\n}\n\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\nexport function toDouble(\n  serializer: JsonProtoSerializer,\n  value: number\n): api.Value {\n  if (serializer.useProto3Json) {\n    if (isNaN(value)) {\n      return { doubleValue: 'NaN' };\n    } else if (value === Infinity) {\n      return { doubleValue: 'Infinity' };\n    } else if (value === -Infinity) {\n      return { doubleValue: '-Infinity' };\n    }\n  }\n  return { doubleValue: isNegativeZero(value) ? '-0' : value };\n}\n\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nexport function toNumber(\n  serializer: JsonProtoSerializer,\n  value: number\n): api.Value {\n  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\n}\n\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nexport function toTimestamp(\n  serializer: JsonProtoSerializer,\n  timestamp: Timestamp\n): api.Timestamp {\n  if (serializer.useProto3Json) {\n    // Serialize to ISO-8601 date format, but with full nano resolution.\n    // Since JS Date has only millis, let's only use it for the seconds and\n    // then manually add the fractions to the end.\n    const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n    // Remove .xxx frac part and Z in the end.\n    const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n    // Pad the fraction out to 9 digits (nanos).\n    const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n\n    return `${strUntilSeconds}.${nanoStr}Z`;\n  } else {\n    return {\n      seconds: '' + timestamp.seconds,\n      nanos: timestamp.nanoseconds\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  }\n}\n\nfunction fromTimestamp(date: api.Timestamp): Timestamp {\n  const timestamp = normalizeTimestamp(date);\n  return new Timestamp(timestamp.seconds, timestamp.nanos);\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nexport function toBytes(\n  serializer: JsonProtoSerializer,\n  bytes: Blob | ByteString\n): string | Uint8Array {\n  if (serializer.useProto3Json) {\n    return bytes.toBase64();\n  } else {\n    return bytes.toUint8Array();\n  }\n}\n\n/**\n * Returns a ByteString based on the proto string value.\n */\nexport function fromBytes(\n  serializer: JsonProtoSerializer,\n  value: string | Uint8Array | undefined\n): ByteString {\n  if (serializer.useProto3Json) {\n    hardAssert(\n      value === undefined || typeof value === 'string',\n      'value must be undefined or a string when using proto3 Json'\n    );\n    return ByteString.fromBase64String(value ? value : '');\n  } else {\n    hardAssert(\n      value === undefined || value instanceof Uint8Array,\n      'value must be undefined or Uint8Array'\n    );\n    return ByteString.fromUint8Array(value ? value : new Uint8Array());\n  }\n}\n\nexport function toVersion(\n  serializer: JsonProtoSerializer,\n  version: SnapshotVersion\n): api.Timestamp {\n  return toTimestamp(serializer, version.toTimestamp());\n}\n\nexport function fromVersion(version: api.Timestamp): SnapshotVersion {\n  hardAssert(!!version, \"Trying to deserialize version that isn't set\");\n  return SnapshotVersion.fromTimestamp(fromTimestamp(version));\n}\n\nexport function toResourceName(\n  databaseId: DatabaseId,\n  path: ResourcePath\n): string {\n  return fullyQualifiedPrefixPath(databaseId)\n    .child('documents')\n    .child(path)\n    .canonicalString();\n}\n\nfunction fromResourceName(name: string): ResourcePath {\n  const resource = ResourcePath.fromString(name);\n  hardAssert(\n    isValidResourceName(resource),\n    'Tried to deserialize invalid key ' + resource.toString()\n  );\n  return resource;\n}\n\nexport function toName(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey\n): string {\n  return toResourceName(serializer.databaseId, key.path);\n}\n\nexport function fromName(\n  serializer: JsonProtoSerializer,\n  name: string\n): DocumentKey {\n  const resource = fromResourceName(name);\n  hardAssert(\n    resource.get(1) === serializer.databaseId.projectId,\n    'Tried to deserialize key from different project: ' +\n      resource.get(1) +\n      ' vs ' +\n      serializer.databaseId.projectId\n  );\n  hardAssert(\n    (!resource.get(3) && !serializer.databaseId.database) ||\n      resource.get(3) === serializer.databaseId.database,\n    'Tried to deserialize key from different database: ' +\n      resource.get(3) +\n      ' vs ' +\n      serializer.databaseId.database\n  );\n  return new DocumentKey(extractLocalPathFromResourceName(resource));\n}\n\nfunction toQueryPath(\n  serializer: JsonProtoSerializer,\n  path: ResourcePath\n): string {\n  return toResourceName(serializer.databaseId, path);\n}\n\nfunction fromQueryPath(name: string): ResourcePath {\n  const resourceName = fromResourceName(name);\n  // In v1beta1 queries for collections at the root did not have a trailing\n  // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n  // ability to read the v1beta1 form for compatibility with queries persisted\n  // in the local target cache.\n  if (resourceName.length === 4) {\n    return ResourcePath.EMPTY_PATH;\n  }\n  return extractLocalPathFromResourceName(resourceName);\n}\n\nexport function getEncodedDatabaseId(serializer: JsonProtoSerializer): string {\n  const path = new ResourcePath([\n    'projects',\n    serializer.databaseId.projectId,\n    'databases',\n    serializer.databaseId.database\n  ]);\n  return path.canonicalString();\n}\n\nfunction fullyQualifiedPrefixPath(databaseId: DatabaseId): ResourcePath {\n  return new ResourcePath([\n    'projects',\n    databaseId.projectId,\n    'databases',\n    databaseId.database\n  ]);\n}\n\nfunction extractLocalPathFromResourceName(\n  resourceName: ResourcePath\n): ResourcePath {\n  hardAssert(\n    resourceName.length > 4 && resourceName.get(4) === 'documents',\n    'tried to deserialize invalid key ' + resourceName.toString()\n  );\n  return resourceName.popFirst(5);\n}\n\n/** Creates an api.Document from key and fields (but no create/update time) */\nexport function toMutationDocument(\n  serializer: JsonProtoSerializer,\n  key: DocumentKey,\n  fields: ObjectValue\n): api.Document {\n  return {\n    name: toName(serializer, key),\n    fields: fields.proto.mapValue.fields\n  };\n}\n\nexport function toDocument(\n  serializer: JsonProtoSerializer,\n  document: Document\n): api.Document {\n  debugAssert(\n    !document.hasLocalMutations,\n    \"Can't serialize documents with mutations.\"\n  );\n  return {\n    name: toName(serializer, document.key),\n    fields: document.toProto().mapValue.fields,\n    updateTime: toTimestamp(serializer, document.version.toTimestamp())\n  };\n}\n\nexport function fromDocument(\n  serializer: JsonProtoSerializer,\n  document: api.Document,\n  hasCommittedMutations?: boolean\n): Document {\n  const key = fromName(serializer, document.name!);\n  const version = fromVersion(document.updateTime!);\n  const data = new ObjectValue({ mapValue: { fields: document.fields } });\n  return new Document(key, version, data, {\n    hasCommittedMutations: !!hasCommittedMutations\n  });\n}\n\nfunction fromFound(\n  serializer: JsonProtoSerializer,\n  doc: api.BatchGetDocumentsResponse\n): Document {\n  hardAssert(\n    !!doc.found,\n    'Tried to deserialize a found document from a missing document.'\n  );\n  assertPresent(doc.found.name, 'doc.found.name');\n  assertPresent(doc.found.updateTime, 'doc.found.updateTime');\n  const key = fromName(serializer, doc.found.name);\n  const version = fromVersion(doc.found.updateTime);\n  const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\n  return new Document(key, version, data, {});\n}\n\nfunction fromMissing(\n  serializer: JsonProtoSerializer,\n  result: api.BatchGetDocumentsResponse\n): NoDocument {\n  hardAssert(\n    !!result.missing,\n    'Tried to deserialize a missing document from a found document.'\n  );\n  hardAssert(\n    !!result.readTime,\n    'Tried to deserialize a missing document without a read time.'\n  );\n  const key = fromName(serializer, result.missing);\n  const version = fromVersion(result.readTime);\n  return new NoDocument(key, version);\n}\n\nexport function fromMaybeDocument(\n  serializer: JsonProtoSerializer,\n  result: api.BatchGetDocumentsResponse\n): MaybeDocument {\n  if ('found' in result) {\n    return fromFound(serializer, result);\n  } else if ('missing' in result) {\n    return fromMissing(serializer, result);\n  }\n  return fail('invalid batch get response: ' + JSON.stringify(result));\n}\n\nexport function fromWatchChange(\n  serializer: JsonProtoSerializer,\n  change: api.ListenResponse\n): WatchChange {\n  let watchChange: WatchChange;\n  if ('targetChange' in change) {\n    assertPresent(change.targetChange, 'targetChange');\n    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n    // if unset\n    const state = fromWatchTargetChangeState(\n      change.targetChange.targetChangeType || 'NO_CHANGE'\n    );\n    const targetIds: TargetId[] = change.targetChange.targetIds || [];\n\n    const resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\n    const causeProto = change.targetChange!.cause;\n    const cause = causeProto && fromRpcStatus(causeProto);\n    watchChange = new WatchTargetChange(\n      state,\n      targetIds,\n      resumeToken,\n      cause || null\n    );\n  } else if ('documentChange' in change) {\n    assertPresent(change.documentChange, 'documentChange');\n    const entityChange = change.documentChange;\n    assertPresent(entityChange.document, 'documentChange.name');\n    assertPresent(entityChange.document.name, 'documentChange.document.name');\n    assertPresent(\n      entityChange.document.updateTime,\n      'documentChange.document.updateTime'\n    );\n    const key = fromName(serializer, entityChange.document.name);\n    const version = fromVersion(entityChange.document.updateTime);\n    const data = new ObjectValue({\n      mapValue: { fields: entityChange.document.fields }\n    });\n    const doc = new Document(key, version, data, {});\n    const updatedTargetIds = entityChange.targetIds || [];\n    const removedTargetIds = entityChange.removedTargetIds || [];\n    watchChange = new DocumentWatchChange(\n      updatedTargetIds,\n      removedTargetIds,\n      doc.key,\n      doc\n    );\n  } else if ('documentDelete' in change) {\n    assertPresent(change.documentDelete, 'documentDelete');\n    const docDelete = change.documentDelete;\n    assertPresent(docDelete.document, 'documentDelete.document');\n    const key = fromName(serializer, docDelete.document);\n    const version = docDelete.readTime\n      ? fromVersion(docDelete.readTime)\n      : SnapshotVersion.min();\n    const doc = new NoDocument(key, version);\n    const removedTargetIds = docDelete.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n  } else if ('documentRemove' in change) {\n    assertPresent(change.documentRemove, 'documentRemove');\n    const docRemove = change.documentRemove;\n    assertPresent(docRemove.document, 'documentRemove');\n    const key = fromName(serializer, docRemove.document);\n    const removedTargetIds = docRemove.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n  } else if ('filter' in change) {\n    // TODO(dimond): implement existence filter parsing with strategy.\n    assertPresent(change.filter, 'filter');\n    const filter = change.filter;\n    assertPresent(filter.targetId, 'filter.targetId');\n    const count = filter.count || 0;\n    const existenceFilter = new ExistenceFilter(count);\n    const targetId = filter.targetId;\n    watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n  } else {\n    return fail('Unknown change type ' + JSON.stringify(change));\n  }\n  return watchChange;\n}\n\nfunction fromWatchTargetChangeState(\n  state: TargetChangeTargetChangeType\n): WatchTargetChangeState {\n  if (state === 'NO_CHANGE') {\n    return WatchTargetChangeState.NoChange;\n  } else if (state === 'ADD') {\n    return WatchTargetChangeState.Added;\n  } else if (state === 'REMOVE') {\n    return WatchTargetChangeState.Removed;\n  } else if (state === 'CURRENT') {\n    return WatchTargetChangeState.Current;\n  } else if (state === 'RESET') {\n    return WatchTargetChangeState.Reset;\n  } else {\n    return fail('Got unexpected TargetChange.state: ' + state);\n  }\n}\n\nexport function versionFromListenResponse(\n  change: api.ListenResponse\n): SnapshotVersion {\n  // We have only reached a consistent snapshot for the entire stream if there\n  // is a read_time set and it applies to all targets (i.e. the list of\n  // targets is empty). The backend is guaranteed to send such responses.\n  if (!('targetChange' in change)) {\n    return SnapshotVersion.min();\n  }\n  const targetChange = change.targetChange!;\n  if (targetChange.targetIds && targetChange.targetIds.length) {\n    return SnapshotVersion.min();\n  }\n  if (!targetChange.readTime) {\n    return SnapshotVersion.min();\n  }\n  return fromVersion(targetChange.readTime);\n}\n\nexport function toMutation(\n  serializer: JsonProtoSerializer,\n  mutation: Mutation\n): api.Write {\n  let result: api.Write;\n  if (mutation instanceof SetMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.value)\n    };\n  } else if (mutation instanceof DeleteMutation) {\n    result = { delete: toName(serializer, mutation.key) };\n  } else if (mutation instanceof PatchMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.data),\n      updateMask: toDocumentMask(mutation.fieldMask)\n    };\n  } else if (mutation instanceof TransformMutation) {\n    result = {\n      transform: {\n        document: toName(serializer, mutation.key),\n        fieldTransforms: mutation.fieldTransforms.map(transform =>\n          toFieldTransform(serializer, transform)\n        )\n      }\n    };\n  } else if (mutation instanceof VerifyMutation) {\n    result = {\n      verify: toName(serializer, mutation.key)\n    };\n  } else {\n    return fail('Unknown mutation type ' + mutation.type);\n  }\n\n  if (!mutation.precondition.isNone) {\n    result.currentDocument = toPrecondition(serializer, mutation.precondition);\n  }\n\n  return result;\n}\n\nexport function fromMutation(\n  serializer: JsonProtoSerializer,\n  proto: api.Write\n): Mutation {\n  const precondition = proto.currentDocument\n    ? fromPrecondition(proto.currentDocument)\n    : Precondition.none();\n\n  if (proto.update) {\n    assertPresent(proto.update.name, 'name');\n    const key = fromName(serializer, proto.update.name);\n    const value = new ObjectValue({\n      mapValue: { fields: proto.update.fields }\n    });\n    if (proto.updateMask) {\n      const fieldMask = fromDocumentMask(proto.updateMask);\n      return new PatchMutation(key, value, fieldMask, precondition);\n    } else {\n      return new SetMutation(key, value, precondition);\n    }\n  } else if (proto.delete) {\n    const key = fromName(serializer, proto.delete);\n    return new DeleteMutation(key, precondition);\n  } else if (proto.transform) {\n    const key = fromName(serializer, proto.transform.document!);\n    const fieldTransforms = proto.transform.fieldTransforms!.map(transform =>\n      fromFieldTransform(serializer, transform)\n    );\n    hardAssert(\n      precondition.exists === true,\n      'Transforms only support precondition \"exists == true\"'\n    );\n    return new TransformMutation(key, fieldTransforms);\n  } else if (proto.verify) {\n    const key = fromName(serializer, proto.verify);\n    return new VerifyMutation(key, precondition);\n  } else {\n    return fail('unknown mutation proto: ' + JSON.stringify(proto));\n  }\n}\n\nfunction toPrecondition(\n  serializer: JsonProtoSerializer,\n  precondition: Precondition\n): api.Precondition {\n  debugAssert(!precondition.isNone, \"Can't serialize an empty precondition\");\n  if (precondition.updateTime !== undefined) {\n    return {\n      updateTime: toVersion(serializer, precondition.updateTime)\n    };\n  } else if (precondition.exists !== undefined) {\n    return { exists: precondition.exists };\n  } else {\n    return fail('Unknown precondition');\n  }\n}\n\nfunction fromPrecondition(precondition: api.Precondition): Precondition {\n  if (precondition.updateTime !== undefined) {\n    return Precondition.updateTime(fromVersion(precondition.updateTime));\n  } else if (precondition.exists !== undefined) {\n    return Precondition.exists(precondition.exists);\n  } else {\n    return Precondition.none();\n  }\n}\n\nfunction fromWriteResult(\n  proto: WriteResult,\n  commitTime: api.Timestamp\n): MutationResult {\n  // NOTE: Deletes don't have an updateTime.\n  let version = proto.updateTime\n    ? fromVersion(proto.updateTime)\n    : fromVersion(commitTime);\n\n  if (version.isEqual(SnapshotVersion.min())) {\n    // The Firestore Emulator currently returns an update time of 0 for\n    // deletes of non-existing documents (rather than null). This breaks the\n    // test \"get deleted doc while offline with source=cache\" as NoDocuments\n    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n    // TODO(#2149): Remove this when Emulator is fixed\n    version = fromVersion(commitTime);\n  }\n\n  let transformResults: api.Value[] | null = null;\n  if (proto.transformResults && proto.transformResults.length > 0) {\n    transformResults = proto.transformResults;\n  }\n  return new MutationResult(version, transformResults);\n}\n\nexport function fromWriteResults(\n  protos: WriteResult[] | undefined,\n  commitTime?: api.Timestamp\n): MutationResult[] {\n  if (protos && protos.length > 0) {\n    hardAssert(\n      commitTime !== undefined,\n      'Received a write result without a commit time'\n    );\n    return protos.map(proto => fromWriteResult(proto, commitTime));\n  } else {\n    return [];\n  }\n}\n\nfunction toFieldTransform(\n  serializer: JsonProtoSerializer,\n  fieldTransform: FieldTransform\n): api.FieldTransform {\n  const transform = fieldTransform.transform;\n  if (transform instanceof ServerTimestampTransform) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      appendMissingElements: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      removeAllFromArray: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof NumericIncrementTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      increment: transform.operand\n    };\n  } else {\n    throw fail('Unknown transform: ' + fieldTransform.transform);\n  }\n}\n\nfunction fromFieldTransform(\n  serializer: JsonProtoSerializer,\n  proto: api.FieldTransform\n): FieldTransform {\n  let transform: TransformOperation | null = null;\n  if ('setToServerValue' in proto) {\n    hardAssert(\n      proto.setToServerValue === 'REQUEST_TIME',\n      'Unknown server value transform proto: ' + JSON.stringify(proto)\n    );\n    transform = ServerTimestampTransform.instance;\n  } else if ('appendMissingElements' in proto) {\n    const values = proto.appendMissingElements!.values || [];\n    transform = new ArrayUnionTransformOperation(values);\n  } else if ('removeAllFromArray' in proto) {\n    const values = proto.removeAllFromArray!.values || [];\n    transform = new ArrayRemoveTransformOperation(values);\n  } else if ('increment' in proto) {\n    transform = new NumericIncrementTransformOperation(\n      serializer,\n      proto.increment!\n    );\n  } else {\n    fail('Unknown transform proto: ' + JSON.stringify(proto));\n  }\n  const fieldPath = FieldPath.fromServerFormat(proto.fieldPath!);\n  return new FieldTransform(fieldPath, transform!);\n}\n\nexport function toDocumentsTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): api.DocumentsTarget {\n  return { documents: [toQueryPath(serializer, target.path)] };\n}\n\nexport function fromDocumentsTarget(\n  documentsTarget: api.DocumentsTarget\n): Target {\n  const count = documentsTarget.documents!.length;\n  hardAssert(\n    count === 1,\n    'DocumentsTarget contained other than 1 document: ' + count\n  );\n  const name = documentsTarget.documents![0];\n  return Query.atPath(fromQueryPath(name)).toTarget();\n}\n\nexport function toQueryTarget(\n  serializer: JsonProtoSerializer,\n  target: Target\n): api.QueryTarget {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const result: api.QueryTarget = { structuredQuery: {} };\n  const path = target.path;\n  if (target.collectionGroup !== null) {\n    debugAssert(\n      path.length % 2 === 0,\n      'Collection Group queries should be within a document path or root.'\n    );\n    result.parent = toQueryPath(serializer, path);\n    result.structuredQuery!.from = [\n      {\n        collectionId: target.collectionGroup,\n        allDescendants: true\n      }\n    ];\n  } else {\n    debugAssert(\n      path.length % 2 !== 0,\n      'Document queries with filters are not supported.'\n    );\n    result.parent = toQueryPath(serializer, path.popLast());\n    result.structuredQuery!.from = [{ collectionId: path.lastSegment() }];\n  }\n\n  const where = toFilter(target.filters);\n  if (where) {\n    result.structuredQuery!.where = where;\n  }\n\n  const orderBy = toOrder(target.orderBy);\n  if (orderBy) {\n    result.structuredQuery!.orderBy = orderBy;\n  }\n\n  const limit = toInt32Proto(serializer, target.limit);\n  if (limit !== null) {\n    result.structuredQuery!.limit = limit;\n  }\n\n  if (target.startAt) {\n    result.structuredQuery!.startAt = toCursor(target.startAt);\n  }\n  if (target.endAt) {\n    result.structuredQuery!.endAt = toCursor(target.endAt);\n  }\n\n  return result;\n}\n\nexport function fromQueryTarget(target: api.QueryTarget): Target {\n  let path = fromQueryPath(target.parent!);\n\n  const query = target.structuredQuery!;\n  const fromCount = query.from ? query.from.length : 0;\n  let collectionGroup: string | null = null;\n  if (fromCount > 0) {\n    hardAssert(\n      fromCount === 1,\n      'StructuredQuery.from with more than one collection is not supported.'\n    );\n    const from = query.from![0];\n    if (from.allDescendants) {\n      collectionGroup = from.collectionId!;\n    } else {\n      path = path.child(from.collectionId!);\n    }\n  }\n\n  let filterBy: Filter[] = [];\n  if (query.where) {\n    filterBy = fromFilter(query.where);\n  }\n\n  let orderBy: OrderBy[] = [];\n  if (query.orderBy) {\n    orderBy = fromOrder(query.orderBy);\n  }\n\n  let limit: number | null = null;\n  if (query.limit) {\n    limit = fromInt32Proto(query.limit);\n  }\n\n  let startAt: Bound | null = null;\n  if (query.startAt) {\n    startAt = fromCursor(query.startAt);\n  }\n\n  let endAt: Bound | null = null;\n  if (query.endAt) {\n    endAt = fromCursor(query.endAt);\n  }\n\n  return new Query(\n    path,\n    collectionGroup,\n    orderBy,\n    filterBy,\n    limit,\n    LimitType.First,\n    startAt,\n    endAt\n  ).toTarget();\n}\n\nexport function toListenRequestLabels(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): api.ApiClientObjectMap<string> | null {\n  const value = toLabel(serializer, targetData.purpose);\n  if (value == null) {\n    return null;\n  } else {\n    return {\n      'goog-listen-tags': value\n    };\n  }\n}\n\nfunction toLabel(\n  serializer: JsonProtoSerializer,\n  purpose: TargetPurpose\n): string | null {\n  switch (purpose) {\n    case TargetPurpose.Listen:\n      return null;\n    case TargetPurpose.ExistenceFilterMismatch:\n      return 'existence-filter-mismatch';\n    case TargetPurpose.LimboResolution:\n      return 'limbo-document';\n    default:\n      return fail('Unrecognized query purpose: ' + purpose);\n  }\n}\n\nexport function toTarget(\n  serializer: JsonProtoSerializer,\n  targetData: TargetData\n): api.Target {\n  let result: api.Target;\n  const target = targetData.target;\n\n  if (isDocumentTarget(target)) {\n    result = { documents: toDocumentsTarget(serializer, target) };\n  } else {\n    result = { query: toQueryTarget(serializer, target) };\n  }\n\n  result.targetId = targetData.targetId;\n\n  if (targetData.resumeToken.approximateByteSize() > 0) {\n    result.resumeToken = toBytes(serializer, targetData.resumeToken);\n  }\n\n  return result;\n}\n\nfunction toFilter(filters: Filter[]): api.Filter | undefined {\n  if (filters.length === 0) {\n    return;\n  }\n  const protos = filters.map(filter => {\n    if (filter instanceof FieldFilter) {\n      return toUnaryOrFieldFilter(filter);\n    } else {\n      return fail('Unrecognized filter: ' + JSON.stringify(filter));\n    }\n  });\n  if (protos.length === 1) {\n    return protos[0];\n  }\n  return { compositeFilter: { op: 'AND', filters: protos } };\n}\n\nfunction fromFilter(filter: api.Filter | undefined): Filter[] {\n  if (!filter) {\n    return [];\n  } else if (filter.unaryFilter !== undefined) {\n    return [fromUnaryFilter(filter)];\n  } else if (filter.fieldFilter !== undefined) {\n    return [fromFieldFilter(filter)];\n  } else if (filter.compositeFilter !== undefined) {\n    return filter.compositeFilter\n      .filters!.map(f => fromFilter(f))\n      .reduce((accum, current) => accum.concat(current));\n  } else {\n    return fail('Unknown filter: ' + JSON.stringify(filter));\n  }\n}\n\nfunction toOrder(orderBys: OrderBy[]): api.Order[] | undefined {\n  if (orderBys.length === 0) {\n    return;\n  }\n  return orderBys.map(order => toPropertyOrder(order));\n}\n\nfunction fromOrder(orderBys: api.Order[]): OrderBy[] {\n  return orderBys.map(order => fromPropertyOrder(order));\n}\n\nfunction toCursor(cursor: Bound): api.Cursor {\n  return {\n    before: cursor.before,\n    values: cursor.position\n  };\n}\n\nfunction fromCursor(cursor: api.Cursor): Bound {\n  const before = !!cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, before);\n}\n\n// visible for testing\nexport function toDirection(dir: Direction): api.OrderDirection {\n  return DIRECTIONS[dir];\n}\n\n// visible for testing\nexport function fromDirection(\n  dir: api.OrderDirection | undefined\n): Direction | undefined {\n  switch (dir) {\n    case 'ASCENDING':\n      return Direction.ASCENDING;\n    case 'DESCENDING':\n      return Direction.DESCENDING;\n    default:\n      return undefined;\n  }\n}\n\n// visible for testing\nexport function toOperatorName(op: Operator): api.FieldFilterOp {\n  return OPERATORS[op];\n}\n\nexport function fromOperatorName(op: api.FieldFilterOp): Operator {\n  switch (op) {\n    case 'EQUAL':\n      return Operator.EQUAL;\n    case 'GREATER_THAN':\n      return Operator.GREATER_THAN;\n    case 'GREATER_THAN_OR_EQUAL':\n      return Operator.GREATER_THAN_OR_EQUAL;\n    case 'LESS_THAN':\n      return Operator.LESS_THAN;\n    case 'LESS_THAN_OR_EQUAL':\n      return Operator.LESS_THAN_OR_EQUAL;\n    case 'ARRAY_CONTAINS':\n      return Operator.ARRAY_CONTAINS;\n    case 'IN':\n      return Operator.IN;\n    case 'ARRAY_CONTAINS_ANY':\n      return Operator.ARRAY_CONTAINS_ANY;\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified operator');\n    default:\n      return fail('Unknown operator');\n  }\n}\n\nexport function toFieldPathReference(path: FieldPath): api.FieldReference {\n  return { fieldPath: path.canonicalString() };\n}\n\nexport function fromFieldPathReference(\n  fieldReference: api.FieldReference\n): FieldPath {\n  return FieldPath.fromServerFormat(fieldReference.fieldPath!);\n}\n\n// visible for testing\nexport function toPropertyOrder(orderBy: OrderBy): api.Order {\n  return {\n    field: toFieldPathReference(orderBy.field),\n    direction: toDirection(orderBy.dir)\n  };\n}\n\nexport function fromPropertyOrder(orderBy: api.Order): OrderBy {\n  return new OrderBy(\n    fromFieldPathReference(orderBy.field!),\n    fromDirection(orderBy.direction)\n  );\n}\n\nexport function fromFieldFilter(filter: api.Filter): Filter {\n  return FieldFilter.create(\n    fromFieldPathReference(filter.fieldFilter!.field!),\n    fromOperatorName(filter.fieldFilter!.op!),\n    filter.fieldFilter!.value!\n  );\n}\n\n// visible for testing\nexport function toUnaryOrFieldFilter(filter: FieldFilter): api.Filter {\n  if (filter.op === Operator.EQUAL) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NULL'\n        }\n      };\n    }\n  }\n  return {\n    fieldFilter: {\n      field: toFieldPathReference(filter.field),\n      op: toOperatorName(filter.op),\n      value: filter.value\n    }\n  };\n}\n\nexport function fromUnaryFilter(filter: api.Filter): Filter {\n  switch (filter.unaryFilter!.op!) {\n    case 'IS_NAN':\n      const nanField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nanField, Operator.EQUAL, {\n        doubleValue: NaN\n      });\n    case 'IS_NULL':\n      const nullField = fromFieldPathReference(filter.unaryFilter!.field!);\n      return FieldFilter.create(nullField, Operator.EQUAL, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'OPERATOR_UNSPECIFIED':\n      return fail('Unspecified filter');\n    default:\n      return fail('Unknown filter');\n  }\n}\n\nexport function toDocumentMask(fieldMask: FieldMask): api.DocumentMask {\n  const canonicalFields: string[] = [];\n  fieldMask.fields.forEach(field =>\n    canonicalFields.push(field.canonicalString())\n  );\n  return {\n    fieldPaths: canonicalFields\n  };\n}\n\nexport function fromDocumentMask(proto: api.DocumentMask): FieldMask {\n  const paths = proto.fieldPaths || [];\n  return new FieldMask(paths.map(path => FieldPath.fromServerFormat(path)));\n}\n\nexport function isValidResourceName(path: ResourcePath): boolean {\n  // Resource names have at least 4 components (project ID, database ID)\n  return (\n    path.length >= 4 &&\n    path.get(0) === 'projects' &&\n    path.get(2) === 'databases'\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { debugAssert } from '../util/assert';\nimport { JsonProtoSerializer, toDouble, toInteger } from '../remote/serializer';\nimport {\n  isArray,\n  isInteger,\n  isNumber,\n  normalizeNumber,\n  valueEquals\n} from './values';\nimport { serverTimestamp } from './server_timestamps';\nimport { arrayEquals } from '../util/misc';\n\n/** Represents a transform within a TransformMutation. */\nexport interface TransformOperation {\n  /**\n   * Computes the local transform result against the provided `previousValue`,\n   * optionally using the provided localWriteTime.\n   */\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value;\n\n  /**\n   * Computes a final transform result after the transform has been acknowledged\n   * by the server, potentially using the server-provided transformResult.\n   */\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value;\n\n  /**\n   * If this transform operation is not idempotent, returns the base value to\n   * persist for this transform. If a base value is returned, the transform\n   * operation is always applied to this base value, even if document has\n   * already been updated.\n   *\n   * Base values provide consistent behavior for non-idempotent transforms and\n   * allow us to return the same latency-compensated value even if the backend\n   * has already applied the transform operation. The base value is null for\n   * idempotent transforms, as they can be re-played even if the backend has\n   * already applied them.\n   *\n   * @return a base value to store along with the mutation, or null for\n   * idempotent transforms.\n   */\n  computeBaseValue(previousValue: api.Value | null): api.Value | null;\n\n  isEqual(other: TransformOperation): boolean;\n}\n\n/** Transforms a value into a server-generated timestamp. */\nexport class ServerTimestampTransform implements TransformOperation {\n  private constructor() {}\n  static instance = new ServerTimestampTransform();\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return serverTimestamp(localWriteTime!, previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    return transformResult!;\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Server timestamps are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return other instanceof ServerTimestampTransform;\n  }\n}\n\n/** Transforms an array value via a union operation. */\nexport class ArrayUnionTransformOperation implements TransformOperation {\n  constructor(readonly elements: api.Value[]) {}\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return this.apply(previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    // The server just sends null as the transform result for array operations,\n    // so we have to calculate a result the same as we do for local\n    // applications.\n    return this.apply(previousValue);\n  }\n\n  private apply(previousValue: api.Value | null): api.Value {\n    const values = coercedFieldValuesArray(previousValue);\n    for (const toUnion of this.elements) {\n      if (!values.some(element => valueEquals(element, toUnion))) {\n        values.push(toUnion);\n      }\n    }\n    return { arrayValue: { values } };\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Array transforms are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof ArrayUnionTransformOperation &&\n      arrayEquals(this.elements, other.elements, valueEquals)\n    );\n  }\n}\n\n/** Transforms an array value via a remove operation. */\nexport class ArrayRemoveTransformOperation implements TransformOperation {\n  constructor(readonly elements: api.Value[]) {}\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    return this.apply(previousValue);\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    // The server just sends null as the transform result for array operations,\n    // so we have to calculate a result the same as we do for local\n    // applications.\n    return this.apply(previousValue);\n  }\n\n  private apply(previousValue: api.Value | null): api.Value {\n    let values = coercedFieldValuesArray(previousValue);\n    for (const toRemove of this.elements) {\n      values = values.filter(element => !valueEquals(element, toRemove));\n    }\n    return { arrayValue: { values } };\n  }\n\n  computeBaseValue(previousValue: api.Value | null): api.Value | null {\n    return null; // Array transforms are idempotent and don't require a base value.\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof ArrayRemoveTransformOperation &&\n      arrayEquals(this.elements, other.elements, valueEquals)\n    );\n  }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nexport class NumericIncrementTransformOperation implements TransformOperation {\n  constructor(\n    private readonly serializer: JsonProtoSerializer,\n    readonly operand: api.Value\n  ) {\n    debugAssert(\n      isNumber(operand),\n      'NumericIncrementTransform transform requires a NumberValue'\n    );\n  }\n\n  applyToLocalView(\n    previousValue: api.Value | null,\n    localWriteTime: Timestamp\n  ): api.Value {\n    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n    // precision and resolves overflows by reducing precision, we do not\n    // manually cap overflows at 2^63.\n    const baseValue = this.computeBaseValue(previousValue);\n    const sum = this.asNumber(baseValue) + this.asNumber(this.operand);\n    if (isInteger(baseValue) && isInteger(this.operand)) {\n      return toInteger(sum);\n    } else {\n      return toDouble(this.serializer, sum);\n    }\n  }\n\n  applyToRemoteDocument(\n    previousValue: api.Value | null,\n    transformResult: api.Value | null\n  ): api.Value {\n    debugAssert(\n      transformResult !== null,\n      \"Didn't receive transformResult for NUMERIC_ADD transform\"\n    );\n    return transformResult;\n  }\n\n  /**\n   * Inspects the provided value, returning the provided value if it is already\n   * a NumberValue, otherwise returning a coerced value of 0.\n   */\n  computeBaseValue(previousValue: api.Value | null): api.Value {\n    return isNumber(previousValue) ? previousValue! : { integerValue: 0 };\n  }\n\n  isEqual(other: TransformOperation): boolean {\n    return (\n      other instanceof NumericIncrementTransformOperation &&\n      valueEquals(this.operand, other.operand)\n    );\n  }\n\n  private asNumber(value: api.Value): number {\n    return normalizeNumber(value.integerValue || value.doubleValue);\n  }\n}\n\nfunction coercedFieldValuesArray(value: api.Value | null): api.Value[] {\n  return isArray(value) && value.arrayValue.values\n    ? value.arrayValue.values.slice()\n    : [];\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\n\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from './document';\nimport { DocumentKey } from './document_key';\nimport { ObjectValue, ObjectValueBuilder } from './object_value';\nimport { FieldPath } from './path';\nimport { TransformOperation } from './transform_operation';\nimport { arrayEquals } from '../util/misc';\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nexport class FieldMask {\n  constructor(readonly fields: FieldPath[]) {\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    fields.sort(FieldPath.comparator);\n    debugAssert(\n      !fields.some((v, i) => i !== 0 && v.isEqual(fields[i - 1])),\n      'FieldMask contains field that is not unique: ' +\n        fields.find((v, i) => i !== 0 && v.isEqual(fields[i - 1]))!\n    );\n  }\n\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath: FieldPath): boolean {\n    for (const fieldMaskPath of this.fields) {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isEqual(other: FieldMask): boolean {\n    return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\n  }\n}\n\n/** A field path and the TransformOperation to perform upon it. */\nexport class FieldTransform {\n  constructor(\n    readonly field: FieldPath,\n    readonly transform: TransformOperation\n  ) {}\n\n  isEqual(other: FieldTransform): boolean {\n    return (\n      this.field.isEqual(other.field) && this.transform.isEqual(other.transform)\n    );\n  }\n}\n\n/** The result of successfully applying a mutation to the backend. */\nexport class MutationResult {\n  constructor(\n    /**\n     * The version at which the mutation was committed:\n     *\n     * - For most operations, this is the updateTime in the WriteResult.\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\n     *   not stored and have no updateTime).\n     *\n     * Note that these versions can be different: No-op writes will not change\n     * the updateTime even though the commitTime advances.\n     */\n    readonly version: SnapshotVersion,\n    /**\n     * The resulting fields returned from the backend after a\n     * TransformMutation has been committed. Contains one FieldValue for each\n     * FieldTransform that was in the mutation.\n     *\n     * Will be null if the mutation was not a TransformMutation.\n     */\n    readonly transformResults: Array<api.Value | null> | null\n  ) {}\n}\n\nexport const enum MutationType {\n  Set,\n  Patch,\n  Transform,\n  Delete,\n  Verify\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nexport class Precondition {\n  private constructor(\n    readonly updateTime?: SnapshotVersion,\n    readonly exists?: boolean\n  ) {\n    debugAssert(\n      updateTime === undefined || exists === undefined,\n      'Precondition can specify \"exists\" or \"updateTime\" but not both'\n    );\n  }\n\n  /** Creates a new empty Precondition. */\n  static none(): Precondition {\n    return new Precondition();\n  }\n\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists: boolean): Precondition {\n    return new Precondition(undefined, exists);\n  }\n\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version: SnapshotVersion): Precondition {\n    return new Precondition(version);\n  }\n\n  /** Returns whether this Precondition is empty. */\n  get isNone(): boolean {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n\n  /**\n   * Returns true if the preconditions is valid for the given document\n   * (or null if no document is available).\n   */\n  isValidFor(maybeDoc: MaybeDocument | null): boolean {\n    if (this.updateTime !== undefined) {\n      return (\n        maybeDoc instanceof Document &&\n        maybeDoc.version.isEqual(this.updateTime)\n      );\n    } else if (this.exists !== undefined) {\n      return this.exists === maybeDoc instanceof Document;\n    } else {\n      debugAssert(this.isNone, 'Precondition should be empty');\n      return true;\n    }\n  }\n\n  isEqual(other: Precondition): boolean {\n    return (\n      this.exists === other.exists &&\n      (this.updateTime\n        ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\n        : !other.updateTime)\n    );\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set, Patch, and Transform mutations. For Delete\n * mutations, we reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        null                  Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      null                  null\n * TransformMutation  Document(v3)          Document(v3)\n * TransformMutation  NoDocument(v3)        NoDocument(v3)\n * TransformMutation  null                  null\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     null                  NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set, Patch, and Transform mutations. As deletes\n * have no explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we return an `UnknownDocument` and rely on Watch to send us the\n * updated version.\n *\n * Note that TransformMutations don't create Documents (in the case of being\n * applied to a NoDocument), even though they would on the backend. This is\n * because the client always combines the TransformMutation with a SetMutation\n * or PatchMutation and we only want to apply the transform if the prior\n * mutation resulted in a Document (always true for a SetMutation, but not\n * necessarily for a PatchMutation).\n *\n * ## Subclassing Notes\n *\n * Subclasses of Mutation need to implement applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document.\n */\nexport abstract class Mutation {\n  abstract readonly type: MutationType;\n  abstract readonly key: DocumentKey;\n  abstract readonly precondition: Precondition;\n\n  /**\n   * Applies this mutation to the given MaybeDocument or null for the purposes\n   * of computing a new remote document. If the input document doesn't match the\n   * expected state (e.g. it is null or outdated), an `UnknownDocument` can be\n   * returned.\n   *\n   * @param maybeDoc The document to mutate. The input document can be null if\n   *     the client has no knowledge of the pre-mutation state of the document.\n   * @param mutationResult The result of applying the mutation from the backend.\n   * @return The mutated document. The returned document may be an\n   *     UnknownDocument if the mutation could not be applied to the locally\n   *     cached base document.\n   */\n  abstract applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument;\n\n  /**\n   * Applies this mutation to the given MaybeDocument or null for the purposes\n   * of computing the new local view of a document. Both the input and returned\n   * documents can be null.\n   *\n   * @param maybeDoc The document to mutate. The input document can be null if\n   *     the client has no knowledge of the pre-mutation state of the document.\n   * @param baseDoc The state of the document prior to this mutation batch. The\n   *     input document can be null if the client has no knowledge of the\n   *     pre-mutation state of the document.\n   * @param localWriteTime A timestamp indicating the local write time of the\n   *     batch this mutation is a part of.\n   * @return The mutated document. The returned document may be null, but only\n   *     if maybeDoc was null and the mutation would not create a new document.\n   */\n  abstract applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null;\n\n  /**\n   * If this mutation is not idempotent, returns the base value to persist with\n   * this mutation. If a base value is returned, the mutation is always applied\n   * to this base value, even if document has already been updated.\n   *\n   * The base value is a sparse object that consists of only the document\n   * fields for which this mutation contains a non-idempotent transformation\n   * (e.g. a numeric increment). The provided value guarantees consistent\n   * behavior for non-idempotent transforms and allow us to return the same\n   * latency-compensated value even if the backend has already applied the\n   * mutation. The base value is null for idempotent mutations, as they can be\n   * re-played even if the backend has already applied them.\n   *\n   * @return a base value to store along with the mutation, or null for\n   * idempotent mutations.\n   */\n  abstract extractBaseValue(maybeDoc: MaybeDocument | null): ObjectValue | null;\n\n  abstract isEqual(other: Mutation): boolean;\n\n  protected verifyKeyMatches(maybeDoc: MaybeDocument | null): void {\n    if (maybeDoc != null) {\n      debugAssert(\n        maybeDoc.key.isEqual(this.key),\n        'Can only apply a mutation to a document with the same key'\n      );\n    }\n  }\n\n  /**\n   * Returns the version from the given document for use as the result of a\n   * mutation. Mutations are defined to return the version of the base document\n   * only if it is an existing document. Deleted and unknown documents have a\n   * post-mutation version of SnapshotVersion.min().\n   */\n  protected static getPostMutationVersion(\n    maybeDoc: MaybeDocument | null\n  ): SnapshotVersion {\n    if (maybeDoc instanceof Document) {\n      return maybeDoc.version;\n    } else {\n      return SnapshotVersion.min();\n    }\n  }\n}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nexport class SetMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly value: ObjectValue,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Set;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by SetMutation.'\n    );\n\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\n    // document the server has accepted the mutation so the precondition must\n    // have held.\n\n    const version = mutationResult.version;\n    return new Document(this.key, version, this.value, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const version = Mutation.getPostMutationVersion(maybeDoc);\n    return new Document(this.key, version, this.value, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof SetMutation &&\n      this.key.isEqual(other.key) &&\n      this.value.isEqual(other.value) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nexport class PatchMutation extends Mutation {\n  constructor(\n    readonly key: DocumentKey,\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly precondition: Precondition\n  ) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Patch;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by PatchMutation.'\n    );\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      // Since the mutation was not rejected, we know that the  precondition\n      // matched on the backend. We therefore must not have the expected version\n      // of the document in our cache and return an UnknownDocument with the\n      // known updateTime.\n      return new UnknownDocument(this.key, mutationResult.version);\n    }\n\n    const newData = this.patchDocument(maybeDoc);\n    return new Document(this.key, mutationResult.version, newData, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const version = Mutation.getPostMutationVersion(maybeDoc);\n    const newData = this.patchDocument(maybeDoc);\n    return new Document(this.key, version, newData, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof PatchMutation &&\n      this.key.isEqual(other.key) &&\n      this.fieldMask.isEqual(other.fieldMask) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n\n  /**\n   * Patches the data of document if available or creates a new document. Note\n   * that this does not check whether or not the precondition of this patch\n   * holds.\n   */\n  private patchDocument(maybeDoc: MaybeDocument | null): ObjectValue {\n    let data: ObjectValue;\n    if (maybeDoc instanceof Document) {\n      data = maybeDoc.data();\n    } else {\n      data = ObjectValue.empty();\n    }\n    return this.patchObject(data);\n  }\n\n  private patchObject(data: ObjectValue): ObjectValue {\n    const builder = new ObjectValueBuilder(data);\n    this.fieldMask.fields.forEach(fieldPath => {\n      if (!fieldPath.isEmpty()) {\n        const newValue = this.data.field(fieldPath);\n        if (newValue !== null) {\n          builder.set(fieldPath, newValue);\n        } else {\n          builder.delete(fieldPath);\n        }\n      }\n    });\n    return builder.build();\n  }\n}\n\n/**\n * A mutation that modifies specific fields of the document with transform\n * operations. Currently the only supported transform is a server timestamp, but\n * IP Address, increment(n), etc. could be supported in the future.\n *\n * It is somewhat similar to a PatchMutation in that it patches specific fields\n * and has no effect when applied to a null or NoDocument (see comment on\n * Mutation for rationale).\n */\nexport class TransformMutation extends Mutation {\n  readonly type: MutationType = MutationType.Transform;\n\n  // NOTE: We set a precondition of exists: true as a safety-check, since we\n  // always combine TransformMutations with a SetMutation or PatchMutation which\n  // (if successful) should end up with an existing document.\n  readonly precondition = Precondition.exists(true);\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly fieldTransforms: FieldTransform[]\n  ) {\n    super();\n  }\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    hardAssert(\n      mutationResult.transformResults != null,\n      'Transform results missing for TransformMutation.'\n    );\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      // Since the mutation was not rejected, we know that the  precondition\n      // matched on the backend. We therefore must not have the expected version\n      // of the document in our cache and return an UnknownDocument with the\n      // known updateTime.\n      return new UnknownDocument(this.key, mutationResult.version);\n    }\n\n    const doc = this.requireDocument(maybeDoc);\n    const transformResults = this.serverTransformResults(\n      maybeDoc,\n      mutationResult.transformResults!\n    );\n\n    const version = mutationResult.version;\n    const newData = this.transformObject(doc.data(), transformResults);\n    return new Document(this.key, version, newData, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    const doc = this.requireDocument(maybeDoc);\n    const transformResults = this.localTransformResults(\n      localWriteTime,\n      maybeDoc,\n      baseDoc\n    );\n    const newData = this.transformObject(doc.data(), transformResults);\n    return new Document(this.key, doc.version, newData, {\n      hasLocalMutations: true\n    });\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): ObjectValue | null {\n    let baseObject: ObjectValueBuilder | null = null;\n    for (const fieldTransform of this.fieldTransforms) {\n      const existingValue =\n        maybeDoc instanceof Document\n          ? maybeDoc.field(fieldTransform.field)\n          : undefined;\n      const coercedValue = fieldTransform.transform.computeBaseValue(\n        existingValue || null\n      );\n\n      if (coercedValue != null) {\n        if (baseObject == null) {\n          baseObject = new ObjectValueBuilder().set(\n            fieldTransform.field,\n            coercedValue\n          );\n        } else {\n          baseObject = baseObject.set(fieldTransform.field, coercedValue);\n        }\n      }\n    }\n    return baseObject ? baseObject.build() : null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof TransformMutation &&\n      this.key.isEqual(other.key) &&\n      arrayEquals(this.fieldTransforms, other.fieldTransforms, (l, r) =>\n        l.isEqual(r)\n      ) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n\n  /**\n   * Asserts that the given MaybeDocument is actually a Document and verifies\n   * that it matches the key for this mutation. Since we only support\n   * transformations with precondition exists this method is guaranteed to be\n   * safe.\n   */\n  private requireDocument(maybeDoc: MaybeDocument | null): Document {\n    debugAssert(\n      maybeDoc instanceof Document,\n      'Unknown MaybeDocument type ' + maybeDoc\n    );\n    debugAssert(\n      maybeDoc.key.isEqual(this.key),\n      'Can only transform a document with the same key'\n    );\n    return maybeDoc;\n  }\n\n  /**\n   * Creates a list of \"transform results\" (a transform result is a field value\n   * representing the result of applying a transform) for use after a\n   * TransformMutation has been acknowledged by the server.\n   *\n   * @param baseDoc The document prior to applying this mutation batch.\n   * @param serverTransformResults The transform results received by the server.\n   * @return The transform results list.\n   */\n  private serverTransformResults(\n    baseDoc: MaybeDocument | null,\n    serverTransformResults: Array<api.Value | null>\n  ): api.Value[] {\n    const transformResults: api.Value[] = [];\n    hardAssert(\n      this.fieldTransforms.length === serverTransformResults.length,\n      `server transform result count (${serverTransformResults.length}) ` +\n        `should match field transform count (${this.fieldTransforms.length})`\n    );\n\n    for (let i = 0; i < serverTransformResults.length; i++) {\n      const fieldTransform = this.fieldTransforms[i];\n      const transform = fieldTransform.transform;\n      let previousValue: api.Value | null = null;\n      if (baseDoc instanceof Document) {\n        previousValue = baseDoc.field(fieldTransform.field);\n      }\n      transformResults.push(\n        transform.applyToRemoteDocument(\n          previousValue,\n          serverTransformResults[i]\n        )\n      );\n    }\n    return transformResults;\n  }\n\n  /**\n   * Creates a list of \"transform results\" (a transform result is a field value\n   * representing the result of applying a transform) for use when applying a\n   * TransformMutation locally.\n   *\n   * @param localWriteTime The local time of the transform mutation (used to\n   *     generate ServerTimestampValues).\n   * @param maybeDoc The current state of the document after applying all\n   *     previous mutations.\n   * @param baseDoc The document prior to applying this mutation batch.\n   * @return The transform results list.\n   */\n  private localTransformResults(\n    localWriteTime: Timestamp,\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null\n  ): api.Value[] {\n    const transformResults: api.Value[] = [];\n    for (const fieldTransform of this.fieldTransforms) {\n      const transform = fieldTransform.transform;\n\n      let previousValue: api.Value | null = null;\n      if (maybeDoc instanceof Document) {\n        previousValue = maybeDoc.field(fieldTransform.field);\n      }\n\n      if (previousValue === null && baseDoc instanceof Document) {\n        // If the current document does not contain a value for the mutated\n        // field, use the value that existed before applying this mutation\n        // batch. This solves an edge case where a PatchMutation clears the\n        // values in a nested map before the TransformMutation is applied.\n        previousValue = baseDoc.field(fieldTransform.field);\n      }\n\n      transformResults.push(\n        transform.applyToLocalView(previousValue, localWriteTime)\n      );\n    }\n    return transformResults;\n  }\n\n  private transformObject(\n    data: ObjectValue,\n    transformResults: api.Value[]\n  ): ObjectValue {\n    debugAssert(\n      transformResults.length === this.fieldTransforms.length,\n      'TransformResults length mismatch.'\n    );\n\n    const builder = new ObjectValueBuilder(data);\n    for (let i = 0; i < this.fieldTransforms.length; i++) {\n      const fieldTransform = this.fieldTransforms[i];\n      const fieldPath = fieldTransform.field;\n      builder.set(fieldPath, transformResults[i]);\n    }\n    return builder.build();\n  }\n}\n\n/** A mutation that deletes the document at the given key. */\nexport class DeleteMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Delete;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    this.verifyKeyMatches(maybeDoc);\n\n    debugAssert(\n      mutationResult.transformResults == null,\n      'Transform results received by DeleteMutation.'\n    );\n\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\n    // document the server has accepted the mutation so the precondition must\n    // have held.\n\n    return new NoDocument(this.key, mutationResult.version, {\n      hasCommittedMutations: true\n    });\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    this.verifyKeyMatches(maybeDoc);\n\n    if (!this.precondition.isValidFor(maybeDoc)) {\n      return maybeDoc;\n    }\n\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(this.key),\n        'Can only apply mutation to document with same key'\n      );\n    }\n    return new NoDocument(this.key, SnapshotVersion.min());\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    return null;\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof DeleteMutation &&\n      this.key.isEqual(other.key) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nexport class VerifyMutation extends Mutation {\n  constructor(readonly key: DocumentKey, readonly precondition: Precondition) {\n    super();\n  }\n\n  readonly type: MutationType = MutationType.Verify;\n\n  applyToRemoteDocument(\n    maybeDoc: MaybeDocument | null,\n    mutationResult: MutationResult\n  ): MaybeDocument {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  applyToLocalView(\n    maybeDoc: MaybeDocument | null,\n    baseDoc: MaybeDocument | null,\n    localWriteTime: Timestamp\n  ): MaybeDocument | null {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  extractBaseValue(maybeDoc: MaybeDocument | null): null {\n    fail('VerifyMutation should only be used in Transactions.');\n  }\n\n  isEqual(other: Mutation): boolean {\n    return (\n      other instanceof VerifyMutation &&\n      this.key.isEqual(other.key) &&\n      this.precondition.isEqual(other.precondition)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { debugAssert } from '../util/assert';\nimport { FieldMask } from './mutation';\nimport { FieldPath } from './path';\nimport { isServerTimestamp } from './server_timestamps';\nimport { valueEquals, isMapValue, typeOrder } from './values';\nimport { forEach } from '../util/obj';\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport const enum TypeOrder {\n  // This order is based on the backend's ordering, but modified to support\n  // server timestamps.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  ServerTimestampValue = 4,\n  StringValue = 5,\n  BlobValue = 6,\n  RefValue = 7,\n  GeoPointValue = 8,\n  ArrayValue = 9,\n  ObjectValue = 10\n}\n\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nexport class ObjectValue {\n  constructor(readonly proto: { mapValue: api.MapValue }) {\n    debugAssert(\n      !isServerTimestamp(proto),\n      'ServerTimestamps should be converted to ServerTimestampValue'\n    );\n  }\n\n  static empty(): ObjectValue {\n    return new ObjectValue({ mapValue: {} });\n  }\n\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path the path to search\n   * @return The value at the path or if there it doesn't exist.\n   */\n  field(path: FieldPath): api.Value | null {\n    if (path.isEmpty()) {\n      return this.proto;\n    } else {\n      let value: api.Value = this.proto;\n      for (let i = 0; i < path.length - 1; ++i) {\n        if (!value.mapValue!.fields) {\n          return null;\n        }\n        value = value.mapValue!.fields[path.get(i)];\n        if (!isMapValue(value)) {\n          return null;\n        }\n      }\n\n      value = (value.mapValue!.fields || {})[path.lastSegment()];\n      return value || null;\n    }\n  }\n\n  isEqual(other: ObjectValue): boolean {\n    return valueEquals(this.proto, other.proto);\n  }\n}\n\n/**\n * An Overlay, which contains an update to apply. Can either be Value proto, a\n * map of Overlay values (to represent additional nesting at the given key) or\n * `null` (to represent field deletes).\n */\ntype Overlay = Map<string, Overlay> | api.Value | null;\n\n/**\n * An ObjectValueBuilder provides APIs to set and delete fields from an\n * ObjectValue.\n */\nexport class ObjectValueBuilder {\n  /** A map that contains the accumulated changes in this builder. */\n  private overlayMap = new Map<string, Overlay>();\n\n  /**\n   * @param baseObject The object to mutate.\n   */\n  constructor(private readonly baseObject: ObjectValue = ObjectValue.empty()) {}\n\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path The field path to set.\n   * @param value The value to set.\n   * @return The current Builder instance.\n   */\n  set(path: FieldPath, value: api.Value): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot set field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, value);\n    return this;\n  }\n\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path The field path to remove.\n   * @return The current Builder instance.\n   */\n  delete(path: FieldPath): ObjectValueBuilder {\n    debugAssert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    this.setOverlay(path, null);\n    return this;\n  }\n\n  /**\n   * Adds `value` to the overlay map at `path`. Creates nested map entries if\n   * needed.\n   */\n  private setOverlay(path: FieldPath, value: api.Value | null): void {\n    let currentLevel = this.overlayMap;\n\n    for (let i = 0; i < path.length - 1; ++i) {\n      const currentSegment = path.get(i);\n      let currentValue = currentLevel.get(currentSegment);\n\n      if (currentValue instanceof Map) {\n        // Re-use a previously created map\n        currentLevel = currentValue;\n      } else if (\n        currentValue &&\n        typeOrder(currentValue) === TypeOrder.ObjectValue\n      ) {\n        // Convert the existing Protobuf MapValue into a map\n        currentValue = new Map<string, Overlay>(\n          Object.entries(currentValue.mapValue!.fields || {})\n        );\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      } else {\n        // Create an empty map to represent the current nesting level\n        currentValue = new Map<string, Overlay>();\n        currentLevel.set(currentSegment, currentValue);\n        currentLevel = currentValue;\n      }\n    }\n\n    currentLevel.set(path.lastSegment(), value);\n  }\n\n  /** Returns an ObjectValue with all mutations applied. */\n  build(): ObjectValue {\n    const mergedResult = this.applyOverlay(\n      FieldPath.EMPTY_PATH,\n      this.overlayMap\n    );\n    if (mergedResult != null) {\n      return new ObjectValue(mergedResult);\n    } else {\n      return this.baseObject;\n    }\n  }\n\n  /**\n   * Applies any overlays from `currentOverlays` that exist at `currentPath`\n   * and returns the merged data at `currentPath` (or null if there were no\n   * changes).\n   *\n   * @param currentPath The path at the current nesting level. Can be set to\n   * FieldValue.EMPTY_PATH to represent the root.\n   * @param currentOverlays The overlays at the current nesting level in the\n   * same format as `overlayMap`.\n   * @return The merged data at `currentPath` or null if no modifications\n   * were applied.\n   */\n  private applyOverlay(\n    currentPath: FieldPath,\n    currentOverlays: Map<string, Overlay>\n  ): { mapValue: api.MapValue } | null {\n    let modified = false;\n\n    const existingValue = this.baseObject.field(currentPath);\n    const resultAtPath = isMapValue(existingValue)\n      ? // If there is already data at the current path, base our\n        // modifications on top of the existing data.\n        { ...existingValue.mapValue.fields }\n      : {};\n\n    currentOverlays.forEach((value, pathSegment) => {\n      if (value instanceof Map) {\n        const nested = this.applyOverlay(currentPath.child(pathSegment), value);\n        if (nested != null) {\n          resultAtPath[pathSegment] = nested;\n          modified = true;\n        }\n      } else if (value !== null) {\n        resultAtPath[pathSegment] = value;\n        modified = true;\n      } else if (resultAtPath.hasOwnProperty(pathSegment)) {\n        delete resultAtPath[pathSegment];\n        modified = true;\n      }\n    });\n\n    return modified ? { mapValue: { fields: resultAtPath } } : null;\n  }\n}\n\n/**\n * Returns a FieldMask built from all fields in a MapValue.\n */\nexport function extractFieldMask(value: api.MapValue): FieldMask {\n  const fields: FieldPath[] = [];\n  forEach(value!.fields || {}, (key, value) => {\n    const currentPath = new FieldPath([key]);\n    if (isMapValue(value)) {\n      const nestedMask = extractFieldMask(value.mapValue!);\n      const nestedFields = nestedMask.fields;\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (const nestedPath of nestedFields) {\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\n\nimport { DocumentKey } from './document_key';\nimport { ObjectValue } from './object_value';\nimport { FieldPath } from './path';\nimport { valueCompare } from './values';\n\nexport interface DocumentOptions {\n  hasLocalMutations?: boolean;\n  hasCommittedMutations?: boolean;\n}\n\n/**\n * The result of a lookup for a given path may be an existing document or a\n * marker that this document does not exist at a given version.\n */\nexport abstract class MaybeDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  /**\n   * Whether this document had a local mutation applied that has not yet been\n   * acknowledged by Watch.\n   */\n  abstract get hasPendingWrites(): boolean;\n\n  abstract isEqual(other: MaybeDocument | null | undefined): boolean;\n\n  abstract toString(): string;\n}\n\n/**\n * Represents a document in Firestore with a key, version, data and whether the\n * data has local mutations applied to it.\n */\nexport class Document extends MaybeDocument {\n  readonly hasLocalMutations: boolean;\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    private readonly objectValue: ObjectValue,\n    options: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasLocalMutations = !!options.hasLocalMutations;\n    this.hasCommittedMutations = !!options.hasCommittedMutations;\n  }\n\n  field(path: FieldPath): api.Value | null {\n    return this.objectValue.field(path);\n  }\n\n  data(): ObjectValue {\n    return this.objectValue;\n  }\n\n  toProto(): { mapValue: api.MapValue } {\n    return this.objectValue.proto;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.isEqual(other.key) &&\n      this.version.isEqual(other.version) &&\n      this.hasLocalMutations === other.hasLocalMutations &&\n      this.hasCommittedMutations === other.hasCommittedMutations &&\n      this.objectValue.isEqual(other.objectValue)\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${\n        this.version\n      }, ${this.objectValue.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}}), ` +\n      `{hasCommittedMutations: ${this.hasCommittedMutations}})`\n    );\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n}\n\n/**\n * Compares the value for field `field` in the provided documents. Throws if\n * the field does not exist in both documents.\n */\nexport function compareDocumentsByField(\n  field: FieldPath,\n  d1: Document,\n  d2: Document\n): number {\n  const v1 = d1.field(field);\n  const v2 = d2.field(field);\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail(\"Trying to compare documents on fields that don't exist\");\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument extends MaybeDocument {\n  readonly hasCommittedMutations: boolean;\n\n  constructor(\n    key: DocumentKey,\n    version: SnapshotVersion,\n    options?: DocumentOptions\n  ) {\n    super(key, version);\n    this.hasCommittedMutations = !!(options && options.hasCommittedMutations);\n  }\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return this.hasCommittedMutations;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof NoDocument &&\n      other.hasCommittedMutations === this.hasCommittedMutations &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n\n/**\n * A class representing an existing document whose data is unknown (e.g. a\n * document that was updated without a known base document).\n */\nexport class UnknownDocument extends MaybeDocument {\n  toString(): string {\n    return `UnknownDocument(${this.key}, ${this.version})`;\n  }\n\n  get hasPendingWrites(): boolean {\n    return true;\n  }\n\n  isEqual(other: MaybeDocument | null | undefined): boolean {\n    return (\n      other instanceof UnknownDocument &&\n      other.version.isEqual(this.version) &&\n      other.key.isEqual(this.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { compareDocumentsByField, Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  canonicalId,\n  valueCompare,\n  arrayValueContains,\n  valueEquals,\n  isArray,\n  isNanValue,\n  isNullValue,\n  isReferenceValue,\n  typeOrder\n} from '../model/values';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isNullOrUndefined } from '../util/types';\nimport {\n  canonifyTarget,\n  isDocumentTarget,\n  newTarget,\n  stringifyTarget,\n  Target,\n  targetEquals\n} from './target';\n\nexport const enum LimitType {\n  First = 'F',\n  Last = 'L'\n}\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n */\nexport class Query {\n  // TODO(firestorelite): Refactor this class so that methods that are not used\n  // in the Lite client become tree-shakeable.\n\n  static atPath(path: ResourcePath): Query {\n    return new Query(path);\n  }\n\n  private memoizedOrderBy: OrderBy[] | null = null;\n\n  // The corresponding `Target` of this `Query` instance.\n  private memoizedTarget: Target | null = null;\n\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null = null,\n    readonly explicitOrderBy: OrderBy[] = [],\n    readonly filters: Filter[] = [],\n    readonly limit: number | null = null,\n    readonly limitType: LimitType = LimitType.First,\n    readonly startAt: Bound | null = null,\n    readonly endAt: Bound | null = null\n  ) {\n    if (this.startAt) {\n      this.assertValidBound(this.startAt);\n    }\n    if (this.endAt) {\n      this.assertValidBound(this.endAt);\n    }\n  }\n\n  get orderBy(): OrderBy[] {\n    if (this.memoizedOrderBy === null) {\n      this.memoizedOrderBy = [];\n\n      const inequalityField = this.getInequalityFilterField();\n      const firstOrderByField = this.getFirstOrderByField();\n      if (inequalityField !== null && firstOrderByField === null) {\n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        if (!inequalityField.isKeyField()) {\n          this.memoizedOrderBy.push(new OrderBy(inequalityField));\n        }\n        this.memoizedOrderBy.push(\n          new OrderBy(FieldPath.keyField(), Direction.ASCENDING)\n        );\n      } else {\n        debugAssert(\n          inequalityField === null ||\n            (firstOrderByField !== null &&\n              inequalityField.isEqual(firstOrderByField)),\n          'First orderBy should match inequality field.'\n        );\n        let foundKeyOrdering = false;\n        for (const orderBy of this.explicitOrderBy) {\n          this.memoizedOrderBy.push(orderBy);\n          if (orderBy.field.isKeyField()) {\n            foundKeyOrdering = true;\n          }\n        }\n        if (!foundKeyOrdering) {\n          // The order of the implicit key ordering always matches the last\n          // explicit order by\n          const lastDirection =\n            this.explicitOrderBy.length > 0\n              ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir\n              : Direction.ASCENDING;\n          this.memoizedOrderBy.push(\n            new OrderBy(FieldPath.keyField(), lastDirection)\n          );\n        }\n      }\n    }\n    return this.memoizedOrderBy;\n  }\n\n  addFilter(filter: Filter): Query {\n    debugAssert(\n      this.getInequalityFilterField() == null ||\n        !(filter instanceof FieldFilter) ||\n        !filter.isInequality() ||\n        filter.field.isEqual(this.getInequalityFilterField()!),\n      'Query must only have one inequality field.'\n    );\n\n    debugAssert(\n      !this.isDocumentQuery(),\n      'No filtering allowed for document query'\n    );\n\n    const newFilters = this.filters.concat([filter]);\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      newFilters,\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  addOrderBy(orderBy: OrderBy): Query {\n    debugAssert(\n      !this.startAt && !this.endAt,\n      'Bounds must be set after orderBy'\n    );\n    // TODO(dimond): validate that orderBy does not list the same key twice.\n    const newOrderBy = this.explicitOrderBy.concat([orderBy]);\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      newOrderBy,\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimitToFirst(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      LimitType.First,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withLimitToLast(limit: number | null): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      limit,\n      LimitType.Last,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  withStartAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      bound,\n      this.endAt\n    );\n  }\n\n  withEndAt(bound: Bound): Query {\n    return new Query(\n      this.path,\n      this.collectionGroup,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      bound\n    );\n  }\n\n  /**\n   * Helper to convert a collection group query into a collection query at a\n   * specific path. This is used when executing collection group queries, since\n   * we have to split the query into a set of collection queries at multiple\n   * paths.\n   */\n  asCollectionQueryAtPath(path: ResourcePath): Query {\n    return new Query(\n      path,\n      /*collectionGroup=*/ null,\n      this.explicitOrderBy.slice(),\n      this.filters.slice(),\n      this.limit,\n      this.limitType,\n      this.startAt,\n      this.endAt\n    );\n  }\n\n  /**\n   * Returns true if this query does not specify any query constraints that\n   * could remove results.\n   */\n  matchesAllDocuments(): boolean {\n    return (\n      this.filters.length === 0 &&\n      this.limit === null &&\n      this.startAt == null &&\n      this.endAt == null &&\n      (this.explicitOrderBy.length === 0 ||\n        (this.explicitOrderBy.length === 1 &&\n          this.explicitOrderBy[0].field.isKeyField()))\n    );\n  }\n\n  // TODO(b/29183165): This is used to get a unique string from a query to, for\n  // example, use as a dictionary key, but the implementation is subject to\n  // collisions. Make it collision-free.\n  canonicalId(): string {\n    return `${canonifyTarget(this.toTarget())}|lt:${this.limitType}`;\n  }\n\n  toString(): string {\n    return `Query(target=${stringifyTarget(this.toTarget())}; limitType=${\n      this.limitType\n    })`;\n  }\n\n  isEqual(other: Query): boolean {\n    return (\n      targetEquals(this.toTarget(), other.toTarget()) &&\n      this.limitType === other.limitType\n    );\n  }\n\n  docComparator(d1: Document, d2: Document): number {\n    let comparedOnKeyField = false;\n    for (const orderBy of this.orderBy) {\n      const comp = orderBy.compare(d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    // Assert that we actually compared by key\n    debugAssert(\n      comparedOnKeyField,\n      \"orderBy used that doesn't compare on key field\"\n    );\n    return 0;\n  }\n\n  matches(doc: Document): boolean {\n    return (\n      this.matchesPathAndCollectionGroup(doc) &&\n      this.matchesOrderBy(doc) &&\n      this.matchesFilters(doc) &&\n      this.matchesBounds(doc)\n    );\n  }\n\n  hasLimitToFirst(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.First;\n  }\n\n  hasLimitToLast(): boolean {\n    return !isNullOrUndefined(this.limit) && this.limitType === LimitType.Last;\n  }\n\n  getFirstOrderByField(): FieldPath | null {\n    return this.explicitOrderBy.length > 0\n      ? this.explicitOrderBy[0].field\n      : null;\n  }\n\n  getInequalityFilterField(): FieldPath | null {\n    for (const filter of this.filters) {\n      if (filter instanceof FieldFilter && filter.isInequality()) {\n        return filter.field;\n      }\n    }\n    return null;\n  }\n\n  // Checks if any of the provided Operators are included in the query and\n  // returns the first one that is, or null if none are.\n  findFilterOperator(operators: Operator[]): Operator | null {\n    for (const filter of this.filters) {\n      if (filter instanceof FieldFilter) {\n        if (operators.indexOf(filter.op) >= 0) {\n          return filter.op;\n        }\n      }\n    }\n    return null;\n  }\n\n  isDocumentQuery(): boolean {\n    return isDocumentTarget(this.toTarget());\n  }\n\n  isCollectionGroupQuery(): boolean {\n    return this.collectionGroup !== null;\n  }\n\n  /**\n   * Converts this `Query` instance to it's corresponding `Target`\n   * representation.\n   */\n  toTarget(): Target {\n    if (!this.memoizedTarget) {\n      if (this.limitType === LimitType.First) {\n        this.memoizedTarget = newTarget(\n          this.path,\n          this.collectionGroup,\n          this.orderBy,\n          this.filters,\n          this.limit,\n          this.startAt,\n          this.endAt\n        );\n      } else {\n        // Flip the orderBy directions since we want the last results\n        const orderBys = [] as OrderBy[];\n        for (const orderBy of this.orderBy) {\n          const dir =\n            orderBy.dir === Direction.DESCENDING\n              ? Direction.ASCENDING\n              : Direction.DESCENDING;\n          orderBys.push(new OrderBy(orderBy.field, dir));\n        }\n\n        // We need to swap the cursors to match the now-flipped query ordering.\n        const startAt = this.endAt\n          ? new Bound(this.endAt.position, !this.endAt.before)\n          : null;\n        const endAt = this.startAt\n          ? new Bound(this.startAt.position, !this.startAt.before)\n          : null;\n\n        // Now return as a LimitType.First query.\n        this.memoizedTarget = newTarget(\n          this.path,\n          this.collectionGroup,\n          orderBys,\n          this.filters,\n          this.limit,\n          startAt,\n          endAt\n        );\n      }\n    }\n    return this.memoizedTarget!;\n  }\n\n  private matchesPathAndCollectionGroup(doc: Document): boolean {\n    const docPath = doc.key.path;\n    if (this.collectionGroup !== null) {\n      // NOTE: this.path is currently always empty since we don't expose Collection\n      // Group queries rooted at a document path yet.\n      return (\n        doc.key.hasCollectionId(this.collectionGroup) &&\n        this.path.isPrefixOf(docPath)\n      );\n    } else if (DocumentKey.isDocumentKey(this.path)) {\n      // exact match for document queries\n      return this.path.isEqual(docPath);\n    } else {\n      // shallow ancestor queries by default\n      return this.path.isImmediateParentOf(docPath);\n    }\n  }\n\n  /**\n   * A document must have a value for every ordering clause in order to show up\n   * in the results.\n   */\n  private matchesOrderBy(doc: Document): boolean {\n    for (const orderBy of this.explicitOrderBy) {\n      // order by key always matches\n      if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === null) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private matchesFilters(doc: Document): boolean {\n    for (const filter of this.filters) {\n      if (!filter.matches(doc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Makes sure a document is within the bounds, if provided.\n   */\n  private matchesBounds(doc: Document): boolean {\n    if (this.startAt && !sortsBeforeDocument(this.startAt, this.orderBy, doc)) {\n      return false;\n    }\n    if (this.endAt && sortsBeforeDocument(this.endAt, this.orderBy, doc)) {\n      return false;\n    }\n    return true;\n  }\n\n  private assertValidBound(bound: Bound): void {\n    debugAssert(\n      bound.position.length <= this.orderBy.length,\n      'Bound is longer than orderBy'\n    );\n  }\n}\n\nexport abstract class Filter {\n  abstract matches(doc: Document): boolean;\n  abstract canonicalId(): string;\n  abstract isEqual(filter: Filter): boolean;\n}\n\nexport const enum Operator {\n  LESS_THAN = '<',\n  LESS_THAN_OR_EQUAL = '<=',\n  EQUAL = '==',\n  GREATER_THAN = '>',\n  GREATER_THAN_OR_EQUAL = '>=',\n  ARRAY_CONTAINS = 'array-contains',\n  IN = 'in',\n  ARRAY_CONTAINS_ANY = 'array-contains-any'\n}\n\nexport class FieldFilter extends Filter {\n  protected constructor(\n    public field: FieldPath,\n    public op: Operator,\n    public value: api.Value\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(field: FieldPath, op: Operator, value: api.Value): FieldFilter {\n    if (field.isKeyField()) {\n      if (op === Operator.IN) {\n        debugAssert(\n          isArray(value),\n          'Comparing on key with IN, but filter value not an ArrayValue'\n        );\n        debugAssert(\n          (value.arrayValue.values || []).every(elem => isReferenceValue(elem)),\n          'Comparing on key with IN, but an array value was not a RefValue'\n        );\n        return new KeyFieldInFilter(field, value);\n      } else {\n        debugAssert(\n          isReferenceValue(value),\n          'Comparing on key, but filter value not a RefValue'\n        );\n        debugAssert(\n          op !== Operator.ARRAY_CONTAINS && op !== Operator.ARRAY_CONTAINS_ANY,\n          `'${op.toString()}' queries don't make sense on document keys.`\n        );\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (isNullValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. Null supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (isNanValue(value)) {\n      if (op !== Operator.EQUAL) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. NaN supports only equality comparisons.'\n        );\n      }\n      return new FieldFilter(field, op, value);\n    } else if (op === Operator.ARRAY_CONTAINS) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === Operator.IN) {\n      debugAssert(\n        isArray(value),\n        'IN filter has invalid value: ' + value.toString()\n      );\n      return new InFilter(field, value);\n    } else if (op === Operator.ARRAY_CONTAINS_ANY) {\n      debugAssert(\n        isArray(value),\n        'ARRAY_CONTAINS_ANY filter has invalid value: ' + value.toString()\n      );\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n\n    // Only compare types with matching backend order (such as double and int).\n    return (\n      other !== null &&\n      typeOrder(this.value) === typeOrder(other) &&\n      this.matchesComparison(valueCompare(other, this.value))\n    );\n  }\n\n  protected matchesComparison(comparison: number): boolean {\n    switch (this.op) {\n      case Operator.LESS_THAN:\n        return comparison < 0;\n      case Operator.LESS_THAN_OR_EQUAL:\n        return comparison <= 0;\n      case Operator.EQUAL:\n        return comparison === 0;\n      case Operator.GREATER_THAN:\n        return comparison > 0;\n      case Operator.GREATER_THAN_OR_EQUAL:\n        return comparison >= 0;\n      default:\n        return fail('Unknown FieldFilter operator: ' + this.op);\n    }\n  }\n\n  isInequality(): boolean {\n    return (\n      [\n        Operator.LESS_THAN,\n        Operator.LESS_THAN_OR_EQUAL,\n        Operator.GREATER_THAN,\n        Operator.GREATER_THAN_OR_EQUAL\n      ].indexOf(this.op) >= 0\n    );\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Technically, this won't be unique if two values have\n    // the same description, such as the int 3 and the string \"3\". So we should\n    // add the types in here somehow, too.\n    return (\n      this.field.canonicalString() +\n      this.op.toString() +\n      canonicalId(this.value)\n    );\n  }\n\n  isEqual(other: Filter): boolean {\n    if (other instanceof FieldFilter) {\n      return (\n        this.op === other.op &&\n        this.field.isEqual(other.field) &&\n        valueEquals(this.value, other.value)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} ${this.op} ${canonicalId(\n      this.value\n    )}`;\n  }\n}\n\n/** Filter that matches on key fields (i.e. '__name__'). */\nexport class KeyFieldFilter extends FieldFilter {\n  private readonly key: DocumentKey;\n\n  constructor(field: FieldPath, op: Operator, value: api.Value) {\n    super(field, op, value);\n    debugAssert(\n      isReferenceValue(value),\n      'KeyFieldFilter expects a ReferenceValue'\n    );\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n\n  matches(doc: Document): boolean {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nexport class KeyFieldInFilter extends FieldFilter {\n  private readonly keys: DocumentKey[];\n\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'KeyFieldInFilter expects an ArrayValue');\n    this.keys = (value.arrayValue.values || []).map(v => {\n      debugAssert(\n        isReferenceValue(v),\n        'Comparing on key with IN, but an array value was not a ReferenceValue'\n      );\n      return DocumentKey.fromName(v.referenceValue);\n    });\n  }\n\n  matches(doc: Document): boolean {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n\n/** A Filter that implements the array-contains operator. */\nexport class ArrayContainsFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS, value);\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nexport class InFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.IN, value);\n    debugAssert(isArray(value), 'InFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue!, other);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nexport class ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field: FieldPath, value: api.Value) {\n    super(field, Operator.ARRAY_CONTAINS_ANY, value);\n    debugAssert(isArray(value), 'ArrayContainsAnyFilter expects an ArrayValue');\n  }\n\n  matches(doc: Document): boolean {\n    const other = doc.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val =>\n      arrayValueContains(this.value.arrayValue!, val)\n    );\n  }\n}\n\n/**\n * The direction of sorting in an order by.\n */\nexport const enum Direction {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nexport class Bound {\n  constructor(readonly position: api.Value[], readonly before: boolean) {}\n}\n\nexport function canonifyBound(bound: Bound): string {\n  // TODO(b/29183165): Make this collision robust.\n  return `${bound.before ? 'b' : 'a'}:${bound.position\n    .map(p => canonicalId(p))\n    .join(',')}`;\n}\n\n/**\n * Returns true if a document sorts before a bound using the provided sort\n * order.\n */\nexport function sortsBeforeDocument(\n  bound: Bound,\n  orderBy: OrderBy[],\n  doc: Document\n): boolean {\n  debugAssert(\n    bound.position.length <= orderBy.length,\n    \"Bound has more components than query's orderBy\"\n  );\n  let comparison = 0;\n  for (let i = 0; i < bound.position.length; i++) {\n    const orderByComponent = orderBy[i];\n    const component = bound.position[i];\n    if (orderByComponent.field.isKeyField()) {\n      debugAssert(\n        isReferenceValue(component),\n        'Bound has a non-key value where the key path is being used.'\n      );\n      comparison = DocumentKey.comparator(\n        DocumentKey.fromName(component.referenceValue),\n        doc.key\n      );\n    } else {\n      const docValue = doc.field(orderByComponent.field);\n      debugAssert(\n        docValue !== null,\n        'Field should exist since document matched the orderBy already.'\n      );\n      comparison = valueCompare(component, docValue);\n    }\n    if (orderByComponent.dir === Direction.DESCENDING) {\n      comparison = comparison * -1;\n    }\n    if (comparison !== 0) {\n      break;\n    }\n  }\n  return bound.before ? comparison <= 0 : comparison < 0;\n}\n\nexport function boundEquals(left: Bound | null, right: Bound | null): boolean {\n  if (left === null) {\n    return right === null;\n  } else if (right === null) {\n    return false;\n  }\n\n  if (\n    left.before !== right.before ||\n    left.position.length !== right.position.length\n  ) {\n    return false;\n  }\n  for (let i = 0; i < left.position.length; i++) {\n    const leftPosition = left.position[i];\n    const rightPosition = right.position[i];\n    if (!valueEquals(leftPosition, rightPosition)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nexport class OrderBy {\n  readonly dir: Direction;\n  private readonly isKeyOrderBy: boolean;\n\n  constructor(readonly field: FieldPath, dir?: Direction) {\n    if (dir === undefined) {\n      dir = Direction.ASCENDING;\n    }\n    this.dir = dir;\n    this.isKeyOrderBy = field.isKeyField();\n  }\n\n  compare(d1: Document, d2: Document): number {\n    const comparison = this.isKeyOrderBy\n      ? DocumentKey.comparator(d1.key, d2.key)\n      : compareDocumentsByField(this.field, d1, d2);\n    switch (this.dir) {\n      case Direction.ASCENDING:\n        return comparison;\n      case Direction.DESCENDING:\n        return -1 * comparison;\n      default:\n        return fail('Unknown direction: ' + this.dir);\n    }\n  }\n\n  canonicalId(): string {\n    // TODO(b/29183165): Make this collision robust.\n    return this.field.canonicalString() + this.dir.toString();\n  }\n\n  toString(): string {\n    return `${this.field.canonicalString()} (${this.dir})`;\n  }\n\n  isEqual(other: OrderBy): boolean {\n    return this.dir === other.dir && this.field.isEqual(other.field);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { isNullOrUndefined } from '../util/types';\nimport { Bound, boundEquals, canonifyBound, Filter, OrderBy } from './query';\nimport { debugCast } from '../util/assert';\n\n/**\n * A Target represents the WatchTarget representation of a Query, which is used\n * by the LocalStore and the RemoteStore to keep track of and to execute\n * backend queries. While a Query can represent multiple Targets, each Targets\n * maps to a single WatchTarget in RemoteStore and a single TargetData entry\n * in persistence.\n */\nexport class Target {\n  protected constructor(\n    readonly path: ResourcePath,\n    readonly collectionGroup: string | null,\n    readonly orderBy: OrderBy[],\n    readonly filters: Filter[],\n    readonly limit: number | null,\n    readonly startAt: Bound | null,\n    readonly endAt: Bound | null\n  ) {}\n}\n\nclass TargetImpl extends Target {\n  memoizedCanonicalId: string | null = null;\n  constructor(\n    path: ResourcePath,\n    collectionGroup: string | null = null,\n    orderBy: OrderBy[] = [],\n    filters: Filter[] = [],\n    limit: number | null = null,\n    startAt: Bound | null = null,\n    endAt: Bound | null = null\n  ) {\n    super(path, collectionGroup, orderBy, filters, limit, startAt, endAt);\n  }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nexport function newTarget(\n  path: ResourcePath,\n  collectionGroup: string | null = null,\n  orderBy: OrderBy[] = [],\n  filters: Filter[] = [],\n  limit: number | null = null,\n  startAt: Bound | null = null,\n  endAt: Bound | null = null\n): Target {\n  return new TargetImpl(\n    path,\n    collectionGroup,\n    orderBy,\n    filters,\n    limit,\n    startAt,\n    endAt\n  );\n}\n\nexport function canonifyTarget(target: Target): string {\n  const targetImpl = debugCast(target, TargetImpl);\n\n  if (targetImpl.memoizedCanonicalId === null) {\n    let canonicalId = targetImpl.path.canonicalString();\n    if (targetImpl.collectionGroup !== null) {\n      canonicalId += '|cg:' + targetImpl.collectionGroup;\n    }\n    canonicalId += '|f:';\n    canonicalId += targetImpl.filters.map(f => f.canonicalId()).join(',');\n    canonicalId += '|ob:';\n    canonicalId += targetImpl.orderBy.map(o => o.canonicalId()).join(',');\n\n    if (!isNullOrUndefined(targetImpl.limit)) {\n      canonicalId += '|l:';\n      canonicalId += targetImpl.limit!;\n    }\n    if (targetImpl.startAt) {\n      canonicalId += '|lb:';\n      canonicalId += canonifyBound(targetImpl.startAt);\n    }\n    if (targetImpl.endAt) {\n      canonicalId += '|ub:';\n      canonicalId += canonifyBound(targetImpl.endAt);\n    }\n    targetImpl.memoizedCanonicalId = canonicalId;\n  }\n  return targetImpl.memoizedCanonicalId;\n}\n\nexport function stringifyTarget(target: Target): string {\n  let str = target.path.canonicalString();\n  if (target.collectionGroup !== null) {\n    str += ' collectionGroup=' + target.collectionGroup;\n  }\n  if (target.filters.length > 0) {\n    str += `, filters: [${target.filters.join(', ')}]`;\n  }\n  if (!isNullOrUndefined(target.limit)) {\n    str += ', limit: ' + target.limit;\n  }\n  if (target.orderBy.length > 0) {\n    str += `, orderBy: [${target.orderBy.join(', ')}]`;\n  }\n  if (target.startAt) {\n    str += ', startAt: ' + canonifyBound(target.startAt);\n  }\n  if (target.endAt) {\n    str += ', endAt: ' + canonifyBound(target.endAt);\n  }\n  return `Target(${str})`;\n}\n\nexport function targetEquals(left: Target, right: Target): boolean {\n  if (left.limit !== right.limit) {\n    return false;\n  }\n\n  if (left.orderBy.length !== right.orderBy.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.orderBy.length; i++) {\n    if (!left.orderBy[i].isEqual(right.orderBy[i])) {\n      return false;\n    }\n  }\n\n  if (left.filters.length !== right.filters.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.filters.length; i++) {\n    if (!left.filters[i].isEqual(right.filters[i])) {\n      return false;\n    }\n  }\n\n  if (left.collectionGroup !== right.collectionGroup) {\n    return false;\n  }\n\n  if (!left.path.isEqual(right.path)) {\n    return false;\n  }\n\n  if (!boundEquals(left.startAt, right.startAt)) {\n    return false;\n  }\n\n  return boundEquals(left.endAt, right.endAt);\n}\n\nexport function isDocumentTarget(target: Target): boolean {\n  return (\n    DocumentKey.isDocumentKey(target.path) &&\n    target.collectionGroup === null &&\n    target.filters.length === 0\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BatchId } from '../core/types';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { arrayEquals } from '../util/misc';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  DocumentVersionMap,\n  documentVersionMap,\n  MaybeDocumentMap\n} from './collections';\nimport { MaybeDocument } from './document';\nimport { DocumentKey } from './document_key';\nimport { Mutation, MutationResult } from './mutation';\n\nexport const BATCHID_UNKNOWN = -1;\n\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nexport class MutationBatch {\n  /**\n   * @param batchId The unique ID of this mutation batch.\n   * @param localWriteTime The original write time of this mutation.\n   * @param baseMutations Mutations that are used to populate the base\n   * values when this mutation is applied locally. This can be used to locally\n   * overwrite values that are persisted in the remote document cache. Base\n   * mutations are never sent to the backend.\n   * @param mutations The user-provided mutations in this mutation batch.\n   * User-provided mutations are applied both locally and remotely on the\n   * backend.\n   */\n  constructor(\n    public batchId: BatchId,\n    public localWriteTime: Timestamp,\n    public baseMutations: Mutation[],\n    public mutations: Mutation[]\n  ) {\n    debugAssert(mutations.length > 0, 'Cannot create an empty mutation batch');\n  }\n\n  /**\n   * Applies all the mutations in this MutationBatch to the specified document\n   * to create a new remote document\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   * @param batchResult The result of applying the MutationBatch to the\n   * backend.\n   */\n  applyToRemoteDocument(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null,\n    batchResult: MutationBatchResult\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToRemoteDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    const mutationResults = batchResult.mutationResults;\n    debugAssert(\n      mutationResults.length === this.mutations.length,\n      `Mismatch between mutations length\n      (${this.mutations.length}) and mutation results length\n      (${mutationResults.length}).`\n    );\n\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.isEqual(docKey)) {\n        const mutationResult = mutationResults[i];\n        maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view of a document given all the mutations in this\n   * batch.\n   *\n   * @param docKey The key of the document to apply mutations to.\n   * @param maybeDoc The document to apply mutations to.\n   */\n  applyToLocalView(\n    docKey: DocumentKey,\n    maybeDoc: MaybeDocument | null\n  ): MaybeDocument | null {\n    if (maybeDoc) {\n      debugAssert(\n        maybeDoc.key.isEqual(docKey),\n        `applyToLocalDocument: key ${docKey} should match maybeDoc key\n        ${maybeDoc.key}`\n      );\n    }\n\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (const mutation of this.baseMutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = mutation.applyToLocalView(\n          maybeDoc,\n          maybeDoc,\n          this.localWriteTime\n        );\n      }\n    }\n\n    const baseDoc = maybeDoc;\n\n    // Second, apply all user-provided mutations.\n    for (const mutation of this.mutations) {\n      if (mutation.key.isEqual(docKey)) {\n        maybeDoc = mutation.applyToLocalView(\n          maybeDoc,\n          baseDoc,\n          this.localWriteTime\n        );\n      }\n    }\n    return maybeDoc;\n  }\n\n  /**\n   * Computes the local view for all provided documents given the mutations in\n   * this batch.\n   */\n  applyToLocalDocumentSet(maybeDocs: MaybeDocumentMap): MaybeDocumentMap {\n    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n    let mutatedDocuments = maybeDocs;\n    this.mutations.forEach(m => {\n      const mutatedDocument = this.applyToLocalView(\n        m.key,\n        maybeDocs.get(m.key)\n      );\n      if (mutatedDocument) {\n        mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);\n      }\n    });\n    return mutatedDocuments;\n  }\n\n  keys(): DocumentKeySet {\n    return this.mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n  }\n\n  isEqual(other: MutationBatch): boolean {\n    return (\n      this.batchId === other.batchId &&\n      arrayEquals(this.mutations, other.mutations, (l, r) => l.isEqual(r)) &&\n      arrayEquals(this.baseMutations, other.baseMutations, (l, r) =>\n        l.isEqual(r)\n      )\n    );\n  }\n}\n\n/** The result of applying a mutation batch to the backend. */\nexport class MutationBatchResult {\n  private constructor(\n    readonly batch: MutationBatch,\n    readonly commitVersion: SnapshotVersion,\n    readonly mutationResults: MutationResult[],\n    /**\n     * A pre-computed mapping from each mutated document to the resulting\n     * version.\n     */\n    readonly docVersions: DocumentVersionMap\n  ) {}\n\n  /**\n   * Creates a new MutationBatchResult for the given batch and results. There\n   * must be one result for each mutation in the batch. This static factory\n   * caches a document=>version mapping (docVersions).\n   */\n  static from(\n    batch: MutationBatch,\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): MutationBatchResult {\n    hardAssert(\n      batch.mutations.length === results.length,\n      'Mutations sent ' +\n        batch.mutations.length +\n        ' must equal results received ' +\n        results.length\n    );\n\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n\n    return new MutationBatchResult(batch, commitVersion, results, versionMap);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\n\nexport type FulfilledHandler<T, R> =\n  | ((result: T) => R | PersistencePromise<R>)\n  | null;\nexport type RejectedHandler<R> =\n  | ((reason: Error) => R | PersistencePromise<R>)\n  | null;\nexport type Resolver<T> = (value?: T) => void;\nexport type Rejector = (error: Error) => void;\n\n/**\n * PersistencePromise<> is essentially a re-implementation of Promise<> except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise<> implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nexport class PersistencePromise<T> {\n  // NOTE: next/catchCallback will always point to our own wrapper functions,\n  // not the user's raw next() or catch() callbacks.\n  private nextCallback: FulfilledHandler<T, unknown> = null;\n  private catchCallback: RejectedHandler<unknown> = null;\n\n  // When the operation resolves, we'll set result or error and mark isDone.\n  private result: T | undefined = undefined;\n  private error: Error | undefined = undefined;\n  private isDone = false;\n\n  // Set to true when .then() or .catch() are called and prevents additional\n  // chaining.\n  private callbackAttached = false;\n\n  constructor(callback: (resolve: Resolver<T>, reject: Rejector) => void) {\n    callback(\n      value => {\n        this.isDone = true;\n        this.result = value;\n        if (this.nextCallback) {\n          // value should be defined unless T is Void, but we can't express\n          // that in the type system.\n          this.nextCallback(value!);\n        }\n      },\n      error => {\n        this.isDone = true;\n        this.error = error;\n        if (this.catchCallback) {\n          this.catchCallback(error);\n        }\n      }\n    );\n  }\n\n  catch<R>(\n    fn: (error: Error) => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    return this.next(undefined, fn);\n  }\n\n  next<R>(\n    nextFn?: FulfilledHandler<T, R>,\n    catchFn?: RejectedHandler<R>\n  ): PersistencePromise<R> {\n    if (this.callbackAttached) {\n      fail('Called next() or catch() twice for PersistencePromise');\n    }\n    this.callbackAttached = true;\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result!);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise<R>((resolve, reject) => {\n        this.nextCallback = (value: T) => {\n          this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n        this.catchCallback = (error: Error) => {\n          this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  }\n\n  toPromise(): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.next(resolve, reject);\n    });\n  }\n\n  private wrapUserFunction<R>(\n    fn: () => R | PersistencePromise<R>\n  ): PersistencePromise<R> {\n    try {\n      const result = fn();\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject<R>(e);\n    }\n  }\n\n  private wrapSuccess<R>(\n    nextFn: FulfilledHandler<T, R> | undefined,\n    value: T\n  ): PersistencePromise<R> {\n    if (nextFn) {\n      return this.wrapUserFunction(() => nextFn(value));\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve<R>((value as unknown) as R);\n    }\n  }\n\n  private wrapFailure<R>(\n    catchFn: RejectedHandler<R> | undefined,\n    error: Error\n  ): PersistencePromise<R> {\n    if (catchFn) {\n      return this.wrapUserFunction(() => catchFn(error));\n    } else {\n      return PersistencePromise.reject<R>(error);\n    }\n  }\n\n  static resolve(): PersistencePromise<void>;\n  static resolve<R>(result: R): PersistencePromise<R>;\n  static resolve<R>(result?: R): PersistencePromise<R | void> {\n    return new PersistencePromise<R | void>((resolve, reject) => {\n      resolve(result);\n    });\n  }\n\n  static reject<R>(error: Error): PersistencePromise<R> {\n    return new PersistencePromise<R>((resolve, reject) => {\n      reject(error);\n    });\n  }\n\n  static waitFor(\n    // Accept all Promise types in waitFor().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    all: { forEach: (cb: (el: PersistencePromise<any>) => void) => void }\n  ): PersistencePromise<void> {\n    return new PersistencePromise<void>((resolve, reject) => {\n      let expectedCount = 0;\n      let resolvedCount = 0;\n      let done = false;\n\n      all.forEach(element => {\n        ++expectedCount;\n        element.next(\n          () => {\n            ++resolvedCount;\n            if (done && resolvedCount === expectedCount) {\n              resolve();\n            }\n          },\n          err => reject(err)\n        );\n      });\n\n      done = true;\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Given an array of predicate functions that asynchronously evaluate to a\n   * boolean, implements a short-circuiting `or` between the results. Predicates\n   * will be evaluated until one of them returns `true`, then stop. The final\n   * result will be whether any of them returned `true`.\n   */\n  static or(\n    predicates: Array<() => PersistencePromise<boolean>>\n  ): PersistencePromise<boolean> {\n    let p: PersistencePromise<boolean> = PersistencePromise.resolve<boolean>(\n      false\n    );\n    for (const predicate of predicates) {\n      p = p.next(isTrue => {\n        if (isTrue) {\n          return PersistencePromise.resolve<boolean>(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    }\n    return p;\n  }\n\n  /**\n   * Given an iterable, call the given function on each element in the\n   * collection and wait for all of the resulting concurrent PersistencePromises\n   * to resolve.\n   */\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s: S) => void) => void },\n    f:\n      | ((r: R, s: S) => PersistencePromise<void>)\n      | ((r: R) => PersistencePromise<void>)\n  ): PersistencePromise<void>;\n  static forEach<R>(\n    collection: { forEach: (cb: (r: R) => void) => void },\n    f: (r: R) => PersistencePromise<void>\n  ): PersistencePromise<void>;\n  static forEach<R, S>(\n    collection: { forEach: (cb: (r: R, s?: S) => void) => void },\n    f: (r: R, s?: S) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    const promises: Array<PersistencePromise<void>> = [];\n    collection.forEach((r, s) => {\n      promises.push(f.call(this, r, s));\n    });\n    return this.waitFor(promises);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, NullableMaybeDocumentMap } from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SnapshotVersion } from '../core/snapshot_version';\n\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * Entries added to the cache *must* be read first. This is to facilitate\n * calculating the size delta of the pending changes.\n *\n * PORTING NOTE: This class was implemented then removed from other platforms.\n * If byte-counting ends up being needed on the other platforms, consider\n * porting this class as part of that implementation work.\n */\nexport abstract class RemoteDocumentChangeBuffer {\n  // A mapping of document key to the new cache entry that should be written (or null if any\n  // existing cache entry should be removed).\n  protected changes: ObjectMap<\n    DocumentKey,\n    MaybeDocument | null\n  > = new ObjectMap(\n    key => key.toString(),\n    (l, r) => l.isEqual(r)\n  );\n\n  // The read time to use for all added documents in this change buffer.\n  private _readTime: SnapshotVersion | undefined;\n\n  private changesApplied = false;\n\n  protected abstract getFromCache(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null>;\n\n  protected abstract getAllFromCache(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap>;\n\n  protected abstract applyChanges(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<void>;\n\n  protected set readTime(value: SnapshotVersion) {\n    // Right now (for simplicity) we just track a single readTime for all the\n    // added entries since we expect them to all be the same, but we could\n    // rework to store per-entry readTimes if necessary.\n    debugAssert(\n      this._readTime === undefined || this._readTime.isEqual(value),\n      'All changes in a RemoteDocumentChangeBuffer must have the same read time'\n    );\n    this._readTime = value;\n  }\n\n  protected get readTime(): SnapshotVersion {\n    debugAssert(\n      this._readTime !== undefined,\n      'Read time is not set. All removeEntry() calls must include a readTime if `trackRemovals` is used.'\n    );\n    return this._readTime;\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\n   *\n   * You can only modify documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  addEntry(maybeDocument: MaybeDocument, readTime: SnapshotVersion): void {\n    this.assertNotApplied();\n    this.readTime = readTime;\n    this.changes.set(maybeDocument.key, maybeDocument);\n  }\n\n  /**\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\n   *\n   * You can only remove documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  removeEntry(key: DocumentKey, readTime?: SnapshotVersion): void {\n    this.assertNotApplied();\n    if (readTime) {\n      this.readTime = readTime;\n    }\n    this.changes.set(key, null);\n  }\n\n  /**\n   * Looks up an entry in the cache. The buffered changes will first be checked,\n   * and if no buffered change applies, this will forward to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKey The key of the entry to look up.\n   * @return The cached Document or NoDocument entry, or null if we have nothing\n   * cached.\n   */\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    this.assertNotApplied();\n    const bufferedEntry = this.changes.get(documentKey);\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve<MaybeDocument | null>(bufferedEntry);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  }\n\n  /**\n   * Looks up several entries in the cache, forwarding to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKeys The keys of the entries to look up.\n   * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an\n   *     entry cannot be found, the corresponding key will be mapped to a null\n   *     value.\n   */\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    return this.getAllFromCache(transaction, documentKeys);\n  }\n\n  /**\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\n   * the provided transaction.\n   */\n  apply(transaction: PersistenceTransaction): PersistencePromise<void> {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  }\n\n  /** Helper to assert this.changes is not null  */\n  protected assertNotApplied(): void {\n    debugAssert(!this.changesApplied, 'Changes have already been applied.');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { IndexManager } from './index_manager';\nimport { LocalStore } from './local_store';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { TargetData } from './target_data';\n\nexport const PRIMARY_LEASE_LOST_ERROR_MSG =\n  'The current tab is not in the required state to perform this operation. ' +\n  'It might be necessary to refresh the browser tab.';\n\n/**\n * A base class representing a persistence transaction, encapsulating both the\n * transaction's sequence numbers as well as a list of onCommitted listeners.\n *\n * When you call Persistence.runTransaction(), it will create a transaction and\n * pass it to your callback. You then pass it to any method that operates\n * on persistence.\n */\nexport abstract class PersistenceTransaction {\n  private readonly onCommittedListeners: Array<() => void> = [];\n\n  abstract readonly currentSequenceNumber: ListenSequenceNumber;\n\n  addOnCommittedListener(listener: () => void): void {\n    this.onCommittedListeners.push(listener);\n  }\n\n  raiseOnCommittedEvent(): void {\n    this.onCommittedListeners.forEach(listener => listener());\n  }\n}\n\n/** The different modes supported by `IndexedDbPersistence.runTransaction()`. */\nexport type PersistenceTransactionMode =\n  | 'readonly'\n  | 'readwrite'\n  | 'readwrite-primary';\n\n/**\n * Callback type for primary state notifications. This callback can be\n * registered with the persistence layer to get notified when we transition from\n * primary to secondary state and vice versa.\n *\n * Note: Instances can only toggle between Primary and Secondary state if\n * IndexedDB persistence is enabled and multiple clients are active. If this\n * listener is registered with MemoryPersistence, the callback will be called\n * exactly once marking the current instance as Primary.\n */\nexport type PrimaryStateListener = (isPrimary: boolean) => Promise<void>;\n\n/**\n * A ReferenceDelegate instance handles all of the hooks into the document-reference lifecycle. This\n * includes being added to a target, being removed from a target, being subject to mutation, and\n * being mutated by the user.\n *\n * Different implementations may do different things with each of these events. Not every\n * implementation needs to do something with every lifecycle hook.\n *\n * PORTING NOTE: since sequence numbers are attached to transactions in this\n * client, the ReferenceDelegate does not need to deal in transactional\n * semantics (onTransactionStarted/Committed()), nor does it need to track and\n * generate sequence numbers (getCurrentSequenceNumber()).\n */\nexport interface ReferenceDelegate {\n  /** Notify the delegate that the given document was added to a target. */\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that the given document was removed from a target. */\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a target was removed. The delegate may, but is not obligated to,\n   * actually delete the target and associated data.\n   */\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void>;\n\n  /**\n   * Notify the delegate that a document may no longer be part of any views or\n   * have any mutations associated.\n   */\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n\n  /** Notify the delegate that a limbo document was updated. */\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    doc: DocumentKey\n  ): PersistencePromise<void>;\n}\n\n/**\n * Persistence is the lowest-level shared interface to persistent storage in\n * Firestore.\n *\n * Persistence is used to create MutationQueue and RemoteDocumentCache\n * instances backed by persistence (which might be in-memory or LevelDB).\n *\n * Persistence also exposes an API to create and run PersistenceTransactions\n * against persistence. All read / write operations must be wrapped in a\n * transaction. Implementations of PersistenceTransaction / Persistence only\n * need to guarantee that writes made against the transaction are not made to\n * durable storage until the transaction resolves its PersistencePromise.\n * Since memory-only storage components do not alter durable storage, they are\n * free to ignore the transaction.\n *\n * This contract is enough to allow the LocalStore be be written\n * independently of whether or not the stored state actually is durably\n * persisted. If persistent storage is enabled, writes are grouped together to\n * avoid inconsistent state that could cause crashes.\n *\n * Concretely, when persistent storage is enabled, the persistent versions of\n * MutationQueue, RemoteDocumentCache, and others (the mutators) will\n * defer their writes into a transaction. Once the local store has completed\n * one logical operation, it commits the transaction.\n *\n * When persistent storage is disabled, the non-persistent versions of the\n * mutators ignore the transaction. This short-cut is allowed because\n * memory-only storage leaves no state so it cannot be inconsistent.\n *\n * This simplifies the implementations of the mutators and allows memory-only\n * implementations to supplement the persistent ones without requiring any\n * special dual-store implementation of Persistence. The cost is that the\n * LocalStore needs to be slightly careful about the order of its reads and\n * writes in order to avoid relying on being able to read back uncommitted\n * writes.\n */\nexport interface Persistence {\n  /**\n   * Whether or not this persistence instance has been started.\n   */\n  readonly started: boolean;\n\n  readonly referenceDelegate: ReferenceDelegate;\n\n  /** Starts persistence. */\n  start(): Promise<void>;\n\n  /**\n   * Releases any resources held during eager shutdown.\n   */\n  shutdown(): Promise<void>;\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void;\n\n  /**\n   * Returns a MutationQueue representing the persisted mutations for the\n   * given user.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called for a given user. In particular, the memory-backed\n   * implementation does this to emulate the persisted implementation to the\n   * extent possible (e.g. in the case of uid switching from\n   * sally=>jack=>sally, sally's mutation queue will be preserved).\n   */\n  getMutationQueue(user: User): MutationQueue;\n\n  /**\n   * Returns a TargetCache representing the persisted cache of targets.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getTargetCache(): TargetCache;\n\n  /**\n   * Returns a RemoteDocumentCache representing the persisted cache of remote\n   * documents.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getRemoteDocumentCache(): RemoteDocumentCache;\n\n  /**\n   * Returns an IndexManager instance that manages our persisted query indexes.\n   *\n   * Note: The implementation is free to return the same instance every time\n   * this is called. In particular, the memory-backed implementation does this\n   * to emulate the persisted implementation to the extent possible.\n   */\n  getIndexManager(): IndexManager;\n\n  /**\n   * Performs an operation inside a persistence transaction. Any reads or writes\n   * against persistence must be performed within a transaction. Writes will be\n   * committed atomically once the transaction completes.\n   *\n   * Persistence operations are asynchronous and therefore the provided\n   * transactionOperation must return a PersistencePromise. When it is resolved,\n   * the transaction will be committed and the Promise returned by this method\n   * will resolve.\n   *\n   * @param action A description of the action performed by this transaction,\n   * used for logging.\n   * @param mode The underlying mode of the IndexedDb transaction. Can be\n   * 'readonly`, 'readwrite' or 'readwrite-primary'. Transactions marked\n   * 'readwrite-primary' can only be executed by the primary client. In this\n   * mode, the transactionOperation will not be run if the primary lease cannot\n   * be acquired and the returned promise will be rejected with a\n   * FAILED_PRECONDITION error.\n   * @param transactionOperation The operation to run inside a transaction.\n   * @return A promise that is resolved once the transaction completes.\n   */\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T>;\n}\n\n/**\n * Interface implemented by the LRU scheduler to start(), stop() and restart\n * garbage collection.\n */\nexport interface GarbageCollectionScheduler {\n  readonly started: boolean;\n  start(localStore: LocalStore): void;\n  stop(): void;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  documentMap,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\n\nimport { debugAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PatchMutation } from '../model/mutation';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\n\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nexport class LocalDocumentsView {\n  constructor(\n    readonly remoteDocumentCache: RemoteDocumentCache,\n    readonly mutationQueue: MutationQueue,\n    readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Get the local view of the document identified by `key`.\n   *\n   * @return Local view of the document or null if we don't have any cached\n   * state for it.\n   */\n  getDocument(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKey(transaction, key)\n      .next(batches => this.getDocumentInternal(transaction, key, batches));\n  }\n\n  /** Internal version of `getDocument` that allows reusing batches. */\n  private getDocumentInternal(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    inBatches: MutationBatch[]\n  ): PersistencePromise<MaybeDocument | null> {\n    return this.remoteDocumentCache.getEntry(transaction, key).next(doc => {\n      for (const batch of inBatches) {\n        doc = batch.applyToLocalView(key, doc);\n      }\n      return doc;\n    });\n  }\n\n  // Returns the view of the given `docs` as they would appear after applying\n  // all mutations in the given `batches`.\n  private applyLocalMutationsToDocuments(\n    transaction: PersistenceTransaction,\n    docs: NullableMaybeDocumentMap,\n    batches: MutationBatch[]\n  ): NullableMaybeDocumentMap {\n    let results = nullableMaybeDocumentMap();\n    docs.forEach((key, localView) => {\n      for (const batch of batches) {\n        localView = batch.applyToLocalView(key, localView);\n      }\n      results = results.insert(key, localView);\n    });\n    return results;\n  }\n\n  /**\n   * Gets the local view of the documents identified by `keys`.\n   *\n   * If we don't have cached state for a document in `keys`, a NoDocument will\n   * be stored for that key in the resulting set.\n   */\n  getDocuments(\n    transaction: PersistenceTransaction,\n    keys: DocumentKeySet\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.remoteDocumentCache\n      .getEntries(transaction, keys)\n      .next(docs => this.getLocalViewOfDocuments(transaction, docs));\n  }\n\n  /**\n   * Similar to `getDocuments`, but creates the local view from the given\n   * `baseDocs` without retrieving documents from the local store.\n   */\n  getLocalViewOfDocuments(\n    transaction: PersistenceTransaction,\n    baseDocs: NullableMaybeDocumentMap\n  ): PersistencePromise<MaybeDocumentMap> {\n    return this.mutationQueue\n      .getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs)\n      .next(batches => {\n        const docs = this.applyLocalMutationsToDocuments(\n          transaction,\n          baseDocs,\n          batches\n        );\n        let results = maybeDocumentMap();\n        docs.forEach((key, maybeDoc) => {\n          // TODO(http://b/32275378): Don't conflate missing / deleted.\n          if (!maybeDoc) {\n            maybeDoc = new NoDocument(key, SnapshotVersion.min());\n          }\n          results = results.insert(key, maybeDoc);\n        });\n\n        return results;\n      });\n  }\n\n  /**\n   * Performs a query against the local view of all documents.\n   *\n   * @param transaction The persistence transaction.\n   * @param query The query to match documents against.\n   * @param sinceReadTime If not set to SnapshotVersion.min(), return only\n   *     documents that have been read since this snapshot version (exclusive).\n   */\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    if (query.isDocumentQuery()) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (query.isCollectionGroupQuery()) {\n      return this.getDocumentsMatchingCollectionGroupQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(\n        transaction,\n        query,\n        sinceReadTime\n      );\n    }\n  }\n\n  private getDocumentsMatchingDocumentQuery(\n    transaction: PersistenceTransaction,\n    docPath: ResourcePath\n  ): PersistencePromise<DocumentMap> {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(\n      maybeDoc => {\n        let result = documentMap();\n        if (maybeDoc instanceof Document) {\n          result = result.insert(maybeDoc.key, maybeDoc);\n        }\n        return result;\n      }\n    );\n  }\n\n  private getDocumentsMatchingCollectionGroupQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      query.path.isEmpty(),\n      'Currently we only support collection group queries at the root.'\n    );\n    const collectionId = query.collectionGroup!;\n    let results = documentMap();\n    return this.indexManager\n      .getCollectionParents(transaction, collectionId)\n      .next(parents => {\n        // Perform a collection query against each parent that contains the\n        // collectionId and aggregate the results.\n        return PersistencePromise.forEach(parents, (parent: ResourcePath) => {\n          const collectionQuery = query.asCollectionQueryAtPath(\n            parent.child(collectionId)\n          );\n          return this.getDocumentsMatchingCollectionQuery(\n            transaction,\n            collectionQuery,\n            sinceReadTime\n          ).next(r => {\n            r.forEach((key, doc) => {\n              results = results.insert(key, doc);\n            });\n          });\n        }).next(() => results);\n      });\n  }\n\n  private getDocumentsMatchingCollectionQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    // Query the remote documents and overlay mutations.\n    let results: DocumentMap;\n    let mutationBatches: MutationBatch[];\n    return this.remoteDocumentCache\n      .getDocumentsMatchingQuery(transaction, query, sinceReadTime)\n      .next(queryResults => {\n        results = queryResults;\n        return this.mutationQueue.getAllMutationBatchesAffectingQuery(\n          transaction,\n          query\n        );\n      })\n      .next(matchingMutationBatches => {\n        mutationBatches = matchingMutationBatches;\n        // It is possible that a PatchMutation can make a document match a query, even if\n        // the version in the RemoteDocumentCache is not a match yet (waiting for server\n        // to ack). To handle this, we find all document keys affected by the PatchMutations\n        // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,\n        // otherwise those `PatchMutations` will be ignored because no base document can be found,\n        // and lead to missing result for the query.\n        return this.addMissingBaseDocuments(\n          transaction,\n          mutationBatches,\n          results\n        ).next(mergedDocuments => {\n          results = mergedDocuments;\n\n          for (const batch of mutationBatches) {\n            for (const mutation of batch.mutations) {\n              const key = mutation.key;\n              const baseDoc = results.get(key);\n              const mutatedDoc = mutation.applyToLocalView(\n                baseDoc,\n                baseDoc,\n                batch.localWriteTime\n              );\n              if (mutatedDoc instanceof Document) {\n                results = results.insert(key, mutatedDoc);\n              } else {\n                results = results.remove(key);\n              }\n            }\n          }\n        });\n      })\n      .next(() => {\n        // Finally, filter out any documents that don't actually match\n        // the query.\n        results.forEach((key, doc) => {\n          if (!query.matches(doc)) {\n            results = results.remove(key);\n          }\n        });\n\n        return results;\n      });\n  }\n\n  private addMissingBaseDocuments(\n    transaction: PersistenceTransaction,\n    matchingMutationBatches: MutationBatch[],\n    existingDocuments: DocumentMap\n  ): PersistencePromise<DocumentMap> {\n    let missingBaseDocEntriesForPatching = documentKeySet();\n    for (const batch of matchingMutationBatches) {\n      for (const mutation of batch.mutations) {\n        if (\n          mutation instanceof PatchMutation &&\n          existingDocuments.get(mutation.key) === null\n        ) {\n          missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(\n            mutation.key\n          );\n        }\n      }\n    }\n\n    let mergedDocuments = existingDocuments;\n    return this.remoteDocumentCache\n      .getEntries(transaction, missingBaseDocEntriesForPatching)\n      .next(missingBaseDocs => {\n        missingBaseDocs.forEach((key, doc) => {\n          if (doc !== null && doc instanceof Document) {\n            mergedDocuments = mergedDocuments.insert(key, doc);\n          }\n        });\n        return mergedDocuments;\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from '../core/types';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\n\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nexport class LocalViewChanges {\n  constructor(\n    readonly targetId: TargetId,\n    readonly fromCache: boolean,\n    readonly addedKeys: DocumentKeySet,\n    readonly removedKeys: DocumentKeySet\n  ) {}\n\n  static fromSnapshot(\n    targetId: TargetId,\n    viewSnapshot: ViewSnapshot\n  ): LocalViewChanges {\n    let addedKeys = documentKeySet();\n    let removedKeys = documentKeySet();\n\n    for (const docChange of viewSnapshot.docChanges) {\n      switch (docChange.type) {\n        case ChangeType.Added:\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n        case ChangeType.Removed:\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        default:\n        // do nothing\n      }\n    }\n\n    return new LocalViewChanges(\n      targetId,\n      viewSnapshot.fromCache,\n      addedKeys,\n      removedKeys\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequenceNumber } from './types';\n\n/**\n * `SequenceNumberSyncer` defines the methods required to keep multiple instances of a\n * `ListenSequence` in sync.\n */\nexport interface SequenceNumberSyncer {\n  // Notify the syncer that a new sequence number has been used.\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n  // Setting this property allows the syncer to notify when a sequence number has been used, and\n  // and lets the ListenSequence adjust its internal previous value accordingly.\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n}\n\n/**\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\n * exceed. All subsequent calls to next will return increasing values. If provided with a\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\n * well as write out sequence numbers that it produces via `next()`.\n */\nexport class ListenSequence {\n  static readonly INVALID: ListenSequenceNumber = -1;\n\n  private writeNewSequenceNumber?: (\n    newSequenceNumber: ListenSequenceNumber\n  ) => void;\n\n  constructor(\n    private previousValue: ListenSequenceNumber,\n    sequenceNumberSyncer?: SequenceNumberSyncer\n  ) {\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber =>\n        this.setPreviousValue(sequenceNumber);\n      this.writeNewSequenceNumber = sequenceNumber =>\n        sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n    }\n  }\n\n  private setPreviousValue(\n    externalPreviousValue: ListenSequenceNumber\n  ): ListenSequenceNumber {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  }\n\n  next(): ListenSequenceNumber {\n    const nextValue = ++this.previousValue;\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n    return nextValue;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\nexport interface Rejecter {\n  (reason?: Error): void;\n}\n\nexport class Deferred<R = void> {\n  promise: Promise<R>;\n  // Assigned synchronously in constructor by Promise constructor callback.\n  resolve!: Resolver<R>;\n  reject!: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and a function from a value to a Promise. The function is run on each\n * value sequentially, waiting for the previous promise to resolve before starting the next one.\n * The returned promise resolves once the function has been run on all values.\n */\nexport function sequence<T>(\n  values: T[],\n  fn: (value: T) => Promise<void>\n): Promise<void> {\n  let p = Promise.resolve();\n  for (const value of values) {\n    p = p.then(() => fn(value));\n  }\n  return p;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { logDebug } from '../util/log';\n\nconst LOG_TAG = 'ExponentialBackoff';\n\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nexport class ExponentialBackoff {\n  private currentBaseMs: number = 0;\n  private timerPromise: DelayedOperation<void> | null = null;\n  /** The last backoff attempt, as epoch milliseconds. */\n  private lastAttemptTime = Date.now();\n\n  constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    private readonly queue: AsyncQueue,\n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    private readonly timerId: TimerId,\n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    private readonly initialDelayMs: number = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */\n    private readonly backoffFactor: number = DEFAULT_BACKOFF_FACTOR,\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */\n    private readonly maxDelayMs: number = DEFAULT_BACKOFF_MAX_DELAY_MS\n  ) {\n    this.reset();\n  }\n\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset(): void {\n    this.currentBaseMs = 0;\n  }\n\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax(): void {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op: () => Promise<void>): void {\n    // Cancel any pending backoff operation.\n    this.cancel();\n\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(\n      this.currentBaseMs + this.jitterDelayMs()\n    );\n\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(\n      0,\n      desiredDelayWithJitterMs - delaySoFarMs\n    );\n\n    if (remainingDelayMs > 0) {\n      logDebug(\n        LOG_TAG,\n        `Backing off for ${remainingDelayMs} ms ` +\n          `(base delay: ${this.currentBaseMs} ms, ` +\n          `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\n          `last attempt: ${delaySoFarMs} ms ago)`\n      );\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(\n      this.timerId,\n      remainingDelayMs,\n      () => {\n        this.lastAttemptTime = Date.now();\n        return op();\n      }\n    );\n\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n\n  skipBackoff(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  }\n\n  cancel(): void {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  private jitterDelayMs(): number {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { fail, hardAssert } from '../util/assert';\n\n/**\n * Helpers for dealing with resource paths stored in IndexedDB.\n *\n * Resource paths in their canonical string form do not sort as the server\n * sorts them. Specifically the server splits paths into segments first and then\n * sorts, putting end-of-segment before any character. In a UTF-8 string\n * encoding the slash ('/') that denotes the end-of-segment naturally comes\n * after other characters so the intent here is to encode the path delimiters in\n * such a way that the resulting strings sort naturally.\n *\n * Resource paths are also used for prefix scans so it's important to\n * distinguish whole segments from any longer segments of which they might be a\n * prefix. For example, it's important to make it possible to scan documents in\n * a collection \"foo\" without encountering documents in a collection \"foobar\".\n *\n * Separate from the concerns about resource path ordering and separation,\n * On Android, SQLite imposes additional restrictions since it does not handle\n * keys with embedded NUL bytes particularly well. Rather than change the\n * implementation we keep the encoding identical to keep the ports similar.\n *\n * Taken together this means resource paths when encoded for storage in\n * IndexedDB have the following characteristics:\n *\n *   * Segment separators (\"/\") sort before everything else.\n *   * All paths have a trailing separator.\n *   * NUL bytes do not exist in the output, since IndexedDB doesn't treat them\n * well.\n *\n * Therefore resource paths are encoded into string form using the following\n * rules:\n *\n *   * '\\x01' is used as an escape character.\n *   * Path separators are encoded as \"\\x01\\x01\"\n *   * NUL bytes are encoded as \"\\x01\\x10\"\n *   * '\\x01' is encoded as \"\\x01\\x11\"\n *\n * This encoding leaves some room between path separators and the NUL byte\n * just in case we decide to support integer document ids after all.\n *\n * Note that characters treated specially by the backend ('.', '/', and '~')\n * are not treated specially here. This class assumes that any unescaping of\n * resource path strings into actual ResourcePath objects will handle these\n * characters there.\n */\nexport type EncodedResourcePath = string;\n\nconst escapeChar = '\\u0001';\nconst encodedSeparatorChar = '\\u0001';\nconst encodedNul = '\\u0010';\nconst encodedEscape = '\\u0011';\n\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nexport function encodeResourcePath(path: ResourcePath): EncodedResourcePath {\n  let result = '';\n  for (let i = 0; i < path.length; i++) {\n    if (result.length > 0) {\n      result = encodeSeparator(result);\n    }\n    result = encodeSegment(path.get(i), result);\n  }\n  return encodeSeparator(result);\n}\n\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment: string, resultBuf: string): string {\n  let result = resultBuf;\n  const length = segment.length;\n  for (let i = 0; i < length; i++) {\n    const c = segment.charAt(i);\n    switch (c) {\n      case '\\0':\n        result += escapeChar + encodedNul;\n        break;\n      case escapeChar:\n        result += escapeChar + encodedEscape;\n        break;\n      default:\n        result += c;\n    }\n  }\n  return result;\n}\n\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result: string): string {\n  return result + escapeChar + encodedSeparatorChar;\n}\n\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nexport function decodeResourcePath(path: EncodedResourcePath): ResourcePath {\n  // Event the empty path must encode as a path of at least length 2. A path\n  // with exactly 2 must be the empty path.\n  const length = path.length;\n  hardAssert(length >= 2, 'Invalid path ' + path);\n  if (length === 2) {\n    hardAssert(\n      path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar,\n      'Non-empty path ' + path + ' had length 2'\n    );\n    return ResourcePath.EMPTY_PATH;\n  }\n\n  // Escape characters cannot exist past the second-to-last position in the\n  // source value.\n  const lastReasonableEscapeIndex = length - 2;\n\n  const segments: string[] = [];\n  let segmentBuilder = '';\n\n  for (let start = 0; start < length; ) {\n    // The last two characters of a valid encoded path must be a separator, so\n    // there must be an end to this segment.\n    const end = path.indexOf(escapeChar, start);\n    if (end < 0 || end > lastReasonableEscapeIndex) {\n      fail('Invalid encoded resource path: \"' + path + '\"');\n    }\n\n    const next = path.charAt(end + 1);\n    switch (next) {\n      case encodedSeparatorChar:\n        const currentPiece = path.substring(start, end);\n        let segment;\n        if (segmentBuilder.length === 0) {\n          // Avoid copying for the common case of a segment that excludes \\0\n          // and \\001\n          segment = currentPiece;\n        } else {\n          segmentBuilder += currentPiece;\n          segment = segmentBuilder;\n          segmentBuilder = '';\n        }\n        segments.push(segment);\n        break;\n      case encodedNul:\n        segmentBuilder += path.substring(start, end);\n        segmentBuilder += '\\0';\n        break;\n      case encodedEscape:\n        // The escape character can be used in the output to encode itself.\n        segmentBuilder += path.substring(start, end + 1);\n        break;\n      default:\n        fail('Invalid encoded resource path: \"' + path + '\"');\n    }\n\n    start = end + 2;\n  }\n\n  return new ResourcePath(segments);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { SortedSet } from '../util/sorted_set';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * An in-memory implementation of IndexManager.\n */\nexport class MemoryIndexManager implements IndexManager {\n  private collectionParentIndex = new MemoryCollectionParentIndex();\n\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    return PersistencePromise.resolve(\n      this.collectionParentIndex.getEntries(collectionId)\n    );\n  }\n}\n\n/**\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\n * in indexeddb_schema.ts\n */\nexport class MemoryCollectionParentIndex {\n  private index = {} as {\n    [collectionId: string]: SortedSet<ResourcePath>;\n  };\n\n  // Returns false if the entry already existed.\n  add(collectionPath: ResourcePath): boolean {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    const added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  }\n\n  has(collectionPath: ResourcePath): boolean {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  }\n\n  getEntries(collectionId: string): ResourcePath[] {\n    const parentPaths =\n      this.index[collectionId] ||\n      new SortedSet<ResourcePath>(ResourcePath.comparator);\n    return parentPaths.toArray();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourcePath } from '../model/path';\nimport { debugAssert } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport {\n  decodeResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport { IndexManager } from './index_manager';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { DbCollectionParent, DbCollectionParentKey } from './indexeddb_schema';\nimport { MemoryCollectionParentIndex } from './memory_index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbStore } from './simple_db';\n\n/**\n * A persisted implementation of IndexManager.\n */\nexport class IndexedDbIndexManager implements IndexManager {\n  /**\n   * An in-memory copy of the index entries we've already written since the SDK\n   * launched. Used to avoid re-writing the same entry repeatedly.\n   *\n   * This is *NOT* a complete cache of what's in persistence and so can never be used to\n   * satisfy reads.\n   */\n  private collectionParentsCache = new MemoryCollectionParentIndex();\n\n  /**\n   * Adds a new entry to the collection parent index.\n   *\n   * Repeated calls for the same collectionPath should be avoided within a\n   * transaction as IndexedDbIndexManager only caches writes once a transaction\n   * has been committed.\n   */\n  addToCollectionParentIndex(\n    transaction: PersistenceTransaction,\n    collectionPath: ResourcePath\n  ): PersistencePromise<void> {\n    debugAssert(collectionPath.length % 2 === 1, 'Expected a collection path.');\n    if (!this.collectionParentsCache.has(collectionPath)) {\n      const collectionId = collectionPath.lastSegment();\n      const parentPath = collectionPath.popLast();\n\n      transaction.addOnCommittedListener(() => {\n        // Add the collection to the in memory cache only if the transaction was\n        // successfully committed.\n        this.collectionParentsCache.add(collectionPath);\n      });\n\n      const collectionParent: DbCollectionParent = {\n        collectionId,\n        parent: encodeResourcePath(parentPath)\n      };\n      return collectionParentsStore(transaction).put(collectionParent);\n    }\n    return PersistencePromise.resolve();\n  }\n\n  getCollectionParents(\n    transaction: PersistenceTransaction,\n    collectionId: string\n  ): PersistencePromise<ResourcePath[]> {\n    const parentPaths = [] as ResourcePath[];\n    const range = IDBKeyRange.bound(\n      [collectionId, ''],\n      [immediateSuccessor(collectionId), ''],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    return collectionParentsStore(transaction)\n      .loadAll(range)\n      .next(entries => {\n        for (const entry of entries) {\n          // This collectionId guard shouldn't be necessary (and isn't as long\n          // as we're running in a real browser), but there's a bug in\n          // indexeddbshim that breaks our range in our tests running in node:\n          // https://github.com/axemclion/IndexedDBShim/issues/334\n          if (entry.collectionId !== collectionId) {\n            break;\n          }\n          parentPaths.push(decodeResourcePath(entry.parent));\n        }\n        return parentPaths;\n      });\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the collectionParents\n * document store.\n */\nfunction collectionParentsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbCollectionParentKey, DbCollectionParent> {\n  return IndexedDbPersistence.getStore<\n    DbCollectionParentKey,\n    DbCollectionParent\n  >(txn, DbCollectionParent.store);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  Document,\n  MaybeDocument,\n  NoDocument,\n  UnknownDocument\n} from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { MutationBatch } from '../model/mutation_batch';\nimport * as api from '../protos/firestore_proto_api';\nimport {\n  fromDocument,\n  fromDocumentsTarget,\n  fromMutation,\n  fromQueryTarget,\n  JsonProtoSerializer,\n  toDocument,\n  toDocumentsTarget,\n  toMutation,\n  toQueryTarget\n} from '../remote/serializer';\nimport { debugAssert, fail } from '../util/assert';\nimport { ByteString } from '../util/byte_string';\nimport { canonifyTarget, isDocumentTarget, Target } from '../core/target';\nimport {\n  DbMutationBatch,\n  DbNoDocument,\n  DbQuery,\n  DbRemoteDocument,\n  DbTarget,\n  DbTimestamp,\n  DbTimestampKey,\n  DbUnknownDocument\n} from './indexeddb_schema';\nimport { TargetData, TargetPurpose } from './target_data';\n\n/** Serializer for values stored in the LocalStore. */\nexport class LocalSerializer {\n  constructor(readonly remoteSerializer: JsonProtoSerializer) {}\n}\n\n/** Decodes a remote document from storage locally to a Document. */\nexport function fromDbRemoteDocument(\n  localSerializer: LocalSerializer,\n  remoteDoc: DbRemoteDocument\n): MaybeDocument {\n  if (remoteDoc.document) {\n    return fromDocument(\n      localSerializer.remoteSerializer,\n      remoteDoc.document,\n      !!remoteDoc.hasCommittedMutations\n    );\n  } else if (remoteDoc.noDocument) {\n    const key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n    const version = fromDbTimestamp(remoteDoc.noDocument.readTime);\n    return new NoDocument(key, version, {\n      hasCommittedMutations: !!remoteDoc.hasCommittedMutations\n    });\n  } else if (remoteDoc.unknownDocument) {\n    const key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\n    const version = fromDbTimestamp(remoteDoc.unknownDocument.version);\n    return new UnknownDocument(key, version);\n  } else {\n    return fail('Unexpected DbRemoteDocument');\n  }\n}\n\n/** Encodes a document for storage locally. */\nexport function toDbRemoteDocument(\n  localSerializer: LocalSerializer,\n  maybeDoc: MaybeDocument,\n  readTime: SnapshotVersion\n): DbRemoteDocument {\n  const dbReadTime = toDbTimestampKey(readTime);\n  const parentPath = maybeDoc.key.path.popLast().toArray();\n  if (maybeDoc instanceof Document) {\n    const doc = toDocument(localSerializer.remoteSerializer, maybeDoc);\n    const hasCommittedMutations = maybeDoc.hasCommittedMutations;\n    return new DbRemoteDocument(\n      /* unknownDocument= */ null,\n      /* noDocument= */ null,\n      doc,\n      hasCommittedMutations,\n      dbReadTime,\n      parentPath\n    );\n  } else if (maybeDoc instanceof NoDocument) {\n    const path = maybeDoc.key.path.toArray();\n    const readTime = toDbTimestamp(maybeDoc.version);\n    const hasCommittedMutations = maybeDoc.hasCommittedMutations;\n    return new DbRemoteDocument(\n      /* unknownDocument= */ null,\n      new DbNoDocument(path, readTime),\n      /* document= */ null,\n      hasCommittedMutations,\n      dbReadTime,\n      parentPath\n    );\n  } else if (maybeDoc instanceof UnknownDocument) {\n    const path = maybeDoc.key.path.toArray();\n    const readTime = toDbTimestamp(maybeDoc.version);\n    return new DbRemoteDocument(\n      new DbUnknownDocument(path, readTime),\n      /* noDocument= */ null,\n      /* document= */ null,\n      /* hasCommittedMutations= */ true,\n      dbReadTime,\n      parentPath\n    );\n  } else {\n    return fail('Unexpected MaybeDocument');\n  }\n}\n\nexport function toDbTimestampKey(\n  snapshotVersion: SnapshotVersion\n): DbTimestampKey {\n  const timestamp = snapshotVersion.toTimestamp();\n  return [timestamp.seconds, timestamp.nanoseconds];\n}\n\nexport function fromDbTimestampKey(\n  dbTimestampKey: DbTimestampKey\n): SnapshotVersion {\n  const timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\n\nfunction toDbTimestamp(snapshotVersion: SnapshotVersion): DbTimestamp {\n  const timestamp = snapshotVersion.toTimestamp();\n  return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);\n}\n\nfunction fromDbTimestamp(dbTimestamp: DbTimestamp): SnapshotVersion {\n  const timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\n\n/** Encodes a batch of mutations into a DbMutationBatch for local storage. */\nexport function toDbMutationBatch(\n  localSerializer: LocalSerializer,\n  userId: string,\n  batch: MutationBatch\n): DbMutationBatch {\n  const serializedBaseMutations = batch.baseMutations.map(m =>\n    toMutation(localSerializer.remoteSerializer, m)\n  );\n  const serializedMutations = batch.mutations.map(m =>\n    toMutation(localSerializer.remoteSerializer, m)\n  );\n  return new DbMutationBatch(\n    userId,\n    batch.batchId,\n    batch.localWriteTime.toMillis(),\n    serializedBaseMutations,\n    serializedMutations\n  );\n}\n\n/** Decodes a DbMutationBatch into a MutationBatch */\nexport function fromDbMutationBatch(\n  localSerializer: LocalSerializer,\n  dbBatch: DbMutationBatch\n): MutationBatch {\n  const baseMutations = (dbBatch.baseMutations || []).map(m =>\n    fromMutation(localSerializer.remoteSerializer, m)\n  );\n  const mutations = dbBatch.mutations.map(m =>\n    fromMutation(localSerializer.remoteSerializer, m)\n  );\n  const timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);\n  return new MutationBatch(\n    dbBatch.batchId,\n    timestamp,\n    baseMutations,\n    mutations\n  );\n}\n\n/** Decodes a DbTarget into TargetData */\nexport function fromDbTarget(dbTarget: DbTarget): TargetData {\n  const version = fromDbTimestamp(dbTarget.readTime);\n  const lastLimboFreeSnapshotVersion =\n    dbTarget.lastLimboFreeSnapshotVersion !== undefined\n      ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion)\n      : SnapshotVersion.min();\n\n  let target: Target;\n  if (isDocumentQuery(dbTarget.query)) {\n    target = fromDocumentsTarget(dbTarget.query);\n  } else {\n    target = fromQueryTarget(dbTarget.query);\n  }\n  return new TargetData(\n    target,\n    dbTarget.targetId,\n    TargetPurpose.Listen,\n    dbTarget.lastListenSequenceNumber,\n    version,\n    lastLimboFreeSnapshotVersion,\n    ByteString.fromBase64String(dbTarget.resumeToken)\n  );\n}\n\n/** Encodes TargetData into a DbTarget for storage locally. */\nexport function toDbTarget(\n  localSerializer: LocalSerializer,\n  targetData: TargetData\n): DbTarget {\n  debugAssert(\n    TargetPurpose.Listen === targetData.purpose,\n    'Only queries with purpose ' +\n      TargetPurpose.Listen +\n      ' may be stored, got ' +\n      targetData.purpose\n  );\n  const dbTimestamp = toDbTimestamp(targetData.snapshotVersion);\n  const dbLastLimboFreeTimestamp = toDbTimestamp(\n    targetData.lastLimboFreeSnapshotVersion\n  );\n  let queryProto: DbQuery;\n  if (isDocumentTarget(targetData.target)) {\n    queryProto = toDocumentsTarget(\n      localSerializer.remoteSerializer,\n      targetData.target\n    );\n  } else {\n    queryProto = toQueryTarget(\n      localSerializer.remoteSerializer,\n      targetData.target\n    );\n  }\n\n  // We can't store the resumeToken as a ByteString in IndexedDb, so we\n  // convert it to a base64 string for storage.\n  const resumeToken = targetData.resumeToken.toBase64();\n\n  // lastListenSequenceNumber is always 0 until we do real GC.\n  return new DbTarget(\n    targetData.targetId,\n    canonifyTarget(targetData.target),\n    dbTimestamp,\n    resumeToken,\n    targetData.sequenceNumber,\n    dbLastLimboFreeTimestamp,\n    queryProto\n  );\n}\n\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery: DbQuery): dbQuery is api.DocumentsTarget {\n  return (dbQuery as api.DocumentsTarget).documents !== undefined;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntries,\n  DocumentSizeEntry,\n  MaybeDocumentMap,\n  maybeDocumentMap,\n  nullableMaybeDocumentMap,\n  NullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { IndexManager } from './index_manager';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport {\n  DbRemoteDocument,\n  DbRemoteDocumentGlobal,\n  DbRemoteDocumentGlobalKey,\n  DbRemoteDocumentKey\n} from './indexeddb_schema';\nimport {\n  fromDbRemoteDocument,\n  fromDbTimestampKey,\n  LocalSerializer,\n  toDbRemoteDocument,\n  toDbTimestampKey\n} from './local_serializer';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { IterateOptions, SimpleDbStore } from './simple_db';\nimport { ObjectMap } from '../util/obj_map';\n\nexport class IndexedDbRemoteDocumentCache implements RemoteDocumentCache {\n  /**\n   * @param {LocalSerializer} serializer The document serializer.\n   * @param {IndexManager} indexManager The query indexes that need to be maintained.\n   */\n  constructor(\n    readonly serializer: LocalSerializer,\n    private readonly indexManager: IndexManager\n  ) {}\n\n  /**\n   * Adds the supplied entries to the cache.\n   *\n   * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\n   */\n  private addEntry(\n    transaction: PersistenceTransaction,\n    key: DocumentKey,\n    doc: DbRemoteDocument\n  ): PersistencePromise<void> {\n    const documentStore = remoteDocumentsStore(transaction);\n    return documentStore.put(dbKey(key), doc);\n  }\n\n  /**\n   * Removes a document from the cache.\n   *\n   * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\n   */\n  private removeEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<void> {\n    const store = remoteDocumentsStore(transaction);\n    const key = dbKey(documentKey);\n    return store.delete(key);\n  }\n\n  /**\n   * Updates the current cache size.\n   *\n   * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the\n   * cache's metadata.\n   */\n  private updateMetadata(\n    transaction: PersistenceTransaction,\n    sizeDelta: number\n  ): PersistencePromise<void> {\n    return this.getMetadata(transaction).next(metadata => {\n      metadata.byteSize += sizeDelta;\n      return this.setMetadata(transaction, metadata);\n    });\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return remoteDocumentsStore(transaction)\n      .get(dbKey(documentKey))\n      .next(dbRemoteDoc => {\n        return this.maybeDecodeDocument(dbRemoteDoc);\n      });\n  }\n\n  /**\n   * Looks up an entry in the cache.\n   *\n   * @param documentKey The key of the entry to look up.\n   * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.\n   */\n  getSizedEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<DocumentSizeEntry | null> {\n    return remoteDocumentsStore(transaction)\n      .get(dbKey(documentKey))\n      .next(dbRemoteDoc => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        return doc\n          ? {\n              maybeDocument: doc,\n              size: dbDocumentSize(dbRemoteDoc!)\n            }\n          : null;\n      });\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    return this.forEachDbEntry(\n      transaction,\n      documentKeys,\n      (key, dbRemoteDoc) => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        results = results.insert(key, doc);\n      }\n    ).next(() => results);\n  }\n\n  /**\n   * Looks up several entries in the cache.\n   *\n   * @param documentKeys The set of keys entries to look up.\n   * @return A map of MaybeDocuments indexed by key (if a document cannot be\n   *     found, the key will be mapped to null) and a map of sizes indexed by\n   *     key (zero if the key cannot be found).\n   */\n  getSizedEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<DocumentSizeEntries> {\n    let results = nullableMaybeDocumentMap();\n    let sizeMap = new SortedMap<DocumentKey, number>(DocumentKey.comparator);\n    return this.forEachDbEntry(\n      transaction,\n      documentKeys,\n      (key, dbRemoteDoc) => {\n        const doc = this.maybeDecodeDocument(dbRemoteDoc);\n        if (doc) {\n          results = results.insert(key, doc);\n          sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc!));\n        } else {\n          results = results.insert(key, null);\n          sizeMap = sizeMap.insert(key, 0);\n        }\n      }\n    ).next(() => {\n      return { maybeDocuments: results, sizeMap };\n    });\n  }\n\n  private forEachDbEntry(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet,\n    callback: (key: DocumentKey, doc: DbRemoteDocument | null) => void\n  ): PersistencePromise<void> {\n    if (documentKeys.isEmpty()) {\n      return PersistencePromise.resolve();\n    }\n\n    const range = IDBKeyRange.bound(\n      documentKeys.first()!.path.toArray(),\n      documentKeys.last()!.path.toArray()\n    );\n    const keyIter = documentKeys.getIterator();\n    let nextKey: DocumentKey | null = keyIter.getNext();\n\n    return remoteDocumentsStore(transaction)\n      .iterate({ range }, (potentialKeyRaw, dbRemoteDoc, control) => {\n        const potentialKey = DocumentKey.fromSegments(potentialKeyRaw);\n\n        // Go through keys not found in cache.\n        while (nextKey && DocumentKey.comparator(nextKey!, potentialKey) < 0) {\n          callback(nextKey!, null);\n          nextKey = keyIter.getNext();\n        }\n\n        if (nextKey && nextKey!.isEqual(potentialKey)) {\n          // Key found in cache.\n          callback(nextKey!, dbRemoteDoc);\n          nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n        }\n\n        // Skip to the next key (if there is one).\n        if (nextKey) {\n          control.skip(nextKey!.path.toArray());\n        } else {\n          control.done();\n        }\n      })\n      .next(() => {\n        // The rest of the keys are not in the cache. One case where `iterate`\n        // above won't go through them is when the cache is empty.\n        while (nextKey) {\n          callback(nextKey!, null);\n          nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n        }\n      });\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    const immediateChildrenPathLength = query.path.length + 1;\n\n    const iterationOptions: IterateOptions = {};\n    if (sinceReadTime.isEqual(SnapshotVersion.min())) {\n      // Documents are ordered by key, so we can use a prefix scan to narrow\n      // down the documents we need to match the query against.\n      const startKey = query.path.toArray();\n      iterationOptions.range = IDBKeyRange.lowerBound(startKey);\n    } else {\n      // Execute an index-free query and filter by read time. This is safe\n      // since all document changes to queries that have a\n      // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.\n      const collectionKey = query.path.toArray();\n      const readTimeKey = toDbTimestampKey(sinceReadTime);\n      iterationOptions.range = IDBKeyRange.lowerBound(\n        [collectionKey, readTimeKey],\n        /* open= */ true\n      );\n      iterationOptions.index = DbRemoteDocument.collectionReadTimeIndex;\n    }\n\n    return remoteDocumentsStore(transaction)\n      .iterate(iterationOptions, (key, dbRemoteDoc, control) => {\n        // The query is actually returning any path that starts with the query\n        // path prefix which may include documents in subcollections. For\n        // example, a query on 'rooms' will return rooms/abc/messages/xyx but we\n        // shouldn't match it. Fix this by discarding rows with document keys\n        // more than one segment longer than the query path.\n        if (key.length !== immediateChildrenPathLength) {\n          return;\n        }\n\n        const maybeDoc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\n        if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n          control.done();\n        } else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n          results = results.insert(maybeDoc.key, maybeDoc);\n        }\n      })\n      .next(() => results);\n  }\n\n  /**\n   * Returns the set of documents that have changed since the specified read\n   * time.\n   */\n  // PORTING NOTE: This is only used for multi-tab synchronization.\n  getNewDocumentChanges(\n    transaction: PersistenceTransaction,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<{\n    changedDocs: MaybeDocumentMap;\n    readTime: SnapshotVersion;\n  }> {\n    let changedDocs = maybeDocumentMap();\n\n    let lastReadTime = toDbTimestampKey(sinceReadTime);\n\n    const documentsStore = remoteDocumentsStore(transaction);\n    const range = IDBKeyRange.lowerBound(lastReadTime, true);\n    return documentsStore\n      .iterate(\n        { index: DbRemoteDocument.readTimeIndex, range },\n        (_, dbRemoteDoc) => {\n          // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses\n          // the documents directly since we want to keep sentinel deletes.\n          const doc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\n          changedDocs = changedDocs.insert(doc.key, doc);\n          lastReadTime = dbRemoteDoc.readTime!;\n        }\n      )\n      .next(() => {\n        return {\n          changedDocs,\n          readTime: fromDbTimestampKey(lastReadTime)\n        };\n      });\n  }\n\n  /**\n   * Returns the read time of the most recently read document in the cache, or\n   * SnapshotVersion.min() if not available.\n   */\n  // PORTING NOTE: This is only used for multi-tab synchronization.\n  getLastReadTime(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    const documentsStore = remoteDocumentsStore(transaction);\n\n    // If there are no existing entries, we return SnapshotVersion.min().\n    let readTime = SnapshotVersion.min();\n\n    return documentsStore\n      .iterate(\n        { index: DbRemoteDocument.readTimeIndex, reverse: true },\n        (key, dbRemoteDoc, control) => {\n          if (dbRemoteDoc.readTime) {\n            readTime = fromDbTimestampKey(dbRemoteDoc.readTime);\n          }\n          control.done();\n        }\n      )\n      .next(() => readTime);\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    return new IndexedDbRemoteDocumentCache.RemoteDocumentChangeBuffer(\n      this,\n      !!options && options.trackRemovals\n    );\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.getMetadata(txn).next(metadata => metadata.byteSize);\n  }\n\n  private getMetadata(\n    txn: PersistenceTransaction\n  ): PersistencePromise<DbRemoteDocumentGlobal> {\n    return documentGlobalStore(txn)\n      .get(DbRemoteDocumentGlobal.key)\n      .next(metadata => {\n        hardAssert(!!metadata, 'Missing document cache metadata');\n        return metadata!;\n      });\n  }\n\n  private setMetadata(\n    txn: PersistenceTransaction,\n    metadata: DbRemoteDocumentGlobal\n  ): PersistencePromise<void> {\n    return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);\n  }\n\n  /**\n   * Decodes `remoteDoc` and returns the document (or null, if the document\n   * corresponds to the format used for sentinel deletes).\n   */\n  private maybeDecodeDocument(\n    dbRemoteDoc: DbRemoteDocument | null\n  ): MaybeDocument | null {\n    if (dbRemoteDoc) {\n      const doc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\n      if (\n        doc instanceof NoDocument &&\n        doc.version.isEqual(SnapshotVersion.min())\n      ) {\n        // The document is a sentinel removal and should only be used in the\n        // `getNewDocumentChanges()`.\n        return null;\n      }\n\n      return doc;\n    }\n    return null;\n  }\n\n  /**\n   * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.\n   *\n   * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size\n   * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb\n   * when we apply the changes.\n   */\n  private static RemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n    // A map of document sizes prior to applying the changes in this buffer.\n    protected documentSizes: ObjectMap<DocumentKey, number> = new ObjectMap(\n      key => key.toString(),\n      (l, r) => l.isEqual(r)\n    );\n\n    /**\n     * @param documentCache The IndexedDbRemoteDocumentCache to apply the changes to.\n     * @param trackRemovals Whether to create sentinel deletes that can be tracked by\n     * `getNewDocumentChanges()`.\n     */\n    constructor(\n      private readonly documentCache: IndexedDbRemoteDocumentCache,\n      private readonly trackRemovals: boolean\n    ) {\n      super();\n    }\n\n    protected applyChanges(\n      transaction: PersistenceTransaction\n    ): PersistencePromise<void> {\n      const promises: Array<PersistencePromise<void>> = [];\n\n      let sizeDelta = 0;\n\n      let collectionParents = new SortedSet<ResourcePath>((l, r) =>\n        primitiveComparator(l.canonicalString(), r.canonicalString())\n      );\n\n      this.changes.forEach((key, maybeDocument) => {\n        const previousSize = this.documentSizes.get(key);\n        debugAssert(\n          previousSize !== undefined,\n          `Cannot modify a document that wasn't read (for ${key})`\n        );\n        if (maybeDocument) {\n          debugAssert(\n            !this.readTime.isEqual(SnapshotVersion.min()),\n            'Cannot add a document with a read time of zero'\n          );\n          const doc = toDbRemoteDocument(\n            this.documentCache.serializer,\n            maybeDocument,\n            this.readTime\n          );\n          collectionParents = collectionParents.add(key.path.popLast());\n\n          const size = dbDocumentSize(doc);\n          sizeDelta += size - previousSize!;\n          promises.push(this.documentCache.addEntry(transaction, key, doc));\n        } else {\n          sizeDelta -= previousSize!;\n          if (this.trackRemovals) {\n            // In order to track removals, we store a \"sentinel delete\" in the\n            // RemoteDocumentCache. This entry is represented by a NoDocument\n            // with a version of 0 and ignored by `maybeDecodeDocument()` but\n            // preserved in `getNewDocumentChanges()`.\n            const deletedDoc = toDbRemoteDocument(\n              this.documentCache.serializer,\n              new NoDocument(key, SnapshotVersion.min()),\n              this.readTime\n            );\n            promises.push(\n              this.documentCache.addEntry(transaction, key, deletedDoc)\n            );\n          } else {\n            promises.push(this.documentCache.removeEntry(transaction, key));\n          }\n        }\n      });\n\n      collectionParents.forEach(parent => {\n        promises.push(\n          this.documentCache.indexManager.addToCollectionParentIndex(\n            transaction,\n            parent\n          )\n        );\n      });\n\n      promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));\n\n      return PersistencePromise.waitFor(promises);\n    }\n\n    protected getFromCache(\n      transaction: PersistenceTransaction,\n      documentKey: DocumentKey\n    ): PersistencePromise<MaybeDocument | null> {\n      // Record the size of everything we load from the cache so we can compute a delta later.\n      return this.documentCache\n        .getSizedEntry(transaction, documentKey)\n        .next(getResult => {\n          if (getResult === null) {\n            this.documentSizes.set(documentKey, 0);\n            return null;\n          } else {\n            this.documentSizes.set(documentKey, getResult.size);\n            return getResult.maybeDocument;\n          }\n        });\n    }\n\n    protected getAllFromCache(\n      transaction: PersistenceTransaction,\n      documentKeys: DocumentKeySet\n    ): PersistencePromise<NullableMaybeDocumentMap> {\n      // Record the size of everything we load from the cache so we can compute\n      // a delta later.\n      return this.documentCache\n        .getSizedEntries(transaction, documentKeys)\n        .next(({ maybeDocuments, sizeMap }) => {\n          // Note: `getAllFromCache` returns two maps instead of a single map from\n          // keys to `DocumentSizeEntry`s. This is to allow returning the\n          // `NullableMaybeDocumentMap` directly, without a conversion.\n          sizeMap.forEach((documentKey, size) => {\n            this.documentSizes.set(documentKey, size);\n          });\n          return maybeDocuments;\n        });\n    }\n  };\n}\n\nfunction documentGlobalStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbRemoteDocumentGlobalKey, DbRemoteDocumentGlobal> {\n  return IndexedDbPersistence.getStore<\n    DbRemoteDocumentGlobalKey,\n    DbRemoteDocumentGlobal\n  >(txn, DbRemoteDocumentGlobal.store);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbRemoteDocumentKey, DbRemoteDocument> {\n  return IndexedDbPersistence.getStore<DbRemoteDocumentKey, DbRemoteDocument>(\n    txn,\n    DbRemoteDocument.store\n  );\n}\n\nfunction dbKey(docKey: DocumentKey): DbRemoteDocumentKey {\n  return docKey.path.toArray();\n}\n\n/**\n * Retrusn an approximate size for the given document.\n */\nexport function dbDocumentSize(doc: DbRemoteDocument): number {\n  let value: unknown;\n  if (doc.document) {\n    value = doc.document;\n  } else if (doc.unknownDocument) {\n    value = doc.unknownDocument;\n  } else if (doc.noDocument) {\n    value = doc.noDocument;\n  } else {\n    throw fail('Unknown remote document type');\n  }\n  return JSON.stringify(value).length;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from './types';\n\n/** Offset to ensure non-overlapping target ids. */\nconst OFFSET = 2;\n\n/**\n * Generates monotonically increasing target IDs for sending targets to the\n * watch stream.\n *\n * The client constructs two generators, one for the target cache, and one for\n * for the sync engine (to generate limbo documents targets). These\n * generators produce non-overlapping IDs (by using even and odd IDs\n * respectively).\n *\n * By separating the target ID space, the query cache can generate target IDs\n * that persist across client restarts, while sync engine can independently\n * generate in-memory target IDs that are transient and can be reused after a\n * restart.\n */\nexport class TargetIdGenerator {\n  constructor(private lastId: number) {}\n\n  next(): TargetId {\n    this.lastId += OFFSET;\n    return this.lastId;\n  }\n\n  static forTargetCache(): TargetIdGenerator {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  }\n\n  static forSyncEngine(): TargetIdGenerator {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet, documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { hardAssert } from '../util/assert';\nimport { immediateSuccessor } from '../util/misc';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport {\n  decodeResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport {\n  IndexedDbLruDelegate,\n  IndexedDbPersistence\n} from './indexeddb_persistence';\nimport {\n  DbTarget,\n  DbTargetDocument,\n  DbTargetDocumentKey,\n  DbTargetGlobal,\n  DbTargetGlobalKey,\n  DbTargetKey\n} from './indexeddb_schema';\nimport { fromDbTarget, LocalSerializer, toDbTarget } from './local_serializer';\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { SimpleDbStore } from './simple_db';\nimport { canonifyTarget, Target, targetEquals } from '../core/target';\n\nexport class IndexedDbTargetCache implements TargetCache {\n  constructor(\n    private readonly referenceDelegate: IndexedDbLruDelegate,\n    private serializer: LocalSerializer\n  ) {}\n\n  // PORTING NOTE: We don't cache global metadata for the target cache, since\n  // some of it (in particular `highestTargetId`) can be modified by secondary\n  // tabs. We could perhaps be more granular (and e.g. still cache\n  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go\n  // to IndexedDb whenever we need to read metadata. We can revisit if it turns\n  // out to have a meaningful performance impact.\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      const targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);\n      metadata.highestTargetId = targetIdGenerator.next();\n      return this.saveMetadata(transaction, metadata).next(\n        () => metadata.highestTargetId\n      );\n    });\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      return SnapshotVersion.fromTimestamp(\n        new Timestamp(\n          metadata.lastRemoteSnapshotVersion.seconds,\n          metadata.lastRemoteSnapshotVersion.nanoseconds\n        )\n      );\n    });\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return this.retrieveMetadata(transaction).next(\n      targetGlobal => targetGlobal.highestListenSequenceNumber\n    );\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      if (lastRemoteSnapshotVersion) {\n        metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();\n      }\n      if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {\n        metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      }\n      return this.saveMetadata(transaction, metadata);\n    });\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.saveTargetData(transaction, targetData).next(() => {\n      return this.retrieveMetadata(transaction).next(metadata => {\n        metadata.targetCount += 1;\n        this.updateMetadataFromTargetData(targetData, metadata);\n        return this.saveMetadata(transaction, metadata);\n      });\n    });\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.saveTargetData(transaction, targetData);\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n      .next(() => targetsStore(transaction).delete(targetData.targetId))\n      .next(() => this.retrieveMetadata(transaction))\n      .next(metadata => {\n        hardAssert(\n          metadata.targetCount > 0,\n          'Removing from an empty target cache'\n        );\n        metadata.targetCount -= 1;\n        return this.saveMetadata(transaction, metadata);\n      });\n  }\n\n  /**\n   * Drops any targets with sequence number less than or equal to the upper bound, excepting those\n   * present in `activeTargetIds`. Document associations for the removed targets are also removed.\n   * Returns the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const promises: Array<PersistencePromise<void>> = [];\n    return targetsStore(txn)\n      .iterate((key, value) => {\n        const targetData = fromDbTarget(value);\n        if (\n          targetData.sequenceNumber <= upperBound &&\n          activeTargetIds.get(targetData.targetId) === null\n        ) {\n          count++;\n          promises.push(this.removeTargetData(txn, targetData));\n        }\n      })\n      .next(() => PersistencePromise.waitFor(promises))\n      .next(() => count);\n  }\n\n  /**\n   * Call provided function with each `TargetData` that we have cached.\n   */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return targetsStore(txn).iterate((key, value) => {\n      const targetData = fromDbTarget(value);\n      f(targetData);\n    });\n  }\n\n  private retrieveMetadata(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<DbTargetGlobal> {\n    return globalTargetStore(transaction)\n      .get(DbTargetGlobal.key)\n      .next(metadata => {\n        hardAssert(metadata !== null, 'Missing metadata row.');\n        return metadata;\n      });\n  }\n\n  private saveMetadata(\n    transaction: PersistenceTransaction,\n    metadata: DbTargetGlobal\n  ): PersistencePromise<void> {\n    return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);\n  }\n\n  private saveTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    return targetsStore(transaction).put(\n      toDbTarget(this.serializer, targetData)\n    );\n  }\n\n  /**\n   * In-place updates the provided metadata to account for values in the given\n   * TargetData. Saving is done separately. Returns true if there were any\n   * changes to the metadata.\n   */\n  private updateMetadataFromTargetData(\n    targetData: TargetData,\n    metadata: DbTargetGlobal\n  ): boolean {\n    let updated = false;\n    if (targetData.targetId > metadata.highestTargetId) {\n      metadata.highestTargetId = targetData.targetId;\n      updated = true;\n    }\n\n    if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {\n      metadata.highestListenSequenceNumber = targetData.sequenceNumber;\n      updated = true;\n    }\n    return updated;\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return this.retrieveMetadata(transaction).next(\n      metadata => metadata.targetCount\n    );\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    // Iterating by the canonicalId may yield more than one result because\n    // canonicalId values are not required to be unique per target. This query\n    // depends on the queryTargets index to be efficient.\n    const canonicalId = canonifyTarget(target);\n    const range = IDBKeyRange.bound(\n      [canonicalId, Number.NEGATIVE_INFINITY],\n      [canonicalId, Number.POSITIVE_INFINITY]\n    );\n    let result: TargetData | null = null;\n    return targetsStore(transaction)\n      .iterate(\n        { range, index: DbTarget.queryTargetsIndexName },\n        (key, value, control) => {\n          const found = fromDbTarget(value);\n          // After finding a potential match, check that the target is\n          // actually equal to the requested target.\n          if (targetEquals(target, found.target)) {\n            result = found;\n            control.done();\n          }\n        }\n      )\n      .next(() => result);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const promises: Array<PersistencePromise<void>> = [];\n    const store = documentTargetStore(txn);\n    keys.forEach(key => {\n      const path = encodeResourcePath(key.path);\n      promises.push(store.put(new DbTargetDocument(targetId, path)));\n      promises.push(this.referenceDelegate.addReference(txn, targetId, key));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const store = documentTargetStore(txn);\n    return PersistencePromise.forEach(keys, (key: DocumentKey) => {\n      const path = encodeResourcePath(key.path);\n      return PersistencePromise.waitFor([\n        store.delete([targetId, path]),\n        this.referenceDelegate.removeReference(txn, targetId, key)\n      ]);\n    });\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    const store = documentTargetStore(txn);\n    const range = IDBKeyRange.bound(\n      [targetId],\n      [targetId + 1],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    return store.delete(range);\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const range = IDBKeyRange.bound(\n      [targetId],\n      [targetId + 1],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    const store = documentTargetStore(txn);\n    let result = documentKeySet();\n\n    return store\n      .iterate({ range, keysOnly: true }, (key, _, control) => {\n        const path = decodeResourcePath(key[1]);\n        const docKey = new DocumentKey(path);\n        result = result.add(docKey);\n      })\n      .next(() => result);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const path = encodeResourcePath(key.path);\n    const range = IDBKeyRange.bound(\n      [path],\n      [immediateSuccessor(path)],\n      /*lowerOpen=*/ false,\n      /*upperOpen=*/ true\n    );\n    let count = 0;\n    return documentTargetStore(txn!)\n      .iterate(\n        {\n          index: DbTargetDocument.documentTargetsIndex,\n          keysOnly: true,\n          range\n        },\n        ([targetId, path], _, control) => {\n          // Having a sentinel row for a document does not count as containing that document;\n          // For the target cache, containing the document means the document is part of some\n          // target.\n          if (targetId !== 0) {\n            count++;\n            control.done();\n          }\n        }\n      )\n      .next(() => count > 0);\n  }\n\n  /**\n   * Looks up a TargetData entry by target ID.\n   *\n   * @param targetId The target ID of the TargetData entry to look up.\n   * @return The cached TargetData entry, or null if the cache has no entry for\n   * the target.\n   */\n  // PORTING NOTE: Multi-tab only.\n  getTargetDataForTarget(\n    transaction: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<TargetData | null> {\n    return targetsStore(transaction)\n      .get(targetId)\n      .next(found => {\n        if (found) {\n          return fromDbTarget(found);\n        } else {\n          return null;\n        }\n      });\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetKey, DbTarget> {\n  return IndexedDbPersistence.getStore<DbTargetKey, DbTarget>(\n    txn,\n    DbTarget.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetGlobalKey, DbTargetGlobal> {\n  return IndexedDbPersistence.getStore<DbTargetGlobalKey, DbTargetGlobal>(\n    txn,\n    DbTargetGlobal.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nexport function documentTargetStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbTargetDocumentKey, DbTargetDocument> {\n  return IndexedDbPersistence.getStore<DbTargetDocumentKey, DbTargetDocument>(\n    txn,\n    DbTargetDocument.store\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { DatabaseInfo } from '../core/database_info';\nimport { ListenSequence, SequenceNumberSyncer } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport {\n  decodeResourcePath,\n  EncodedResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport { IndexedDbIndexManager } from './indexeddb_index_manager';\nimport {\n  IndexedDbMutationQueue,\n  mutationQueuesContainKey\n} from './indexeddb_mutation_queue';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport {\n  ALL_STORES,\n  DbClientMetadata,\n  DbClientMetadataKey,\n  DbPrimaryClient,\n  DbPrimaryClientKey,\n  DbTargetDocument,\n  SCHEMA_VERSION,\n  SchemaConverter\n} from './indexeddb_schema';\nimport {\n  documentTargetStore,\n  IndexedDbTargetCache\n} from './indexeddb_target_cache';\nimport { LocalSerializer } from './local_serializer';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  PRIMARY_LEASE_LOST_ERROR_MSG,\n  PrimaryStateListener,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ClientId } from './shared_client_state';\nimport { TargetData } from './target_data';\nimport {\n  isIndexedDbTransactionError,\n  SimpleDb,\n  SimpleDbStore,\n  SimpleDbTransaction\n} from './simple_db';\nimport { DocumentLike, WindowLike } from '../util/types';\n\nconst LOG_TAG = 'IndexedDbPersistence';\n\n/**\n * Oldest acceptable age in milliseconds for client metadata before the client\n * is considered inactive and its associated data is garbage collected.\n */\nconst MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes\n\n/**\n * Oldest acceptable metadata age for clients that may participate in the\n * primary lease election. Clients that have not updated their client metadata\n * within 5 seconds are not eligible to receive a primary lease.\n */\nconst MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;\n\n/**\n * The interval at which clients will update their metadata, including\n * refreshing their primary lease if held or potentially trying to acquire it if\n * not held.\n *\n * Primary clients may opportunistically refresh their metadata earlier\n * if they're already performing an IndexedDB operation.\n */\nconst CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;\n/** User-facing error when the primary lease is required but not available. */\nconst PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG =\n  'Failed to obtain exclusive access to the persistence layer. ' +\n  'To allow shared access, make sure to invoke ' +\n  '`enablePersistence()` with `synchronizeTabs:true` in all tabs. ' +\n  'If you are using `experimentalForceOwningTab:true`, make sure that only ' +\n  'one tab has persistence enabled at any given time.';\nconst UNSUPPORTED_PLATFORM_ERROR_MSG =\n  'This platform is either missing' +\n  ' IndexedDB or is known to have an incomplete implementation. Offline' +\n  ' persistence has been disabled.';\n\n// The format of the LocalStorage key that stores zombied client is:\n//     firestore_zombie_<persistence_prefix>_<instance_key>\nconst ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';\n\nexport class IndexedDbTransaction extends PersistenceTransaction {\n  constructor(\n    readonly simpleDbTransaction: SimpleDbTransaction,\n    readonly currentSequenceNumber: ListenSequenceNumber\n  ) {\n    super();\n  }\n}\n\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * On Web only, the Firestore SDKs support shared access to its persistence\n * layer. This allows multiple browser tabs to read and write to IndexedDb and\n * to synchronize state even without network connectivity. Shared access is\n * currently optional and not enabled unless all clients invoke\n * `enablePersistence()` with `{synchronizeTabs:true}`.\n *\n * In multi-tab mode, if multiple clients are active at the same time, the SDK\n * will designate one client as the “primary client”. An effort is made to pick\n * a visible, network-connected and active client, and this client is\n * responsible for letting other clients know about its presence. The primary\n * client writes a unique client-generated identifier (the client ID) to\n * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to\n * update this entry, another client can acquire the lease and take over as\n * primary.\n *\n * Some persistence operations in the SDK are designated as primary-client only\n * operations. This includes the acknowledgment of mutations and all updates of\n * remote documents. The effects of these operations are written to persistence\n * and then broadcast to other tabs via LocalStorage (see\n * `WebStorageSharedClientState`), which then refresh their state from\n * persistence.\n *\n * Similarly, the primary client listens to notifications sent by secondary\n * clients to discover persistence changes written by secondary clients, such as\n * the addition of new mutations and query targets.\n *\n * If multi-tab is not enabled and another tab already obtained the primary\n * lease, IndexedDbPersistence enters a failed state and all subsequent\n * operations will automatically fail.\n *\n * Additionally, there is an optimization so that when a tab is closed, the\n * primary lease is released immediately (this is especially important to make\n * sure that a refreshed tab is able to immediately re-acquire the primary\n * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload\n * since it is an asynchronous API. So in addition to attempting to give up the\n * lease, the leaseholder writes its client ID to a \"zombiedClient\" entry in\n * LocalStorage which acts as an indicator that another tab should go ahead and\n * take the primary lease immediately regardless of the current lease timestamp.\n *\n * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no\n * longer optional.\n */\nexport class IndexedDbPersistence implements Persistence {\n  static getStore<Key extends IDBValidKey, Value>(\n    txn: PersistenceTransaction,\n    store: string\n  ): SimpleDbStore<Key, Value> {\n    if (txn instanceof IndexedDbTransaction) {\n      return SimpleDb.getStore<Key, Value>(txn.simpleDbTransaction, store);\n    } else {\n      throw fail(\n        'IndexedDbPersistence must use instances of IndexedDbTransaction'\n      );\n    }\n  }\n\n  /**\n   * The name of the main (and currently only) IndexedDB database. this name is\n   * appended to the prefix provided to the IndexedDbPersistence constructor.\n   */\n  static MAIN_DATABASE = 'main';\n\n  // Technically `simpleDb` should be `| undefined` because it is\n  // initialized asynchronously by start(), but that would be more misleading\n  // than useful.\n  private simpleDb!: SimpleDb;\n\n  private listenSequence: ListenSequence | null = null;\n\n  private _started = false;\n  private isPrimary = false;\n  private networkEnabled = true;\n  private dbName: string;\n\n  /** Our window.unload handler, if registered. */\n  private windowUnloadHandler: (() => void) | null = null;\n  private inForeground = false;\n\n  private serializer: LocalSerializer;\n\n  /** Our 'visibilitychange' listener if registered. */\n  private documentVisibilityHandler: ((e?: Event) => void) | null = null;\n\n  /** The client metadata refresh task. */\n  private clientMetadataRefresher: DelayedOperation<void> | null = null;\n\n  /** The last time we garbage collected the client metadata object store. */\n  private lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;\n\n  /** A listener to notify on primary state changes. */\n  private primaryStateListener: PrimaryStateListener = _ => Promise.resolve();\n\n  private readonly targetCache: IndexedDbTargetCache;\n  private readonly indexManager: IndexedDbIndexManager;\n  private readonly remoteDocumentCache: IndexedDbRemoteDocumentCache;\n  private readonly webStorage: Storage | null;\n  readonly referenceDelegate: IndexedDbLruDelegate;\n\n  constructor(\n    /**\n     * Whether to synchronize the in-memory state of multiple tabs and share\n     * access to local persistence.\n     */\n    private readonly allowTabSynchronization: boolean,\n\n    private readonly persistenceKey: string,\n    private readonly clientId: ClientId,\n    lruParams: LruParams,\n    private readonly queue: AsyncQueue,\n    private readonly window: WindowLike | null,\n    private readonly document: DocumentLike | null,\n    serializer: JsonProtoSerializer,\n    private readonly sequenceNumberSyncer: SequenceNumberSyncer,\n\n    /**\n     * If set to true, forcefully obtains database access. Existing tabs will\n     * no longer be able to access IndexedDB.\n     */\n    private readonly forceOwningTab: boolean\n  ) {\n    if (!IndexedDbPersistence.isAvailable()) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        UNSUPPORTED_PLATFORM_ERROR_MSG\n      );\n    }\n\n    this.referenceDelegate = new IndexedDbLruDelegate(this, lruParams);\n    this.dbName = persistenceKey + IndexedDbPersistence.MAIN_DATABASE;\n    this.serializer = new LocalSerializer(serializer);\n    this.targetCache = new IndexedDbTargetCache(\n      this.referenceDelegate,\n      this.serializer\n    );\n    this.indexManager = new IndexedDbIndexManager();\n    this.remoteDocumentCache = new IndexedDbRemoteDocumentCache(\n      this.serializer,\n      this.indexManager\n    );\n    if (this.window && this.window.localStorage) {\n      this.webStorage = this.window.localStorage;\n    } else {\n      this.webStorage = null;\n      if (forceOwningTab === false) {\n        logError(\n          LOG_TAG,\n          'LocalStorage is unavailable. As a result, persistence may not work ' +\n            'reliably. In particular enablePersistence() could fail immediately ' +\n            'after refreshing the page.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Attempt to start IndexedDb persistence.\n   *\n   * @return {Promise<void>} Whether persistence was enabled.\n   */\n  start(): Promise<void> {\n    debugAssert(!this.started, 'IndexedDbPersistence double-started!');\n    debugAssert(this.window !== null, \"Expected 'window' to be defined\");\n\n    return SimpleDb.openOrCreate(\n      this.dbName,\n      SCHEMA_VERSION,\n      new SchemaConverter(this.serializer)\n    )\n      .then(db => {\n        this.simpleDb = db;\n        // NOTE: This is expected to fail sometimes (in the case of another tab already\n        // having the persistence lock), so it's the first thing we should do.\n        return this.updateClientMetadataAndTryBecomePrimary();\n      })\n      .then(() => {\n        if (!this.isPrimary && !this.allowTabSynchronization) {\n          // Fail `start()` if `synchronizeTabs` is disabled and we cannot\n          // obtain the primary lease.\n          throw new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n          );\n        }\n        this.attachVisibilityHandler();\n        this.attachWindowUnloadHook();\n\n        this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\n\n        return this.runTransaction(\n          'getHighestListenSequenceNumber',\n          'readonly',\n          txn => this.targetCache.getHighestSequenceNumber(txn)\n        );\n      })\n      .then(highestListenSequenceNumber => {\n        this.listenSequence = new ListenSequence(\n          highestListenSequenceNumber,\n          this.sequenceNumberSyncer\n        );\n      })\n      .then(() => {\n        this._started = true;\n      })\n      .catch(reason => {\n        this.simpleDb && this.simpleDb.close();\n        return Promise.reject(reason);\n      });\n  }\n\n  /**\n   * Registers a listener that gets called when the primary state of the\n   * instance changes. Upon registering, this listener is invoked immediately\n   * with the current primary state.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setPrimaryStateListener(\n    primaryStateListener: PrimaryStateListener\n  ): Promise<void> {\n    this.primaryStateListener = async primaryState => {\n      if (this.started) {\n        return primaryStateListener(primaryState);\n      }\n    };\n    return primaryStateListener(this.isPrimary);\n  }\n\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(\n    databaseDeletedListener: () => Promise<void>\n  ): void {\n    this.simpleDb.setVersionChangeListener(async event => {\n      // Check if an attempt is made to delete IndexedDB.\n      if (event.newVersion === null) {\n        await databaseDeletedListener();\n      }\n    });\n  }\n\n  /**\n   * Adjusts the current network state in the client's metadata, potentially\n   * affecting the primary lease.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setNetworkEnabled(networkEnabled: boolean): void {\n    if (this.networkEnabled !== networkEnabled) {\n      this.networkEnabled = networkEnabled;\n      // Schedule a primary lease refresh for immediate execution. The eventual\n      // lease update will be propagated via `primaryStateListener`.\n      this.queue.enqueueAndForget(async () => {\n        if (this.started) {\n          await this.updateClientMetadataAndTryBecomePrimary();\n        }\n      });\n    }\n  }\n\n  /**\n   * Updates the client metadata in IndexedDb and attempts to either obtain or\n   * extend the primary lease for the local client. Asynchronously notifies the\n   * primary state listener if the client either newly obtained or released its\n   * primary lease.\n   */\n  private updateClientMetadataAndTryBecomePrimary(): Promise<void> {\n    return this.runTransaction(\n      'updateClientMetadataAndTryBecomePrimary',\n      'readwrite',\n      txn => {\n        const metadataStore = clientMetadataStore(txn);\n        return metadataStore\n          .put(\n            new DbClientMetadata(\n              this.clientId,\n              Date.now(),\n              this.networkEnabled,\n              this.inForeground\n            )\n          )\n          .next(() => {\n            if (this.isPrimary) {\n              return this.verifyPrimaryLease(txn).next(success => {\n                if (!success) {\n                  this.isPrimary = false;\n                  this.queue.enqueueRetryable(() =>\n                    this.primaryStateListener(false)\n                  );\n                }\n              });\n            }\n          })\n          .next(() => this.canActAsPrimary(txn))\n          .next(canActAsPrimary => {\n            if (this.isPrimary && !canActAsPrimary) {\n              return this.releasePrimaryLeaseIfHeld(txn).next(() => false);\n            } else if (canActAsPrimary) {\n              return this.acquireOrExtendPrimaryLease(txn).next(() => true);\n            } else {\n              return /* canActAsPrimary= */ false;\n            }\n          });\n      }\n    )\n      .catch(e => {\n        if (isIndexedDbTransactionError(e)) {\n          logDebug(LOG_TAG, 'Failed to extend owner lease: ', e);\n          // Proceed with the existing state. Any subsequent access to\n          // IndexedDB will verify the lease.\n          return this.isPrimary;\n        }\n\n        if (!this.allowTabSynchronization) {\n          throw e;\n        }\n\n        logDebug(\n          LOG_TAG,\n          'Releasing owner lease after error during lease refresh',\n          e\n        );\n        return /* isPrimary= */ false;\n      })\n      .then(isPrimary => {\n        if (this.isPrimary !== isPrimary) {\n          this.queue.enqueueRetryable(() =>\n            this.primaryStateListener(isPrimary)\n          );\n        }\n        this.isPrimary = isPrimary;\n      });\n  }\n\n  private verifyPrimaryLease(\n    txn: PersistenceTransaction\n  ): PersistencePromise<boolean> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(primaryClient => {\n      return PersistencePromise.resolve(this.isLocalClient(primaryClient));\n    });\n  }\n\n  private removeClientMetadata(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const metadataStore = clientMetadataStore(txn);\n    return metadataStore.delete(this.clientId);\n  }\n\n  /**\n   * If the garbage collection threshold has passed, prunes the\n   * RemoteDocumentChanges and the ClientMetadata store based on the last update\n   * time of all clients.\n   */\n  private async maybeGarbageCollectMultiClientState(): Promise<void> {\n    if (\n      this.isPrimary &&\n      !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)\n    ) {\n      this.lastGarbageCollectionTime = Date.now();\n\n      const inactiveClients = await this.runTransaction(\n        'maybeGarbageCollectMultiClientState',\n        'readwrite-primary',\n        txn => {\n          const metadataStore = IndexedDbPersistence.getStore<\n            DbClientMetadataKey,\n            DbClientMetadata\n          >(txn, DbClientMetadata.store);\n\n          return metadataStore.loadAll().next(existingClients => {\n            const active = this.filterActiveClients(\n              existingClients,\n              MAX_CLIENT_AGE_MS\n            );\n            const inactive = existingClients.filter(\n              client => active.indexOf(client) === -1\n            );\n\n            // Delete metadata for clients that are no longer considered active.\n            return PersistencePromise.forEach(\n              inactive,\n              (inactiveClient: DbClientMetadata) =>\n                metadataStore.delete(inactiveClient.clientId)\n            ).next(() => inactive);\n          });\n        }\n      ).catch(() => {\n        // Ignore primary lease violations or any other type of error. The next\n        // primary will run `maybeGarbageCollectMultiClientState()` again.\n        // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend\n        // on LocalStore.\n        return [];\n      });\n\n      // Delete potential leftover entries that may continue to mark the\n      // inactive clients as zombied in LocalStorage.\n      // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for\n      // the client atomically, but we can't. So we opt to delete the IndexedDb\n      // entries first to avoid potentially reviving a zombied client.\n      if (this.webStorage) {\n        for (const inactiveClient of inactiveClients) {\n          this.webStorage.removeItem(\n            this.zombiedClientLocalStorageKey(inactiveClient.clientId)\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Schedules a recurring timer to update the client metadata and to either\n   * extend or acquire the primary lease if the client is eligible.\n   */\n  private scheduleClientMetadataAndPrimaryLeaseRefreshes(): void {\n    this.clientMetadataRefresher = this.queue.enqueueAfterDelay(\n      TimerId.ClientMetadataRefresh,\n      CLIENT_METADATA_REFRESH_INTERVAL_MS,\n      () => {\n        return this.updateClientMetadataAndTryBecomePrimary()\n          .then(() => this.maybeGarbageCollectMultiClientState())\n          .then(() => this.scheduleClientMetadataAndPrimaryLeaseRefreshes());\n      }\n    );\n  }\n\n  /** Checks whether `client` is the local client. */\n  private isLocalClient(client: DbPrimaryClient | null): boolean {\n    return client ? client.ownerId === this.clientId : false;\n  }\n\n  /**\n   * Evaluate the state of all active clients and determine whether the local\n   * client is or can act as the holder of the primary lease. Returns whether\n   * the client is eligible for the lease, but does not actually acquire it.\n   * May return 'false' even if there is no active leaseholder and another\n   * (foreground) client should become leaseholder instead.\n   */\n  private canActAsPrimary(\n    txn: PersistenceTransaction\n  ): PersistencePromise<boolean> {\n    if (this.forceOwningTab) {\n      return PersistencePromise.resolve<boolean>(true);\n    }\n    const store = primaryClientStore(txn);\n    return store\n      .get(DbPrimaryClient.key)\n      .next(currentPrimary => {\n        const currentLeaseIsValid =\n          currentPrimary !== null &&\n          this.isWithinAge(\n            currentPrimary.leaseTimestampMs,\n            MAX_PRIMARY_ELIGIBLE_AGE_MS\n          ) &&\n          !this.isClientZombied(currentPrimary.ownerId);\n\n        // A client is eligible for the primary lease if:\n        // - its network is enabled and the client's tab is in the foreground.\n        // - its network is enabled and no other client's tab is in the\n        //   foreground.\n        // - every clients network is disabled and the client's tab is in the\n        //   foreground.\n        // - every clients network is disabled and no other client's tab is in\n        //   the foreground.\n        // - the `forceOwningTab` setting was passed in.\n        if (currentLeaseIsValid) {\n          if (this.isLocalClient(currentPrimary) && this.networkEnabled) {\n            return true;\n          }\n\n          if (!this.isLocalClient(currentPrimary)) {\n            if (!currentPrimary!.allowTabSynchronization) {\n              // Fail the `canActAsPrimary` check if the current leaseholder has\n              // not opted into multi-tab synchronization. If this happens at\n              // client startup, we reject the Promise returned by\n              // `enablePersistence()` and the user can continue to use Firestore\n              // with in-memory persistence.\n              // If this fails during a lease refresh, we will instead block the\n              // AsyncQueue from executing further operations. Note that this is\n              // acceptable since mixing & matching different `synchronizeTabs`\n              // settings is not supported.\n              //\n              // TODO(b/114226234): Remove this check when `synchronizeTabs` can\n              // no longer be turned off.\n              throw new FirestoreError(\n                Code.FAILED_PRECONDITION,\n                PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n              );\n            }\n\n            return false;\n          }\n        }\n\n        if (this.networkEnabled && this.inForeground) {\n          return true;\n        }\n\n        return clientMetadataStore(txn)\n          .loadAll()\n          .next(existingClients => {\n            // Process all existing clients and determine whether at least one of\n            // them is better suited to obtain the primary lease.\n            const preferredCandidate = this.filterActiveClients(\n              existingClients,\n              MAX_PRIMARY_ELIGIBLE_AGE_MS\n            ).find(otherClient => {\n              if (this.clientId !== otherClient.clientId) {\n                const otherClientHasBetterNetworkState =\n                  !this.networkEnabled && otherClient.networkEnabled;\n                const otherClientHasBetterVisibility =\n                  !this.inForeground && otherClient.inForeground;\n                const otherClientHasSameNetworkState =\n                  this.networkEnabled === otherClient.networkEnabled;\n                if (\n                  otherClientHasBetterNetworkState ||\n                  (otherClientHasBetterVisibility &&\n                    otherClientHasSameNetworkState)\n                ) {\n                  return true;\n                }\n              }\n              return false;\n            });\n            return preferredCandidate === undefined;\n          });\n      })\n      .next(canActAsPrimary => {\n        if (this.isPrimary !== canActAsPrimary) {\n          logDebug(\n            LOG_TAG,\n            `Client ${\n              canActAsPrimary ? 'is' : 'is not'\n            } eligible for a primary lease.`\n          );\n        }\n        return canActAsPrimary;\n      });\n  }\n\n  async shutdown(): Promise<void> {\n    // The shutdown() operations are idempotent and can be called even when\n    // start() aborted (e.g. because it couldn't acquire the persistence lease).\n    this._started = false;\n\n    this.markClientZombied();\n    if (this.clientMetadataRefresher) {\n      this.clientMetadataRefresher.cancel();\n      this.clientMetadataRefresher = null;\n    }\n    this.detachVisibilityHandler();\n    this.detachWindowUnloadHook();\n    await this.runTransaction('shutdown', 'readwrite', txn => {\n      return this.releasePrimaryLeaseIfHeld(txn).next(() =>\n        this.removeClientMetadata(txn)\n      );\n    }).catch(e => {\n      logDebug(LOG_TAG, 'Proceeding with shutdown despite failure: ', e);\n    });\n    this.simpleDb.close();\n\n    // Remove the entry marking the client as zombied from LocalStorage since\n    // we successfully deleted its metadata from IndexedDb.\n    this.removeClientZombiedEntry();\n  }\n\n  /**\n   * Returns clients that are not zombied and have an updateTime within the\n   * provided threshold.\n   */\n  private filterActiveClients(\n    clients: DbClientMetadata[],\n    activityThresholdMs: number\n  ): DbClientMetadata[] {\n    return clients.filter(\n      client =>\n        this.isWithinAge(client.updateTimeMs, activityThresholdMs) &&\n        !this.isClientZombied(client.clientId)\n    );\n  }\n\n  /**\n   * Returns the IDs of the clients that are currently active. If multi-tab\n   * is not supported, returns an array that only contains the local client's\n   * ID.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  getActiveClients(): Promise<ClientId[]> {\n    return this.runTransaction('getActiveClients', 'readonly', txn => {\n      return clientMetadataStore(txn)\n        .loadAll()\n        .next(clients =>\n          this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(\n            clientMetadata => clientMetadata.clientId\n          )\n        );\n    });\n  }\n\n  static async clearPersistence(persistenceKey: string): Promise<void> {\n    if (!IndexedDbPersistence.isAvailable()) {\n      return Promise.resolve();\n    }\n    const dbName = persistenceKey + IndexedDbPersistence.MAIN_DATABASE;\n    await SimpleDb.delete(dbName);\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  getMutationQueue(user: User): IndexedDbMutationQueue {\n    debugAssert(\n      this.started,\n      'Cannot initialize MutationQueue before persistence is started.'\n    );\n    return IndexedDbMutationQueue.forUser(\n      user,\n      this.serializer,\n      this.indexManager,\n      this.referenceDelegate\n    );\n  }\n\n  getTargetCache(): IndexedDbTargetCache {\n    debugAssert(\n      this.started,\n      'Cannot initialize TargetCache before persistence is started.'\n    );\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): IndexedDbRemoteDocumentCache {\n    debugAssert(\n      this.started,\n      'Cannot initialize RemoteDocumentCache before persistence is started.'\n    );\n    return this.remoteDocumentCache;\n  }\n\n  getIndexManager(): IndexedDbIndexManager {\n    debugAssert(\n      this.started,\n      'Cannot initialize IndexManager before persistence is started.'\n    );\n    return this.indexManager;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n\n    const simpleDbMode = mode === 'readonly' ? 'readonly' : 'readwrite';\n\n    let persistenceTransaction: PersistenceTransaction;\n\n    // Do all transactions as readwrite against all object stores, since we\n    // are the only reader/writer.\n    return this.simpleDb\n      .runTransaction(simpleDbMode, ALL_STORES, simpleDbTxn => {\n        persistenceTransaction = new IndexedDbTransaction(\n          simpleDbTxn,\n          this.listenSequence\n            ? this.listenSequence.next()\n            : ListenSequence.INVALID\n        );\n\n        if (mode === 'readwrite-primary') {\n          // While we merely verify that we have (or can acquire) the lease\n          // immediately, we wait to extend the primary lease until after\n          // executing transactionOperation(). This ensures that even if the\n          // transactionOperation takes a long time, we'll use a recent\n          // leaseTimestampMs in the extended (or newly acquired) lease.\n          return this.verifyPrimaryLease(persistenceTransaction)\n            .next(holdsPrimaryLease => {\n              if (holdsPrimaryLease) {\n                return /* holdsPrimaryLease= */ true;\n              }\n              return this.canActAsPrimary(persistenceTransaction);\n            })\n            .next(holdsPrimaryLease => {\n              if (!holdsPrimaryLease) {\n                logError(\n                  `Failed to obtain primary lease for action '${action}'.`\n                );\n                this.isPrimary = false;\n                this.queue.enqueueRetryable(() =>\n                  this.primaryStateListener(false)\n                );\n                throw new FirestoreError(\n                  Code.FAILED_PRECONDITION,\n                  PRIMARY_LEASE_LOST_ERROR_MSG\n                );\n              }\n              return transactionOperation(persistenceTransaction);\n            })\n            .next(result => {\n              return this.acquireOrExtendPrimaryLease(\n                persistenceTransaction\n              ).next(() => result);\n            });\n        } else {\n          return this.verifyAllowTabSynchronization(\n            persistenceTransaction\n          ).next(() => transactionOperation(persistenceTransaction));\n        }\n      })\n      .then(result => {\n        persistenceTransaction.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  /**\n   * Verifies that the current tab is the primary leaseholder or alternatively\n   * that the leaseholder has opted into multi-tab synchronization.\n   */\n  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer\n  // be turned off.\n  private verifyAllowTabSynchronization(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(currentPrimary => {\n      const currentLeaseIsValid =\n        currentPrimary !== null &&\n        this.isWithinAge(\n          currentPrimary.leaseTimestampMs,\n          MAX_PRIMARY_ELIGIBLE_AGE_MS\n        ) &&\n        !this.isClientZombied(currentPrimary.ownerId);\n\n      if (currentLeaseIsValid && !this.isLocalClient(currentPrimary)) {\n        if (\n          !this.forceOwningTab &&\n          (!this.allowTabSynchronization ||\n            !currentPrimary!.allowTabSynchronization)\n        ) {\n          throw new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Obtains or extends the new primary lease for the local client. This\n   * method does not verify that the client is eligible for this lease.\n   */\n  private acquireOrExtendPrimaryLease(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const newPrimary = new DbPrimaryClient(\n      this.clientId,\n      this.allowTabSynchronization,\n      Date.now()\n    );\n    return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);\n  }\n\n  static isAvailable(): boolean {\n    return SimpleDb.isAvailable();\n  }\n\n  /**\n   * Generates a string used as a prefix when storing data in IndexedDB and\n   * LocalStorage.\n   */\n  static buildStoragePrefix(databaseInfo: DatabaseInfo): string {\n    // Use two different prefix formats:\n    //\n    //   * firestore / persistenceKey / projectID . databaseID / ...\n    //   * firestore / persistenceKey / projectID / ...\n    //\n    // projectIDs are DNS-compatible names and cannot contain dots\n    // so there's no danger of collisions.\n    let database = databaseInfo.databaseId.projectId;\n    if (!databaseInfo.databaseId.isDefaultDatabase) {\n      database += '.' + databaseInfo.databaseId.database;\n    }\n\n    return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';\n  }\n\n  /** Checks the primary lease and removes it if we are the current primary. */\n  private releasePrimaryLeaseIfHeld(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(primaryClient => {\n      if (this.isLocalClient(primaryClient)) {\n        logDebug(LOG_TAG, 'Releasing primary lease.');\n        return store.delete(DbPrimaryClient.key);\n      } else {\n        return PersistencePromise.resolve();\n      }\n    });\n  }\n\n  /** Verifies that `updateTimeMs` is within `maxAgeMs`. */\n  private isWithinAge(updateTimeMs: number, maxAgeMs: number): boolean {\n    const now = Date.now();\n    const minAcceptable = now - maxAgeMs;\n    const maxAcceptable = now;\n    if (updateTimeMs < minAcceptable) {\n      return false;\n    } else if (updateTimeMs > maxAcceptable) {\n      logError(\n        `Detected an update time that is in the future: ${updateTimeMs} > ${maxAcceptable}`\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  private attachVisibilityHandler(): void {\n    if (\n      this.document !== null &&\n      typeof this.document.addEventListener === 'function'\n    ) {\n      this.documentVisibilityHandler = () => {\n        this.queue.enqueueAndForget(() => {\n          this.inForeground = this.document!.visibilityState === 'visible';\n          return this.updateClientMetadataAndTryBecomePrimary();\n        });\n      };\n\n      this.document.addEventListener(\n        'visibilitychange',\n        this.documentVisibilityHandler\n      );\n\n      this.inForeground = this.document.visibilityState === 'visible';\n    }\n  }\n\n  private detachVisibilityHandler(): void {\n    if (this.documentVisibilityHandler) {\n      debugAssert(\n        this.document !== null &&\n          typeof this.document.addEventListener === 'function',\n        \"Expected 'document.addEventListener' to be a function\"\n      );\n      this.document.removeEventListener(\n        'visibilitychange',\n        this.documentVisibilityHandler\n      );\n      this.documentVisibilityHandler = null;\n    }\n  }\n\n  /**\n   * Attaches a window.unload handler that will synchronously write our\n   * clientId to a \"zombie client id\" location in LocalStorage. This can be used\n   * by tabs trying to acquire the primary lease to determine that the lease\n   * is no longer valid even if the timestamp is recent. This is particularly\n   * important for the refresh case (so the tab correctly re-acquires the\n   * primary lease). LocalStorage is used for this rather than IndexedDb because\n   * it is a synchronous API and so can be used reliably from  an unload\n   * handler.\n   */\n  private attachWindowUnloadHook(): void {\n    if (typeof this.window?.addEventListener === 'function') {\n      this.windowUnloadHandler = () => {\n        // Note: In theory, this should be scheduled on the AsyncQueue since it\n        // accesses internal state. We execute this code directly during shutdown\n        // to make sure it gets a chance to run.\n        this.markClientZombied();\n\n        this.queue.enqueueAndForget(() => {\n          // Attempt graceful shutdown (including releasing our primary lease),\n          // but there's no guarantee it will complete.\n          return this.shutdown();\n        });\n      };\n      this.window.addEventListener('unload', this.windowUnloadHandler);\n    }\n  }\n\n  private detachWindowUnloadHook(): void {\n    if (this.windowUnloadHandler) {\n      debugAssert(\n        typeof this.window?.removeEventListener === 'function',\n        \"Expected 'window.removeEventListener' to be a function\"\n      );\n      this.window!.removeEventListener('unload', this.windowUnloadHandler);\n      this.windowUnloadHandler = null;\n    }\n  }\n\n  /**\n   * Returns whether a client is \"zombied\" based on its LocalStorage entry.\n   * Clients become zombied when their tab closes without running all of the\n   * cleanup logic in `shutdown()`.\n   */\n  private isClientZombied(clientId: ClientId): boolean {\n    try {\n      const isZombied =\n        this.webStorage?.getItem(\n          this.zombiedClientLocalStorageKey(clientId)\n        ) !== null;\n      logDebug(\n        LOG_TAG,\n        `Client '${clientId}' ${\n          isZombied ? 'is' : 'is not'\n        } zombied in LocalStorage`\n      );\n      return isZombied;\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't working.\n      logError(LOG_TAG, 'Failed to get zombied client id.', e);\n      return false;\n    }\n  }\n\n  /**\n   * Record client as zombied (a client that had its tab closed). Zombied\n   * clients are ignored during primary tab selection.\n   */\n  private markClientZombied(): void {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.setItem(\n        this.zombiedClientLocalStorageKey(this.clientId),\n        String(Date.now())\n      );\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't available / working.\n      logError('Failed to set zombie client id.', e);\n    }\n  }\n\n  /** Removes the zombied client entry if it exists. */\n  private removeClientZombiedEntry(): void {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.removeItem(\n        this.zombiedClientLocalStorageKey(this.clientId)\n      );\n    } catch (e) {\n      // Ignore\n    }\n  }\n\n  private zombiedClientLocalStorageKey(clientId: ClientId): string {\n    return `${ZOMBIED_CLIENTS_KEY_PREFIX}_${this.persistenceKey}_${clientId}`;\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the primary client object store.\n */\nfunction primaryClientStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbPrimaryClientKey, DbPrimaryClient> {\n  return IndexedDbPersistence.getStore<DbPrimaryClientKey, DbPrimaryClient>(\n    txn,\n    DbPrimaryClient.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the client metadata object store.\n */\nfunction clientMetadataStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbClientMetadataKey, DbClientMetadata> {\n  return IndexedDbPersistence.getStore<DbClientMetadataKey, DbClientMetadata>(\n    txn,\n    DbClientMetadata.store\n  );\n}\n\n/** Provides LRU functionality for IndexedDB persistence. */\nexport class IndexedDbLruDelegate implements ReferenceDelegate, LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(private readonly db: IndexedDbPersistence, params: LruParams) {\n    this.garbageCollector = new LruGarbageCollector(this, params);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.db.getTargetCache().getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.db.getTargetCache().forEachTarget(txn, f);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) =>\n      f(sequenceNumber)\n    );\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.db\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  /**\n   * Returns true if anything would prevent this document from being garbage\n   * collected, given that the document in question is not present in any\n   * targets and has a sequence number less than or equal to the upper bound for\n   * the collection run.\n   */\n  private isPinned(\n    txn: PersistenceTransaction,\n    docKey: DocumentKey\n  ): PersistencePromise<boolean> {\n    return mutationQueuesContainKey(txn, docKey);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    const documentCache = this.db.getRemoteDocumentCache();\n    const changeBuffer = documentCache.newChangeBuffer();\n\n    const promises: Array<PersistencePromise<void>> = [];\n    let documentCount = 0;\n\n    const iteration = this.forEachOrphanedDocument(\n      txn,\n      (docKey, sequenceNumber) => {\n        if (sequenceNumber <= upperBound) {\n          const p = this.isPinned(txn, docKey).next(isPinned => {\n            if (!isPinned) {\n              documentCount++;\n              // Our size accounting requires us to read all documents before\n              // removing them.\n              return changeBuffer.getEntry(txn, docKey).next(() => {\n                changeBuffer.removeEntry(docKey);\n                return documentTargetStore(txn).delete(sentinelKey(docKey));\n              });\n            }\n          });\n          promises.push(p);\n        }\n      }\n    );\n\n    return iteration\n      .next(() => PersistencePromise.waitFor(promises))\n      .next(() => changeBuffer.apply(txn))\n      .next(() => documentCount);\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.db.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return writeSentinelKey(txn, key);\n  }\n\n  /**\n   * Call provided function for each document in the cache that is 'orphaned'. Orphaned\n   * means not a part of any target, so the only entry in the target-document index for\n   * that document will be the sentinel row (targetId 0), which will also have the sequence\n   * number for the last time the document was accessed.\n   */\n  private forEachOrphanedDocument(\n    txn: PersistenceTransaction,\n    f: (docKey: DocumentKey, sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    const store = documentTargetStore(txn);\n    let nextToReport: ListenSequenceNumber = ListenSequence.INVALID;\n    let nextPath: EncodedResourcePath;\n    return store\n      .iterate(\n        {\n          index: DbTargetDocument.documentTargetsIndex\n        },\n        ([targetId, docKey], { path, sequenceNumber }) => {\n          if (targetId === 0) {\n            // if nextToReport is valid, report it, this is a new key so the\n            // last one must not be a member of any targets.\n            if (nextToReport !== ListenSequence.INVALID) {\n              f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n            }\n            // set nextToReport to be this sequence number. It's the next one we\n            // might report, if we don't find any targets for this document.\n            // Note that the sequence number must be defined when the targetId\n            // is 0.\n            nextToReport = sequenceNumber!;\n            nextPath = path;\n          } else {\n            // set nextToReport to be invalid, we know we don't need to report\n            // this one since we found a target for it.\n            nextToReport = ListenSequence.INVALID;\n          }\n        }\n      )\n      .next(() => {\n        // Since we report sequence numbers after getting to the next key, we\n        // need to check if the last key we iterated over was an orphaned\n        // document and report it.\n        if (nextToReport !== ListenSequence.INVALID) {\n          f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n        }\n      });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.db.getRemoteDocumentCache().getSize(txn);\n  }\n}\n\nfunction sentinelKey(key: DocumentKey): [TargetId, EncodedResourcePath] {\n  return [0, encodeResourcePath(key.path)];\n}\n\n/**\n * @return A value suitable for writing a sentinel row in the target-document\n * store.\n */\nfunction sentinelRow(\n  key: DocumentKey,\n  sequenceNumber: ListenSequenceNumber\n): DbTargetDocument {\n  return new DbTargetDocument(0, encodeResourcePath(key.path), sequenceNumber);\n}\n\nfunction writeSentinelKey(\n  txn: PersistenceTransaction,\n  key: DocumentKey\n): PersistencePromise<void> {\n  return documentTargetStore(txn).put(\n    sentinelRow(key, txn.currentSequenceNumber)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { BATCHID_UNKNOWN, MutationBatch } from '../model/mutation_batch';\nimport { ResourcePath } from '../model/path';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { decodeResourcePath } from './encoded_resource_path';\nimport { IndexManager } from './index_manager';\nimport {\n  IndexedDbPersistence,\n  IndexedDbTransaction\n} from './indexeddb_persistence';\nimport {\n  DbDocumentMutation,\n  DbDocumentMutationKey,\n  DbMutationBatch,\n  DbMutationBatchKey,\n  DbMutationQueue,\n  DbMutationQueueKey\n} from './indexeddb_schema';\nimport {\n  fromDbMutationBatch,\n  LocalSerializer,\n  toDbMutationBatch\n} from './local_serializer';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbStore, SimpleDbTransaction } from './simple_db';\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\nexport class IndexedDbMutationQueue implements MutationQueue {\n  /**\n   * Caches the document keys for pending mutation batches. If the mutation\n   * has been removed from IndexedDb, the cached value may continue to\n   * be used to retrieve the batch's document keys. To remove a cached value\n   * locally, `removeCachedMutationKeys()` should be invoked either directly\n   * or through `removeMutationBatches()`.\n   *\n   * With multi-tab, when the primary client acknowledges or rejects a mutation,\n   * this cache is used by secondary clients to invalidate the local\n   * view of the documents that were previously affected by the mutation.\n   */\n  // PORTING NOTE: Multi-tab only.\n  private documentKeysByBatchId = {} as { [batchId: number]: DocumentKeySet };\n\n  constructor(\n    /**\n     * The normalized userId (e.g. null UID => \"\" userId) used to store /\n     * retrieve mutations.\n     */\n    private userId: string,\n    private readonly serializer: LocalSerializer,\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  /**\n   * Creates a new mutation queue for the given user.\n   * @param user The user for which to create a mutation queue.\n   * @param serializer The serializer to use when persisting to IndexedDb.\n   */\n  static forUser(\n    user: User,\n    serializer: LocalSerializer,\n    indexManager: IndexManager,\n    referenceDelegate: ReferenceDelegate\n  ): IndexedDbMutationQueue {\n    // TODO(mcg): Figure out what constraints there are on userIDs\n    // In particular, are there any reserved characters? are empty ids allowed?\n    // For the moment store these together in the same mutations table assuming\n    // that empty userIDs aren't allowed.\n    hardAssert(user.uid !== '', 'UserID must not be an empty string.');\n    const userId = user.isAuthenticated() ? user.uid! : '';\n    return new IndexedDbMutationQueue(\n      userId,\n      serializer,\n      indexManager,\n      referenceDelegate\n    );\n  }\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    let empty = true;\n    const range = IDBKeyRange.bound(\n      [this.userId, Number.NEGATIVE_INFINITY],\n      [this.userId, Number.POSITIVE_INFINITY]\n    );\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range },\n        (key, value, control) => {\n          empty = false;\n          control.done();\n        }\n      )\n      .next(() => empty);\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    const documentStore = documentMutationsStore(transaction);\n    const mutationStore = mutationsStore(transaction);\n\n    // The IndexedDb implementation in Chrome (and Firefox) does not handle\n    // compound indices that include auto-generated keys correctly. To ensure\n    // that the index entry is added correctly in all browsers, we perform two\n    // writes: The first write is used to retrieve the next auto-generated Batch\n    // ID, and the second write populates the index and stores the actual\n    // mutation batch.\n    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972\n\n    // We write an empty object to obtain key\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return mutationStore.add({} as any).next(batchId => {\n      hardAssert(\n        typeof batchId === 'number',\n        'Auto-generated key is not a number'\n      );\n\n      const batch = new MutationBatch(\n        batchId,\n        localWriteTime,\n        baseMutations,\n        mutations\n      );\n      const dbBatch = toDbMutationBatch(this.serializer, this.userId, batch);\n\n      const promises: Array<PersistencePromise<void>> = [];\n      let collectionParents = new SortedSet<ResourcePath>((l, r) =>\n        primitiveComparator(l.canonicalString(), r.canonicalString())\n      );\n      for (const mutation of mutations) {\n        const indexKey = DbDocumentMutation.key(\n          this.userId,\n          mutation.key.path,\n          batchId\n        );\n        collectionParents = collectionParents.add(mutation.key.path.popLast());\n        promises.push(mutationStore.put(dbBatch));\n        promises.push(\n          documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER)\n        );\n      }\n\n      collectionParents.forEach(parent => {\n        promises.push(\n          this.indexManager.addToCollectionParentIndex(transaction, parent)\n        );\n      });\n\n      transaction.addOnCommittedListener(() => {\n        this.documentKeysByBatchId[batchId] = batch.keys();\n      });\n\n      return PersistencePromise.waitFor(promises).next(() => batch);\n    });\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return mutationsStore(transaction)\n      .get(batchId)\n      .next(dbBatch => {\n        if (dbBatch) {\n          hardAssert(\n            dbBatch.userId === this.userId,\n            `Unexpected user '${dbBatch.userId}' for mutation batch ${batchId}`\n          );\n          return fromDbMutationBatch(this.serializer, dbBatch);\n        }\n        return null;\n      });\n  }\n\n  /**\n   * Returns the document keys for the mutation batch with the given batchId.\n   * For primary clients, this method returns `null` after\n   * `removeMutationBatches()` has been called. Secondary clients return a\n   * cached result until `removeCachedMutationKeys()` is invoked.\n   */\n  // PORTING NOTE: Multi-tab only.\n  lookupMutationKeys(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<DocumentKeySet | null> {\n    if (this.documentKeysByBatchId[batchId]) {\n      return PersistencePromise.resolve<DocumentKeySet | null>(\n        this.documentKeysByBatchId[batchId]\n      );\n    } else {\n      return this.lookupMutationBatch(transaction, batchId).next(batch => {\n        if (batch) {\n          const keys = batch.keys();\n          this.documentKeysByBatchId[batchId] = keys;\n          return keys;\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    const range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);\n    let foundBatch: MutationBatch | null = null;\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range },\n        (key, dbBatch, control) => {\n          if (dbBatch.userId === this.userId) {\n            hardAssert(\n              dbBatch.batchId >= nextBatchId,\n              'Should have found mutation after ' + nextBatchId\n            );\n            foundBatch = fromDbMutationBatch(this.serializer, dbBatch);\n          }\n          control.done();\n        }\n      )\n      .next(() => foundBatch);\n  }\n\n  getHighestUnacknowledgedBatchId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<BatchId> {\n    const range = IDBKeyRange.upperBound([\n      this.userId,\n      Number.POSITIVE_INFINITY\n    ]);\n\n    let batchId = BATCHID_UNKNOWN;\n    return mutationsStore(transaction)\n      .iterate(\n        { index: DbMutationBatch.userMutationsIndex, range, reverse: true },\n        (key, dbBatch, control) => {\n          batchId = dbBatch.batchId;\n          control.done();\n        }\n      )\n      .next(() => batchId);\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    const range = IDBKeyRange.bound(\n      [this.userId, BATCHID_UNKNOWN],\n      [this.userId, Number.POSITIVE_INFINITY]\n    );\n    return mutationsStore(transaction)\n      .loadAll(DbMutationBatch.userMutationsIndex, range)\n      .next(dbBatches =>\n        dbBatches.map(dbBatch => fromDbMutationBatch(this.serializer, dbBatch))\n      );\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    // Scan the document-mutation index starting with a prefix starting with\n    // the given documentKey.\n    const indexPrefix = DbDocumentMutation.prefixForPath(\n      this.userId,\n      documentKey.path\n    );\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n\n    const results: MutationBatch[] = [];\n    return documentMutationsStore(transaction)\n      .iterate({ range: indexStart }, (indexKey, _, control) => {\n        const [userID, encodedPath, batchId] = indexKey;\n\n        // Only consider rows matching exactly the specific key of\n        // interest. Note that because we order by path first, and we\n        // order terminators before path separators, we'll encounter all\n        // the index rows for documentKey contiguously. In particular, all\n        // the rows for documentKey will occur before any rows for\n        // documents nested in a subcollection beneath documentKey so we\n        // can stop as soon as we hit any such row.\n        const path = decodeResourcePath(encodedPath);\n        if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n          control.done();\n          return;\n        }\n        // Look up the mutation batch in the store.\n        return mutationsStore(transaction)\n          .get(batchId)\n          .next(mutation => {\n            if (!mutation) {\n              throw fail(\n                'Dangling document-mutation reference found: ' +\n                  indexKey +\n                  ' which points to ' +\n                  batchId\n              );\n            }\n            hardAssert(\n              mutation.userId === this.userId,\n              `Unexpected user '${mutation.userId}' for mutation batch ${batchId}`\n            );\n            results.push(fromDbMutationBatch(this.serializer, mutation));\n          });\n      })\n      .next(() => results);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<BatchId>(primitiveComparator);\n\n    const promises: Array<PersistencePromise<void>> = [];\n    documentKeys.forEach(documentKey => {\n      const indexStart = DbDocumentMutation.prefixForPath(\n        this.userId,\n        documentKey.path\n      );\n      const range = IDBKeyRange.lowerBound(indexStart);\n\n      const promise = documentMutationsStore(transaction).iterate(\n        { range },\n        (indexKey, _, control) => {\n          const [userID, encodedPath, batchID] = indexKey;\n\n          // Only consider rows matching exactly the specific key of\n          // interest. Note that because we order by path first, and we\n          // order terminators before path separators, we'll encounter all\n          // the index rows for documentKey contiguously. In particular, all\n          // the rows for documentKey will occur before any rows for\n          // documents nested in a subcollection beneath documentKey so we\n          // can stop as soon as we hit any such row.\n          const path = decodeResourcePath(encodedPath);\n          if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n            control.done();\n            return;\n          }\n\n          uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n        }\n      );\n\n      promises.push(promise);\n    });\n\n    return PersistencePromise.waitFor(promises).next(() =>\n      this.lookupMutationBatches(transaction, uniqueBatchIDs)\n    );\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !query.isDocumentQuery(),\n      \"Document queries shouldn't go down this path\"\n    );\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n\n    const queryPath = query.path;\n    const immediateChildrenLength = queryPath.length + 1;\n\n    // TODO(mcg): Actually implement a single-collection query\n    //\n    // This is actually executing an ancestor query, traversing the whole\n    // subtree below the collection which can be horrifically inefficient for\n    // some structures. The right way to solve this is to implement the full\n    // value index, but that's not in the cards in the near future so this is\n    // the best we can do for the moment.\n    //\n    // Since we don't yet index the actual properties in the mutations, our\n    // current approach is to just return all mutation batches that affect\n    // documents in the collection being queried.\n    const indexPrefix = DbDocumentMutation.prefixForPath(\n      this.userId,\n      queryPath\n    );\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n\n    // Collect up unique batchIDs encountered during a scan of the index. Use a\n    // SortedSet to accumulate batch IDs so they can be traversed in order in a\n    // scan of the main table.\n    let uniqueBatchIDs = new SortedSet<BatchId>(primitiveComparator);\n    return documentMutationsStore(transaction)\n      .iterate({ range: indexStart }, (indexKey, _, control) => {\n        const [userID, encodedPath, batchID] = indexKey;\n        const path = decodeResourcePath(encodedPath);\n        if (userID !== this.userId || !queryPath.isPrefixOf(path)) {\n          control.done();\n          return;\n        }\n        // Rows with document keys more than one segment longer than the\n        // query path can't be matches. For example, a query on 'rooms'\n        // can't match the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (path.length !== immediateChildrenLength) {\n          return;\n        }\n        uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n      })\n      .next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\n  }\n\n  private lookupMutationBatches(\n    transaction: PersistenceTransaction,\n    batchIDs: SortedSet<BatchId>\n  ): PersistencePromise<MutationBatch[]> {\n    const results: MutationBatch[] = [];\n    const promises: Array<PersistencePromise<void>> = [];\n    // TODO(rockwood): Implement this using iterate.\n    batchIDs.forEach(batchId => {\n      promises.push(\n        mutationsStore(transaction)\n          .get(batchId)\n          .next(mutation => {\n            if (mutation === null) {\n              throw fail(\n                'Dangling document-mutation reference found, ' +\n                  'which points to ' +\n                  batchId\n              );\n            }\n            hardAssert(\n              mutation.userId === this.userId,\n              `Unexpected user '${mutation.userId}' for mutation batch ${batchId}`\n            );\n            results.push(fromDbMutationBatch(this.serializer, mutation));\n          })\n      );\n    });\n    return PersistencePromise.waitFor(promises).next(() => results);\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    return removeMutationBatch(\n      (transaction as IndexedDbTransaction).simpleDbTransaction,\n      this.userId,\n      batch\n    ).next(removedDocuments => {\n      transaction.addOnCommittedListener(() => {\n        this.removeCachedMutationKeys(batch.batchId);\n      });\n      return PersistencePromise.forEach(\n        removedDocuments,\n        (key: DocumentKey) => {\n          return this.referenceDelegate.markPotentiallyOrphaned(\n            transaction,\n            key\n          );\n        }\n      );\n    });\n  }\n\n  /**\n   * Clears the cached keys for a mutation batch. This method should be\n   * called by secondary clients after they process mutation updates.\n   *\n   * Note that this method does not have to be called from primary clients as\n   * the corresponding cache entries are cleared when an acknowledged or\n   * rejected batch is removed from the mutation queue.\n   */\n  // PORTING NOTE: Multi-tab only\n  removeCachedMutationKeys(batchId: BatchId): void {\n    delete this.documentKeysByBatchId[batchId];\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return this.checkEmpty(txn).next(empty => {\n      if (!empty) {\n        return PersistencePromise.resolve();\n      }\n\n      // Verify that there are no entries in the documentMutations index if\n      // the queue is empty.\n      const startRange = IDBKeyRange.lowerBound(\n        DbDocumentMutation.prefixForUser(this.userId)\n      );\n      const danglingMutationReferences: ResourcePath[] = [];\n      return documentMutationsStore(txn)\n        .iterate({ range: startRange }, (key, _, control) => {\n          const userID = key[0];\n          if (userID !== this.userId) {\n            control.done();\n            return;\n          } else {\n            const path = decodeResourcePath(key[1]);\n            danglingMutationReferences.push(path);\n          }\n        })\n        .next(() => {\n          hardAssert(\n            danglingMutationReferences.length === 0,\n            'Document leak -- detected dangling mutation references when queue is empty. ' +\n              'Dangling keys: ' +\n              danglingMutationReferences.map(p => p.canonicalString())\n          );\n        });\n    });\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return mutationQueueContainsKey(txn, this.userId, key);\n  }\n\n  // PORTING NOTE: Multi-tab only (state is held in memory in other clients).\n  /** Returns the mutation queue's metadata from IndexedDb. */\n  private getMutationQueueMetadata(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<DbMutationQueue> {\n    return mutationQueuesStore(transaction)\n      .get(this.userId)\n      .next((metadata: DbMutationQueue | null) => {\n        return (\n          metadata ||\n          new DbMutationQueue(\n            this.userId,\n            BATCHID_UNKNOWN,\n            /*lastStreamToken=*/ ''\n          )\n        );\n      });\n  }\n}\n\n/**\n * @return true if the mutation queue for the given user contains a pending\n *         mutation for the given key.\n */\nfunction mutationQueueContainsKey(\n  txn: PersistenceTransaction,\n  userId: string,\n  key: DocumentKey\n): PersistencePromise<boolean> {\n  const indexKey = DbDocumentMutation.prefixForPath(userId, key.path);\n  const encodedPath = indexKey[1];\n  const startRange = IDBKeyRange.lowerBound(indexKey);\n  let containsKey = false;\n  return documentMutationsStore(txn)\n    .iterate({ range: startRange, keysOnly: true }, (key, value, control) => {\n      const [userID, keyPath, /*batchID*/ _] = key;\n      if (userID === userId && keyPath === encodedPath) {\n        containsKey = true;\n      }\n      control.done();\n    })\n    .next(() => containsKey);\n}\n\n/** Returns true if any mutation queue contains the given document. */\nexport function mutationQueuesContainKey(\n  txn: PersistenceTransaction,\n  docKey: DocumentKey\n): PersistencePromise<boolean> {\n  let found = false;\n  return mutationQueuesStore(txn)\n    .iterateSerial(userId => {\n      return mutationQueueContainsKey(txn, userId, docKey).next(containsKey => {\n        if (containsKey) {\n          found = true;\n        }\n        return PersistencePromise.resolve(!containsKey);\n      });\n    })\n    .next(() => found);\n}\n\n/**\n * Delete a mutation batch and the associated document mutations.\n * @return A PersistencePromise of the document mutations that were removed.\n */\nexport function removeMutationBatch(\n  txn: SimpleDbTransaction,\n  userId: string,\n  batch: MutationBatch\n): PersistencePromise<DocumentKey[]> {\n  const mutationStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n    DbMutationBatch.store\n  );\n  const indexTxn = txn.store<DbDocumentMutationKey, DbDocumentMutation>(\n    DbDocumentMutation.store\n  );\n  const promises: Array<PersistencePromise<void>> = [];\n\n  const range = IDBKeyRange.only(batch.batchId);\n  let numDeleted = 0;\n  const removePromise = mutationStore.iterate(\n    { range },\n    (key, value, control) => {\n      numDeleted++;\n      return control.delete();\n    }\n  );\n  promises.push(\n    removePromise.next(() => {\n      hardAssert(\n        numDeleted === 1,\n        'Dangling document-mutation reference found: Missing batch ' +\n          batch.batchId\n      );\n    })\n  );\n  const removedDocuments: DocumentKey[] = [];\n  for (const mutation of batch.mutations) {\n    const indexKey = DbDocumentMutation.key(\n      userId,\n      mutation.key.path,\n      batch.batchId\n    );\n    promises.push(indexTxn.delete(indexKey));\n    removedDocuments.push(mutation.key);\n  }\n  return PersistencePromise.waitFor(promises).next(() => removedDocuments);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbMutationBatchKey, DbMutationBatch> {\n  return IndexedDbPersistence.getStore<DbMutationBatchKey, DbMutationBatch>(\n    txn,\n    DbMutationBatch.store\n  );\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbDocumentMutationKey, DbDocumentMutation> {\n  return IndexedDbPersistence.getStore<\n    DbDocumentMutationKey,\n    DbDocumentMutation\n  >(txn, DbDocumentMutation.store);\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbMutationQueueKey, DbMutationQueue> {\n  return IndexedDbPersistence.getStore<DbMutationQueueKey, DbMutationQueue>(\n    txn,\n    DbMutationQueue.store\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, ListenSequenceNumber, TargetId } from '../core/types';\nimport { ResourcePath } from '../model/path';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, hardAssert } from '../util/assert';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport {\n  decodeResourcePath,\n  EncodedResourcePath,\n  encodeResourcePath\n} from './encoded_resource_path';\nimport { removeMutationBatch } from './indexeddb_mutation_queue';\nimport { dbDocumentSize } from './indexeddb_remote_document_cache';\nimport {\n  fromDbMutationBatch,\n  fromDbTarget,\n  LocalSerializer,\n  toDbTarget\n} from './local_serializer';\nimport { MemoryCollectionParentIndex } from './memory_index_manager';\nimport { PersistencePromise } from './persistence_promise';\nimport { SimpleDbSchemaConverter, SimpleDbTransaction } from './simple_db';\n\n/**\n * Schema Version for the Web client:\n * 1.  Initial version including Mutation Queue, Query Cache, and Remote\n *     Document Cache\n * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No\n *     longer required because migration 3 unconditionally clears it.\n * 3.  Dropped and re-created Query Cache to deal with cache corruption related\n *     to limbo resolution. Addresses\n *     https://github.com/firebase/firebase-ios-sdk/issues/1548\n * 4.  Multi-Tab Support.\n * 5.  Removal of held write acks.\n * 6.  Create document global for tracking document cache size.\n * 7.  Ensure every cached document has a sentinel row with a sequence number.\n * 8.  Add collection-parent index for Collection Group queries.\n * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than\n *     an auto-incrementing ID. This is required for Index-Free queries.\n * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.\n */\nexport const SCHEMA_VERSION = 10;\n\n/** Performs database creation and schema upgrades. */\nexport class SchemaConverter implements SimpleDbSchemaConverter {\n  constructor(private readonly serializer: LocalSerializer) {}\n\n  /**\n   * Performs database creation and schema upgrades.\n   *\n   * Note that in production, this method is only ever used to upgrade the schema\n   * to SCHEMA_VERSION. Different values of toVersion are only used for testing\n   * and local feature development.\n   */\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void> {\n    hardAssert(\n      fromVersion < toVersion &&\n        fromVersion >= 0 &&\n        toVersion <= SCHEMA_VERSION,\n      `Unexpected schema upgrade from v${fromVersion} to v${toVersion}.`\n    );\n\n    const simpleDbTransaction = new SimpleDbTransaction(txn);\n\n    if (fromVersion < 1 && toVersion >= 1) {\n      createPrimaryClientStore(db);\n      createMutationQueue(db);\n      createQueryCache(db);\n      createRemoteDocumentCache(db);\n    }\n\n    // Migration 2 to populate the targetGlobal object no longer needed since\n    // migration 3 unconditionally clears it.\n\n    let p = PersistencePromise.resolve();\n    if (fromVersion < 3 && toVersion >= 3) {\n      // Brand new clients don't need to drop and recreate--only clients that\n      // potentially have corrupt data.\n      if (fromVersion !== 0) {\n        dropQueryCache(db);\n        createQueryCache(db);\n      }\n      p = p.next(() => writeEmptyTargetGlobalEntry(simpleDbTransaction));\n    }\n\n    if (fromVersion < 4 && toVersion >= 4) {\n      if (fromVersion !== 0) {\n        // Schema version 3 uses auto-generated keys to generate globally unique\n        // mutation batch IDs (this was previously ensured internally by the\n        // client). To migrate to the new schema, we have to read all mutations\n        // and write them back out. We preserve the existing batch IDs to guarantee\n        // consistency with other object stores. Any further mutation batch IDs will\n        // be auto-generated.\n        p = p.next(() =>\n          upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction)\n        );\n      }\n\n      p = p.next(() => {\n        createClientMetadataStore(db);\n      });\n    }\n\n    if (fromVersion < 5 && toVersion >= 5) {\n      p = p.next(() => this.removeAcknowledgedMutations(simpleDbTransaction));\n    }\n\n    if (fromVersion < 6 && toVersion >= 6) {\n      p = p.next(() => {\n        createDocumentGlobalStore(db);\n        return this.addDocumentGlobal(simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 7 && toVersion >= 7) {\n      p = p.next(() => this.ensureSequenceNumbers(simpleDbTransaction));\n    }\n\n    if (fromVersion < 8 && toVersion >= 8) {\n      p = p.next(() =>\n        this.createCollectionParentIndex(db, simpleDbTransaction)\n      );\n    }\n\n    if (fromVersion < 9 && toVersion >= 9) {\n      p = p.next(() => {\n        // Multi-Tab used to manage its own changelog, but this has been moved\n        // to the DbRemoteDocument object store itself. Since the previous change\n        // log only contained transient data, we can drop its object store.\n        dropRemoteDocumentChangesStore(db);\n        createRemoteDocumentReadTimeIndex(txn);\n      });\n    }\n\n    if (fromVersion < 10 && toVersion >= 10) {\n      p = p.next(() => this.rewriteCanonicalIds(simpleDbTransaction));\n    }\n    return p;\n  }\n\n  private addDocumentGlobal(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    let byteCount = 0;\n    return txn\n      .store<DbRemoteDocumentKey, DbRemoteDocument>(DbRemoteDocument.store)\n      .iterate((_, doc) => {\n        byteCount += dbDocumentSize(doc);\n      })\n      .next(() => {\n        const metadata = new DbRemoteDocumentGlobal(byteCount);\n        return txn\n          .store<DbRemoteDocumentGlobalKey, DbRemoteDocumentGlobal>(\n            DbRemoteDocumentGlobal.store\n          )\n          .put(DbRemoteDocumentGlobal.key, metadata);\n      });\n  }\n\n  private removeAcknowledgedMutations(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const queuesStore = txn.store<DbMutationQueueKey, DbMutationQueue>(\n      DbMutationQueue.store\n    );\n    const mutationsStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n      DbMutationBatch.store\n    );\n\n    return queuesStore.loadAll().next(queues => {\n      return PersistencePromise.forEach(queues, (queue: DbMutationQueue) => {\n        const range = IDBKeyRange.bound(\n          [queue.userId, BATCHID_UNKNOWN],\n          [queue.userId, queue.lastAcknowledgedBatchId]\n        );\n\n        return mutationsStore\n          .loadAll(DbMutationBatch.userMutationsIndex, range)\n          .next(dbBatches => {\n            return PersistencePromise.forEach(\n              dbBatches,\n              (dbBatch: DbMutationBatch) => {\n                hardAssert(\n                  dbBatch.userId === queue.userId,\n                  `Cannot process batch ${dbBatch.batchId} from unexpected user`\n                );\n                const batch = fromDbMutationBatch(this.serializer, dbBatch);\n\n                return removeMutationBatch(\n                  txn,\n                  queue.userId,\n                  batch\n                ).next(() => {});\n              }\n            );\n          });\n      });\n    });\n  }\n\n  /**\n   * Ensures that every document in the remote document cache has a corresponding sentinel row\n   * with a sequence number. Missing rows are given the most recently used sequence number.\n   */\n  private ensureSequenceNumbers(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const documentTargetStore = txn.store<\n      DbTargetDocumentKey,\n      DbTargetDocument\n    >(DbTargetDocument.store);\n    const documentsStore = txn.store<DbRemoteDocumentKey, DbRemoteDocument>(\n      DbRemoteDocument.store\n    );\n    const globalTargetStore = txn.store<DbTargetGlobalKey, DbTargetGlobal>(\n      DbTargetGlobal.store\n    );\n\n    return globalTargetStore.get(DbTargetGlobal.key).next(metadata => {\n      debugAssert(\n        !!metadata,\n        'Metadata should have been written during the version 3 migration'\n      );\n      const writeSentinelKey = (\n        path: ResourcePath\n      ): PersistencePromise<void> => {\n        return documentTargetStore.put(\n          new DbTargetDocument(\n            0,\n            encodeResourcePath(path),\n            metadata!.highestListenSequenceNumber!\n          )\n        );\n      };\n\n      const promises: Array<PersistencePromise<void>> = [];\n      return documentsStore\n        .iterate((key, doc) => {\n          const path = new ResourcePath(key);\n          const docSentinelKey = sentinelKey(path);\n          promises.push(\n            documentTargetStore.get(docSentinelKey).next(maybeSentinel => {\n              if (!maybeSentinel) {\n                return writeSentinelKey(path);\n              } else {\n                return PersistencePromise.resolve();\n              }\n            })\n          );\n        })\n        .next(() => PersistencePromise.waitFor(promises));\n    });\n  }\n\n  private createCollectionParentIndex(\n    db: IDBDatabase,\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    // Create the index.\n    db.createObjectStore(DbCollectionParent.store, {\n      keyPath: DbCollectionParent.keyPath\n    });\n\n    const collectionParentsStore = txn.store<\n      DbCollectionParentKey,\n      DbCollectionParent\n    >(DbCollectionParent.store);\n\n    // Helper to add an index entry iff we haven't already written it.\n    const cache = new MemoryCollectionParentIndex();\n    const addEntry = (\n      collectionPath: ResourcePath\n    ): PersistencePromise<void> | undefined => {\n      if (cache.add(collectionPath)) {\n        const collectionId = collectionPath.lastSegment();\n        const parentPath = collectionPath.popLast();\n        return collectionParentsStore.put({\n          collectionId,\n          parent: encodeResourcePath(parentPath)\n        });\n      }\n    };\n\n    // Index existing remote documents.\n    return txn\n      .store<DbRemoteDocumentKey, DbRemoteDocument>(DbRemoteDocument.store)\n      .iterate({ keysOnly: true }, (pathSegments, _) => {\n        const path = new ResourcePath(pathSegments);\n        return addEntry(path.popLast());\n      })\n      .next(() => {\n        // Index existing mutations.\n        return txn\n          .store<DbDocumentMutationKey, DbDocumentMutation>(\n            DbDocumentMutation.store\n          )\n          .iterate({ keysOnly: true }, ([userID, encodedPath, batchId], _) => {\n            const path = decodeResourcePath(encodedPath);\n            return addEntry(path.popLast());\n          });\n      });\n  }\n\n  private rewriteCanonicalIds(\n    txn: SimpleDbTransaction\n  ): PersistencePromise<void> {\n    const targetStore = txn.store<DbTargetKey, DbTarget>(DbTarget.store);\n    return targetStore.iterate((key, originalDbTarget) => {\n      const originalTargetData = fromDbTarget(originalDbTarget);\n      const updatedDbTarget = toDbTarget(this.serializer, originalTargetData);\n      return targetStore.put(updatedDbTarget);\n    });\n  }\n}\n\nfunction sentinelKey(path: ResourcePath): DbTargetDocumentKey {\n  return [0, encodeResourcePath(path)];\n}\n\n/**\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\n */\nexport class DbTimestamp {\n  constructor(public seconds: number, public nanoseconds: number) {}\n}\n\n/** A timestamp type that can be used in IndexedDb keys. */\nexport type DbTimestampKey = [/* seconds */ number, /* nanos */ number];\n\n// The key for the singleton object in the DbPrimaryClient is a single string.\nexport type DbPrimaryClientKey = typeof DbPrimaryClient.key;\n\n/**\n * A singleton object to be stored in the 'owner' store in IndexedDb.\n *\n * A given database can have a single primary tab assigned at a given time. That\n * tab must validate that it is still holding the primary lease before every\n * operation that requires locked access. The primary tab should regularly\n * write an updated timestamp to this lease to prevent other tabs from\n * \"stealing\" the primary lease\n */\nexport class DbPrimaryClient {\n  /**\n   * Name of the IndexedDb object store.\n   *\n   * Note that the name 'owner' is chosen to ensure backwards compatibility with\n   * older clients that only supported single locked access to the persistence\n   * layer.\n   */\n  static store = 'owner';\n\n  /**\n   * The key string used for the single object that exists in the\n   * DbPrimaryClient store.\n   */\n  static key = 'owner';\n\n  constructor(\n    public ownerId: string,\n    /** Whether to allow shared access from multiple tabs. */\n    public allowTabSynchronization: boolean,\n    public leaseTimestampMs: number\n  ) {}\n}\n\nfunction createPrimaryClientStore(db: IDBDatabase): void {\n  db.createObjectStore(DbPrimaryClient.store);\n}\n\n/** Object keys in the 'mutationQueues' store are userId strings. */\nexport type DbMutationQueueKey = string;\n\n/**\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\n *\n * Each user gets a single queue of MutationBatches to apply to the server.\n * DbMutationQueue tracks the metadata about the queue.\n */\nexport class DbMutationQueue {\n  /** Name of the IndexedDb object store.  */\n  static store = 'mutationQueues';\n\n  /** Keys are automatically assigned via the userId property. */\n  static keyPath = 'userId';\n\n  constructor(\n    /**\n     * The normalized user ID to which this queue belongs.\n     */\n    public userId: string,\n    /**\n     * An identifier for the highest numbered batch that has been acknowledged\n     * by the server. All MutationBatches in this queue with batchIds less\n     * than or equal to this value are considered to have been acknowledged by\n     * the server.\n     *\n     * NOTE: this is deprecated and no longer used by the code.\n     */\n    public lastAcknowledgedBatchId: number,\n    /**\n     * A stream token that was previously sent by the server.\n     *\n     * See StreamingWriteRequest in datastore.proto for more details about\n     * usage.\n     *\n     * After sending this token, earlier tokens may not be used anymore so\n     * only a single stream token is retained.\n     *\n     * NOTE: this is deprecated and no longer used by the code.\n     */\n    public lastStreamToken: string\n  ) {}\n}\n\n/** The 'mutations' store  is keyed by batch ID. */\nexport type DbMutationBatchKey = BatchId;\n\n/**\n * An object to be stored in the 'mutations' store in IndexedDb.\n *\n * Represents a batch of user-level mutations intended to be sent to the server\n * in a single write. Each user-level batch gets a separate DbMutationBatch\n * with a new batchId.\n */\nexport class DbMutationBatch {\n  /** Name of the IndexedDb object store.  */\n  static store = 'mutations';\n\n  /** Keys are automatically assigned via the userId, batchId properties. */\n  static keyPath = 'batchId';\n\n  /** The index name for lookup of mutations by user. */\n  static userMutationsIndex = 'userMutationsIndex';\n\n  /** The user mutations index is keyed by [userId, batchId] pairs. */\n  static userMutationsKeyPath = ['userId', 'batchId'];\n\n  constructor(\n    /**\n     * The normalized user ID to which this batch belongs.\n     */\n    public userId: string,\n    /**\n     * An identifier for this batch, allocated using an auto-generated key.\n     */\n    public batchId: BatchId,\n    /**\n     * The local write time of the batch, stored as milliseconds since the\n     * epoch.\n     */\n    public localWriteTimeMs: number,\n    /**\n     * A list of \"mutations\" that represent a partial base state from when this\n     * write batch was initially created. During local application of the write\n     * batch, these baseMutations are applied prior to the real writes in order\n     * to override certain document fields from the remote document cache. This\n     * is necessary in the case of non-idempotent writes (e.g. `increment()`\n     * transforms) to make sure that the local view of the modified documents\n     * doesn't flicker if the remote document cache receives the result of the\n     * non-idempotent write before the write is removed from the queue.\n     *\n     * These mutations are never sent to the backend.\n     */\n    public baseMutations: api.Write[] | undefined,\n    /**\n     * A list of mutations to apply. All mutations will be applied atomically.\n     *\n     * Mutations are serialized via toMutation().\n     */\n    public mutations: api.Write[]\n  ) {}\n}\n\n/**\n * The key for a db document mutation, which is made up of a userID, path, and\n * batchId. Note that the path must be serialized into a form that indexedDB can\n * sort.\n */\nexport type DbDocumentMutationKey = [string, EncodedResourcePath, BatchId];\n\nfunction createMutationQueue(db: IDBDatabase): void {\n  db.createObjectStore(DbMutationQueue.store, {\n    keyPath: DbMutationQueue.keyPath\n  });\n\n  const mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {\n    keyPath: DbMutationBatch.keyPath,\n    autoIncrement: true\n  });\n  mutationBatchesStore.createIndex(\n    DbMutationBatch.userMutationsIndex,\n    DbMutationBatch.userMutationsKeyPath,\n    { unique: true }\n  );\n\n  db.createObjectStore(DbDocumentMutation.store);\n}\n\n/**\n * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads\n * and rewrites all data.\n */\nfunction upgradeMutationBatchSchemaAndMigrateData(\n  db: IDBDatabase,\n  txn: SimpleDbTransaction\n): PersistencePromise<void> {\n  const v1MutationsStore = txn.store<[string, number], DbMutationBatch>(\n    DbMutationBatch.store\n  );\n  return v1MutationsStore.loadAll().next(existingMutations => {\n    db.deleteObjectStore(DbMutationBatch.store);\n\n    const mutationsStore = db.createObjectStore(DbMutationBatch.store, {\n      keyPath: DbMutationBatch.keyPath,\n      autoIncrement: true\n    });\n    mutationsStore.createIndex(\n      DbMutationBatch.userMutationsIndex,\n      DbMutationBatch.userMutationsKeyPath,\n      { unique: true }\n    );\n\n    const v3MutationsStore = txn.store<DbMutationBatchKey, DbMutationBatch>(\n      DbMutationBatch.store\n    );\n    const writeAll = existingMutations.map(mutation =>\n      v3MutationsStore.put(mutation)\n    );\n\n    return PersistencePromise.waitFor(writeAll);\n  });\n}\n\n/**\n * An object to be stored in the 'documentMutations' store in IndexedDb.\n *\n * A manually maintained index of all the mutation batches that affect a given\n * document key. The rows in this table are references based on the contents of\n * DbMutationBatch.mutations.\n */\nexport class DbDocumentMutation {\n  static store = 'documentMutations';\n\n  /**\n   * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n   * over all of a user's document mutations.\n   */\n  static prefixForUser(userId: string): [string] {\n    return [userId];\n  }\n\n  /**\n   * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n   * index to iterate over all at document mutations for a given path or lower.\n   */\n  static prefixForPath(\n    userId: string,\n    path: ResourcePath\n  ): [string, EncodedResourcePath] {\n    return [userId, encodeResourcePath(path)];\n  }\n\n  /**\n   * Creates a full index key of [userId, encodedPath, batchId] for inserting\n   * and deleting into the DbDocumentMutations index.\n   */\n  static key(\n    userId: string,\n    path: ResourcePath,\n    batchId: BatchId\n  ): DbDocumentMutationKey {\n    return [userId, encodeResourcePath(path), batchId];\n  }\n\n  /**\n   * Because we store all the useful information for this store in the key,\n   * there is no useful information to store as the value. The raw (unencoded)\n   * path cannot be stored because IndexedDb doesn't store prototype\n   * information.\n   */\n  static PLACEHOLDER = new DbDocumentMutation();\n\n  private constructor() {}\n}\n\n/**\n * A key in the 'remoteDocuments' object store is a string array containing the\n * segments that make up the path.\n */\nexport type DbRemoteDocumentKey = string[];\n\nfunction createRemoteDocumentCache(db: IDBDatabase): void {\n  db.createObjectStore(DbRemoteDocument.store);\n}\n\n/**\n * Represents the known absence of a document at a particular version.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nexport class DbNoDocument {\n  constructor(public path: string[], public readTime: DbTimestamp) {}\n}\n\n/**\n * Represents a document that is known to exist but whose data is unknown.\n * Stored in IndexedDb as part of a DbRemoteDocument object.\n */\nexport class DbUnknownDocument {\n  constructor(public path: string[], public version: DbTimestamp) {}\n}\n\n/**\n * An object to be stored in the 'remoteDocuments' store in IndexedDb.\n * It represents either:\n *\n * - A complete document.\n * - A \"no document\" representing a document that is known not to exist (at\n * some version).\n * - An \"unknown document\" representing a document that is known to exist (at\n * some version) but whose contents are unknown.\n *\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\n * be made more general if necessary.\n */\nexport class DbRemoteDocument {\n  static store = 'remoteDocuments';\n\n  /**\n   * An index that provides access to all entries sorted by read time (which\n   * corresponds to the last modification time of each row).\n   *\n   * This index is used to provide a changelog for Multi-Tab.\n   */\n  static readTimeIndex = 'readTimeIndex';\n\n  static readTimeIndexPath = 'readTime';\n\n  /**\n   * An index that provides access to documents in a collection sorted by read\n   * time.\n   *\n   * This index is used to allow the RemoteDocumentCache to fetch newly changed\n   * documents in a collection.\n   */\n  static collectionReadTimeIndex = 'collectionReadTimeIndex';\n\n  static collectionReadTimeIndexPath = ['parentPath', 'readTime'];\n\n  // TODO: We are currently storing full document keys almost three times\n  // (once as part of the primary key, once - partly - as `parentPath` and once\n  // inside the encoded documents). During our next migration, we should\n  // rewrite the primary key as parentPath + document ID which would allow us\n  // to drop one value.\n\n  constructor(\n    /**\n     * Set to an instance of DbUnknownDocument if the data for a document is\n     * not known, but it is known that a document exists at the specified\n     * version (e.g. it had a successful update applied to it)\n     */\n    public unknownDocument: DbUnknownDocument | null | undefined,\n    /**\n     * Set to an instance of a DbNoDocument if it is known that no document\n     * exists.\n     */\n    public noDocument: DbNoDocument | null,\n    /**\n     * Set to an instance of a Document if there's a cached version of the\n     * document.\n     */\n    public document: api.Document | null,\n    /**\n     * Documents that were written to the remote document store based on\n     * a write acknowledgment are marked with `hasCommittedMutations`. These\n     * documents are potentially inconsistent with the backend's copy and use\n     * the write's commit version as their document version.\n     */\n    public hasCommittedMutations: boolean | undefined,\n\n    /**\n     * When the document was read from the backend. Undefined for data written\n     * prior to schema version 9.\n     */\n    public readTime: DbTimestampKey | undefined,\n\n    /**\n     * The path of the collection this document is part of. Undefined for data\n     * written prior to schema version 9.\n     */\n    public parentPath: string[] | undefined\n  ) {}\n}\n\n/**\n * Contains a single entry that has metadata about the remote document cache.\n */\nexport class DbRemoteDocumentGlobal {\n  static store = 'remoteDocumentGlobal';\n\n  static key = 'remoteDocumentGlobalKey';\n\n  /**\n   * @param byteSize Approximately the total size in bytes of all the documents in the document\n   * cache.\n   */\n  constructor(public byteSize: number) {}\n}\n\nexport type DbRemoteDocumentGlobalKey = typeof DbRemoteDocumentGlobal.key;\n\nfunction createDocumentGlobalStore(db: IDBDatabase): void {\n  db.createObjectStore(DbRemoteDocumentGlobal.store);\n}\n\n/**\n * A key in the 'targets' object store is a targetId of the query.\n */\nexport type DbTargetKey = TargetId;\n\n/**\n * The persisted type for a query nested with in the 'targets' store in\n * IndexedDb. We use the proto definitions for these two kinds of queries in\n * order to avoid writing extra serialization logic.\n */\nexport type DbQuery = api.QueryTarget | api.DocumentsTarget;\n\n/**\n * An object to be stored in the 'targets' store in IndexedDb.\n *\n * This is based on and should be kept in sync with the proto used in the iOS\n * client.\n *\n * Each query the client listens to against the server is tracked on disk so\n * that the query can be efficiently resumed on restart.\n */\nexport class DbTarget {\n  static store = 'targets';\n\n  /** Keys are automatically assigned via the targetId property. */\n  static keyPath = 'targetId';\n\n  /** The name of the queryTargets index. */\n  static queryTargetsIndexName = 'queryTargetsIndex';\n\n  /**\n   * The index of all canonicalIds to the targets that they match. This is not\n   * a unique mapping because canonicalId does not promise a unique name for all\n   * possible queries, so we append the targetId to make the mapping unique.\n   */\n  static queryTargetsKeyPath = ['canonicalId', 'targetId'];\n\n  constructor(\n    /**\n     * An auto-generated sequential numeric identifier for the query.\n     *\n     * Queries are stored using their canonicalId as the key, but these\n     * canonicalIds can be quite long so we additionally assign a unique\n     * queryId which can be used by referenced data structures (e.g.\n     * indexes) to minimize the on-disk cost.\n     */\n    public targetId: TargetId,\n    /**\n     * The canonical string representing this query. This is not unique.\n     */\n    public canonicalId: string,\n    /**\n     * The last readTime received from the Watch Service for this query.\n     *\n     * This is the same value as TargetChange.read_time in the protos.\n     */\n    public readTime: DbTimestamp,\n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data\n     * that matches the query. The resume token essentially identifies a\n     * point in time from which the server should resume sending results.\n     *\n     * This is related to the snapshotVersion in that the resumeToken\n     * effectively also encodes that value, but the resumeToken is opaque\n     * and sometimes encodes additional information.\n     *\n     * A consequence of this is that the resumeToken should be used when\n     * asking the server to reason about where this client is in the watch\n     * stream, but the client should use the snapshotVersion for its own\n     * purposes.\n     *\n     * This is the same value as TargetChange.resume_token in the protos.\n     */\n    public resumeToken: string,\n    /**\n     * A sequence number representing the last time this query was\n     * listened to, used for garbage collection purposes.\n     *\n     * Conventionally this would be a timestamp value, but device-local\n     * clocks are unreliable and they must be able to create new listens\n     * even while disconnected. Instead this should be a monotonically\n     * increasing number that's incremented on each listen call.\n     *\n     * This is different from the queryId since the queryId is an\n     * immutable identifier assigned to the Query on first use while\n     * lastListenSequenceNumber is updated every time the query is\n     * listened to.\n     */\n    public lastListenSequenceNumber: number,\n    /**\n     * Denotes the maximum snapshot version at which the associated query view\n     * contained no limbo documents.  Undefined for data written prior to\n     * schema version 9.\n     */\n    public lastLimboFreeSnapshotVersion: DbTimestamp | undefined,\n    /**\n     * The query for this target.\n     *\n     * Because canonical ids are not unique we must store the actual query. We\n     * use the proto to have an object we can persist without having to\n     * duplicate translation logic to and from a `Query` object.\n     */\n    public query: DbQuery\n  ) {}\n}\n\n/**\n * The key for a DbTargetDocument, containing a targetId and an encoded resource\n * path.\n */\nexport type DbTargetDocumentKey = [TargetId, EncodedResourcePath];\n\n/**\n * An object representing an association between a target and a document, or a\n * sentinel row marking the last sequence number at which a document was used.\n * Each document cached must have a corresponding sentinel row before lru\n * garbage collection is enabled.\n *\n * The target associations and sentinel rows are co-located so that orphaned\n * documents and their sequence numbers can be identified efficiently via a scan\n * of this store.\n */\nexport class DbTargetDocument {\n  /** Name of the IndexedDb object store.  */\n  static store = 'targetDocuments';\n\n  /** Keys are automatically assigned via the targetId, path properties. */\n  static keyPath = ['targetId', 'path'];\n\n  /** The index name for the reverse index. */\n  static documentTargetsIndex = 'documentTargetsIndex';\n\n  /** We also need to create the reverse index for these properties. */\n  static documentTargetsKeyPath = ['path', 'targetId'];\n\n  constructor(\n    /**\n     * The targetId identifying a target or 0 for a sentinel row.\n     */\n    public targetId: TargetId,\n    /**\n     * The path to the document, as encoded in the key.\n     */\n    public path: EncodedResourcePath,\n    /**\n     * If this is a sentinel row, this should be the sequence number of the last\n     * time the document specified by `path` was used. Otherwise, it should be\n     * `undefined`.\n     */\n    public sequenceNumber?: ListenSequenceNumber\n  ) {\n    debugAssert(\n      (targetId === 0) === (sequenceNumber !== undefined),\n      'A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number'\n    );\n  }\n}\n\n/**\n * The type to represent the single allowed key for the DbTargetGlobal store.\n */\nexport type DbTargetGlobalKey = typeof DbTargetGlobal.key;\n\n/**\n * A record of global state tracked across all Targets, tracked separately\n * to avoid the need for extra indexes.\n *\n * This should be kept in-sync with the proto used in the iOS client.\n */\nexport class DbTargetGlobal {\n  /**\n   * The key string used for the single object that exists in the\n   * DbTargetGlobal store.\n   */\n  static key = 'targetGlobalKey';\n  static store = 'targetGlobal';\n\n  constructor(\n    /**\n     * The highest numbered target id across all targets.\n     *\n     * See DbTarget.targetId.\n     */\n    public highestTargetId: TargetId,\n    /**\n     * The highest numbered lastListenSequenceNumber across all targets.\n     *\n     * See DbTarget.lastListenSequenceNumber.\n     */\n    public highestListenSequenceNumber: number,\n    /**\n     * A global snapshot version representing the last consistent snapshot we\n     * received from the backend. This is monotonically increasing and any\n     * snapshots received from the backend prior to this version (e.g. for\n     * targets resumed with a resumeToken) should be suppressed (buffered)\n     * until the backend has caught up to this snapshot version again. This\n     * prevents our cache from ever going backwards in time.\n     */\n    public lastRemoteSnapshotVersion: DbTimestamp,\n    /**\n     * The number of targets persisted.\n     */\n    public targetCount: number\n  ) {}\n}\n\n/**\n * The key for a DbCollectionParent entry, containing the collection ID\n * and the parent path that contains it. Note that the parent path will be an\n * empty path in the case of root-level collections.\n */\nexport type DbCollectionParentKey = [string, EncodedResourcePath];\n\n/**\n * An object representing an association between a Collection id (e.g. 'messages')\n * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.\n * This is used to efficiently find all collections to query when performing\n * a Collection Group query.\n */\nexport class DbCollectionParent {\n  /** Name of the IndexedDb object store. */\n  static store = 'collectionParents';\n\n  /** Keys are automatically assigned via the collectionId, parent properties. */\n  static keyPath = ['collectionId', 'parent'];\n\n  constructor(\n    /**\n     * The collectionId (e.g. 'messages')\n     */\n    public collectionId: string,\n    /**\n     * The path to the parent (either a document location or an empty path for\n     * a root-level collection).\n     */\n    public parent: EncodedResourcePath\n  ) {}\n}\n\nfunction createQueryCache(db: IDBDatabase): void {\n  const targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {\n    keyPath: DbTargetDocument.keyPath\n  });\n  targetDocumentsStore.createIndex(\n    DbTargetDocument.documentTargetsIndex,\n    DbTargetDocument.documentTargetsKeyPath,\n    { unique: true }\n  );\n\n  const targetStore = db.createObjectStore(DbTarget.store, {\n    keyPath: DbTarget.keyPath\n  });\n\n  // NOTE: This is unique only because the TargetId is the suffix.\n  targetStore.createIndex(\n    DbTarget.queryTargetsIndexName,\n    DbTarget.queryTargetsKeyPath,\n    { unique: true }\n  );\n  db.createObjectStore(DbTargetGlobal.store);\n}\n\nfunction dropQueryCache(db: IDBDatabase): void {\n  db.deleteObjectStore(DbTargetDocument.store);\n  db.deleteObjectStore(DbTarget.store);\n  db.deleteObjectStore(DbTargetGlobal.store);\n}\n\nfunction dropRemoteDocumentChangesStore(db: IDBDatabase): void {\n  if (db.objectStoreNames.contains('remoteDocumentChanges')) {\n    db.deleteObjectStore('remoteDocumentChanges');\n  }\n}\n\n/**\n * Creates the target global singleton row.\n *\n * @param {IDBTransaction} txn The version upgrade transaction for indexeddb\n */\nfunction writeEmptyTargetGlobalEntry(\n  txn: SimpleDbTransaction\n): PersistencePromise<void> {\n  const globalStore = txn.store<DbTargetGlobalKey, DbTargetGlobal>(\n    DbTargetGlobal.store\n  );\n  const metadata = new DbTargetGlobal(\n    /*highestTargetId=*/ 0,\n    /*lastListenSequenceNumber=*/ 0,\n    SnapshotVersion.min().toTimestamp(),\n    /*targetCount=*/ 0\n  );\n  return globalStore.put(DbTargetGlobal.key, metadata);\n}\n\n/**\n * Creates indices on the RemoteDocuments store used for both multi-tab\n * and Index-Free queries.\n */\nfunction createRemoteDocumentReadTimeIndex(txn: IDBTransaction): void {\n  const remoteDocumentStore = txn.objectStore(DbRemoteDocument.store);\n  remoteDocumentStore.createIndex(\n    DbRemoteDocument.readTimeIndex,\n    DbRemoteDocument.readTimeIndexPath,\n    { unique: false }\n  );\n  remoteDocumentStore.createIndex(\n    DbRemoteDocument.collectionReadTimeIndex,\n    DbRemoteDocument.collectionReadTimeIndexPath,\n    { unique: false }\n  );\n}\n\n/**\n * A record of the metadata state of each client.\n *\n * PORTING NOTE: This is used to synchronize multi-tab state and does not need\n * to be ported to iOS or Android.\n */\nexport class DbClientMetadata {\n  /** Name of the IndexedDb object store. */\n  static store = 'clientMetadata';\n\n  /** Keys are automatically assigned via the clientId properties. */\n  static keyPath = 'clientId';\n\n  constructor(\n    // Note: Previous schema versions included a field\n    // \"lastProcessedDocumentChangeId\". Don't use anymore.\n\n    /** The auto-generated client id assigned at client startup. */\n    public clientId: string,\n    /** The last time this state was updated. */\n    public updateTimeMs: number,\n    /** Whether the client's network connection is enabled. */\n    public networkEnabled: boolean,\n    /** Whether this client is running in a foreground tab. */\n    public inForeground: boolean\n  ) {}\n}\n\n/** Object keys in the 'clientMetadata' store are clientId strings. */\nexport type DbClientMetadataKey = string;\n\nfunction createClientMetadataStore(db: IDBDatabase): void {\n  db.createObjectStore(DbClientMetadata.store, {\n    keyPath: DbClientMetadata.keyPath\n  });\n}\n\n// Visible for testing\nexport const V1_STORES = [\n  DbMutationQueue.store,\n  DbMutationBatch.store,\n  DbDocumentMutation.store,\n  DbRemoteDocument.store,\n  DbTarget.store,\n  DbPrimaryClient.store,\n  DbTargetGlobal.store,\n  DbTargetDocument.store\n];\n\n// V2 is no longer usable (see comment at top of file)\n\n// Visible for testing\nexport const V3_STORES = V1_STORES;\n\n// Visible for testing\n// Note: DbRemoteDocumentChanges is no longer used and dropped with v9.\nexport const V4_STORES = [...V3_STORES, DbClientMetadata.store];\n\n// V5 does not change the set of stores.\n\nexport const V6_STORES = [...V4_STORES, DbRemoteDocumentGlobal.store];\n\n// V7 does not change the set of stores.\n\nexport const V8_STORES = [...V6_STORES, DbCollectionParent.store];\n\n// V9 does not change the set of stores.\n\n// V10 does not change the set of stores.\n\n/**\n * The list of all default IndexedDB stores used throughout the SDK. This is\n * used when creating transactions so that access across all stores is done\n * atomically.\n */\nexport const ALL_STORES = V8_STORES;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\nimport { debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport { SCHEMA_VERSION } from './indexeddb_schema';\nimport { PersistencePromise } from './persistence_promise';\n\n// References to `window` are guarded by SimpleDb.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'SimpleDb';\n\n/**\n * The maximum number of retry attempts for an IndexedDb transaction that fails\n * with a DOMException.\n */\nconst TRANSACTION_RETRY_COUNT = 3;\n\n// The different modes supported by `SimpleDb.runTransaction()`\ntype SimpleDbTransactionMode = 'readonly' | 'readwrite';\n\nexport interface SimpleDbSchemaConverter {\n  createOrUpgrade(\n    db: IDBDatabase,\n    txn: IDBTransaction,\n    fromVersion: number,\n    toVersion: number\n  ): PersistencePromise<void>;\n}\n\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nexport class SimpleDb {\n  /**\n   * Opens the specified database, creating or upgrading it if necessary.\n   *\n   * Note that `version` must not be a downgrade. IndexedDB does not support downgrading the schema\n   * version. We currently do not support any way to do versioning outside of IndexedDB's versioning\n   * mechanism, as only version-upgrade transactions are allowed to do things like create\n   * objectstores.\n   */\n  static openOrCreate(\n    name: string,\n    version: number,\n    schemaConverter: SimpleDbSchemaConverter\n  ): Promise<SimpleDb> {\n    debugAssert(\n      SimpleDb.isAvailable(),\n      'IndexedDB not supported in current environment.'\n    );\n    logDebug(LOG_TAG, 'Opening database:', name);\n    return new PersistencePromise<SimpleDb>((resolve, reject) => {\n      // TODO(mikelehen): Investigate browser compatibility.\n      // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n      // suggests IE9 and older WebKit browsers handle upgrade\n      // differently. They expect setVersion, as described here:\n      // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n      const request = indexedDB.open(name, version);\n\n      request.onsuccess = (event: Event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        resolve(new SimpleDb(db));\n      };\n\n      request.onblocked = () => {\n        reject(\n          new FirestoreError(\n            Code.FAILED_PRECONDITION,\n            'Cannot upgrade IndexedDB schema while another tab is open. ' +\n              'Close all tabs that access Firestore and reload this page to proceed.'\n          )\n        );\n      };\n\n      request.onerror = (event: Event) => {\n        const error: DOMException = (event.target as IDBOpenDBRequest).error!;\n        if (error.name === 'VersionError') {\n          reject(\n            new FirestoreError(\n              Code.FAILED_PRECONDITION,\n              'A newer version of the Firestore SDK was previously used and so the persisted ' +\n                'data is not compatible with the version of the SDK you are now using. The SDK ' +\n                'will operate with persistence disabled. If you need persistence, please ' +\n                're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' +\n                'data for your app to start fresh.'\n            )\n          );\n        } else {\n          reject(error);\n        }\n      };\n\n      request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n        logDebug(\n          LOG_TAG,\n          'Database \"' + name + '\" requires upgrade from version:',\n          event.oldVersion\n        );\n        const db = (event.target as IDBOpenDBRequest).result;\n        schemaConverter\n          .createOrUpgrade(\n            db,\n            request.transaction!,\n            event.oldVersion,\n            SCHEMA_VERSION\n          )\n          .next(() => {\n            logDebug(\n              LOG_TAG,\n              'Database upgrade to version ' + SCHEMA_VERSION + ' complete'\n            );\n          });\n      };\n    }).toPromise();\n  }\n\n  /** Deletes the specified database. */\n  static delete(name: string): Promise<void> {\n    logDebug(LOG_TAG, 'Removing database:', name);\n    return wrapRequest<void>(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable(): boolean {\n    if (typeof indexedDB === 'undefined') {\n      return false;\n    }\n\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    }\n\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n\n    // Check the UA string to find out the browser.\n    const ua = getUA();\n\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n    // iOS Safari: Disable for users running iOS version < 10.\n    const iOSVersion = SimpleDb.getIOSVersion(ua);\n    const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\n\n    // Android browser: Disable for userse running version < 4.5.\n    const androidVersion = SimpleDb.getAndroidVersion(ua);\n    const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n\n    if (\n      ua.indexOf('MSIE ') > 0 ||\n      ua.indexOf('Trident/') > 0 ||\n      ua.indexOf('Edge/') > 0 ||\n      isUnsupportedIOS ||\n      isUnsupportedAndroid\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\n   * (see https://github.com/axemclion/IndexedDBShim).\n   */\n  static isMockPersistence(): boolean {\n    return (\n      typeof process !== 'undefined' &&\n      process.env?.USE_MOCK_PERSISTENCE === 'YES'\n    );\n  }\n\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n  static getStore<KeyType extends IDBValidKey, ValueType extends unknown>(\n    txn: SimpleDbTransaction,\n    store: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    return txn.store<KeyType, ValueType>(store);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n  static getIOSVersion(ua: string): number {\n    const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    const version = iOSVersionRegex\n      ? iOSVersionRegex[1]\n          .split('_')\n          .slice(0, 2)\n          .join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  // visible for testing\n  /** Parse User Agent to determine Android version. Returns -1 if not found. */\n  static getAndroidVersion(ua: string): number {\n    const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n    const version = androidVersionRegex\n      ? androidVersionRegex[1]\n          .split('.')\n          .slice(0, 2)\n          .join('.')\n      : '-1';\n    return Number(version);\n  }\n\n  constructor(private db: IDBDatabase) {\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\n    // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n    if (iOSVersion === 12.2) {\n      logError(\n        'Firestore persistence suffers from a bug in iOS 12.2 ' +\n          'Safari that may cause your app to stop working. See ' +\n          'https://stackoverflow.com/q/56496296/110915 for details ' +\n          'and a potential workaround.'\n      );\n    }\n  }\n\n  setVersionChangeListener(\n    versionChangeListener: (event: IDBVersionChangeEvent) => void\n  ): void {\n    this.db.onversionchange = (event: IDBVersionChangeEvent) => {\n      return versionChangeListener(event);\n    };\n  }\n\n  async runTransaction<T>(\n    mode: SimpleDbTransactionMode,\n    objectStores: string[],\n    transactionFn: (transaction: SimpleDbTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    const readonly = mode === 'readonly';\n    let attemptNumber = 0;\n\n    while (true) {\n      ++attemptNumber;\n\n      const transaction = SimpleDbTransaction.open(\n        this.db,\n        readonly ? 'readonly' : 'readwrite',\n        objectStores\n      );\n      try {\n        const transactionFnResult = transactionFn(transaction)\n          .catch(error => {\n            // Abort the transaction if there was an error.\n            transaction.abort(error);\n            // We cannot actually recover, and calling `abort()` will cause the transaction's\n            // completion promise to be rejected. This in turn means that we won't use\n            // `transactionFnResult` below. We return a rejection here so that we don't add the\n            // possibility of returning `void` to the type of `transactionFnResult`.\n            return PersistencePromise.reject<T>(error);\n          })\n          .toPromise();\n\n        // As noted above, errors are propagated by aborting the transaction. So\n        // we swallow any error here to avoid the browser logging it as unhandled.\n        transactionFnResult.catch(() => {});\n\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        await transaction.completionPromise;\n        return transactionFnResult;\n      } catch (error) {\n        // TODO(schmidt-sebastian): We could probably be smarter about this and\n        // not retry exceptions that are likely unrecoverable (such as quota\n        // exceeded errors).\n\n        // Note: We cannot use an instanceof check for FirestoreException, since the\n        // exception is wrapped in a generic error by our async/await handling.\n        const retryable =\n          error.name !== 'FirebaseError' &&\n          attemptNumber < TRANSACTION_RETRY_COUNT;\n        logDebug(\n          LOG_TAG,\n          'Transaction failed with error: %s. Retrying: %s.',\n          error.message,\n          retryable\n        );\n\n        if (!retryable) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n\n  close(): void {\n    this.db.close();\n  }\n}\n\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nexport class IterationController {\n  private shouldStop = false;\n  private nextKey: IDBValidKey | null = null;\n\n  constructor(private dbCursor: IDBCursorWithValue) {}\n\n  get isDone(): boolean {\n    return this.shouldStop;\n  }\n\n  get skipToKey(): IDBValidKey | null {\n    return this.nextKey;\n  }\n\n  set cursor(value: IDBCursorWithValue) {\n    this.dbCursor = value;\n  }\n\n  /**\n   * This function can be called to stop iteration at any point.\n   */\n  done(): void {\n    this.shouldStop = true;\n  }\n\n  /**\n   * This function can be called to skip to that next key, which could be\n   * an index or a primary key.\n   */\n  skip(key: IDBValidKey): void {\n    this.nextKey = key;\n  }\n\n  /**\n   * Delete the current cursor value from the object store.\n   *\n   * NOTE: You CANNOT do this with a keysOnly query.\n   */\n  delete(): PersistencePromise<void> {\n    return wrapRequest<void>(this.dbCursor.delete());\n  }\n}\n\n/**\n * Callback used with iterate() method.\n */\nexport type IterateCallback<KeyType, ValueType> = (\n  key: KeyType,\n  value: ValueType,\n  control: IterationController\n) => void | PersistencePromise<void>;\n\n/** Options available to the iterate() method. */\nexport interface IterateOptions {\n  /** Index to iterate over (else primary keys will be iterated) */\n  index?: string;\n\n  /** IndxedDB Range to iterate over (else entire store will be iterated) */\n  range?: IDBKeyRange;\n\n  /** If true, values aren't read while iterating. */\n  keysOnly?: boolean;\n\n  /** If true, iterate over the store in reverse. */\n  reverse?: boolean;\n}\n\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\nexport class IndexedDbTransactionError extends FirestoreError {\n  name = 'IndexedDbTransactionError';\n\n  constructor(cause: Error) {\n    super(Code.UNAVAILABLE, 'IndexedDB transaction failed: ' + cause);\n  }\n}\n\n/** Verifies whether `e` is an IndexedDbTransactionError. */\nexport function isIndexedDbTransactionError(e: Error): boolean {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nexport class SimpleDbTransaction {\n  private aborted = false;\n\n  /**\n   * A promise that resolves with the result of the IndexedDb transaction.\n   */\n  private readonly completionDeferred = new Deferred<void>();\n\n  static open(\n    db: IDBDatabase,\n    mode: IDBTransactionMode,\n    objectStoreNames: string[]\n  ): SimpleDbTransaction {\n    return new SimpleDbTransaction(db.transaction(objectStoreNames, mode));\n  }\n\n  constructor(private readonly transaction: IDBTransaction) {\n    this.transaction.oncomplete = () => {\n      this.completionDeferred.resolve();\n    };\n    this.transaction.onabort = () => {\n      if (transaction.error) {\n        this.completionDeferred.reject(\n          new IndexedDbTransactionError(transaction.error)\n        );\n      } else {\n        this.completionDeferred.resolve();\n      }\n    };\n    this.transaction.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      this.completionDeferred.reject(new IndexedDbTransactionError(error));\n    };\n  }\n\n  get completionPromise(): Promise<void> {\n    return this.completionDeferred.promise;\n  }\n\n  abort(error?: Error): void {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n\n    if (!this.aborted) {\n      logDebug(\n        LOG_TAG,\n        'Aborting transaction:',\n        error ? error.message : 'Client-initiated abort'\n      );\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n\n  /**\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n   * operations performed on the SimpleDbStore happen within the context of this\n   * transaction and it cannot be used anymore once the transaction is\n   * completed.\n   *\n   * Note that we can't actually enforce that the KeyType and ValueType are\n   * correct, but they allow type safety through the rest of the consuming code.\n   */\n  store<KeyType extends IDBValidKey, ValueType extends unknown>(\n    storeName: string\n  ): SimpleDbStore<KeyType, ValueType> {\n    const store = this.transaction.objectStore(storeName);\n    debugAssert(!!store, 'Object store not part of transaction: ' + storeName);\n    return new SimpleDbStore<KeyType, ValueType>(store);\n  }\n}\n\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nexport class SimpleDbStore<\n  KeyType extends IDBValidKey,\n  ValueType extends unknown\n> {\n  constructor(private store: IDBObjectStore) {}\n\n  /**\n   * Writes a value into the Object Store.\n   *\n   * @param key Optional explicit key to use when writing the object, else the\n   * key will be auto-assigned (e.g. via the defined keyPath for the store).\n   * @param value The object to write.\n   */\n  put(value: ValueType): PersistencePromise<void>;\n  put(key: KeyType, value: ValueType): PersistencePromise<void>;\n  put(\n    keyOrValue: KeyType | ValueType,\n    value?: ValueType\n  ): PersistencePromise<void> {\n    let request;\n    if (value !== undefined) {\n      logDebug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue as KeyType);\n    } else {\n      logDebug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue as ValueType);\n    }\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * Adds a new value into an Object Store and returns the new key. Similar to\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\n   *\n   * @param value The object to write.\n   * @return The key of the value to add.\n   */\n  add(value: ValueType): PersistencePromise<KeyType> {\n    logDebug(LOG_TAG, 'ADD', this.store.name, value, value);\n    const request = this.store.add(value as ValueType);\n    return wrapRequest<KeyType>(request);\n  }\n\n  /**\n   * Gets the object with the specified key from the specified store, or null\n   * if no object exists with the specified key.\n   *\n   * @key The key of the object to get.\n   * @return The object with the specified key or null if no object exists.\n   */\n  get(key: KeyType): PersistencePromise<ValueType | null> {\n    const request = this.store.get(key);\n    // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return wrapRequest<any>(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      logDebug(LOG_TAG, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n\n  delete(key: KeyType | IDBKeyRange): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest<void>(request);\n  }\n\n  /**\n   * If we ever need more of the count variants, we can add overloads. For now,\n   * all we need is to count everything in a store.\n   *\n   * Returns the number of rows in the store.\n   */\n  count(): PersistencePromise<number> {\n    logDebug(LOG_TAG, 'COUNT', this.store.name);\n    const request = this.store.count();\n    return wrapRequest<number>(request);\n  }\n\n  loadAll(): PersistencePromise<ValueType[]>;\n  loadAll(range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(index: string, range: IDBKeyRange): PersistencePromise<ValueType[]>;\n  loadAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<ValueType[]> {\n    const cursor = this.cursor(this.options(indexOrRange, range));\n    const results: ValueType[] = [];\n    return this.iterateCursor(cursor, (key, value) => {\n      results.push(value);\n    }).next(() => {\n      return results;\n    });\n  }\n\n  deleteAll(): PersistencePromise<void>;\n  deleteAll(range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(index: string, range: IDBKeyRange): PersistencePromise<void>;\n  deleteAll(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): PersistencePromise<void> {\n    logDebug(LOG_TAG, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n\n  /**\n   * Iterates over keys and values in an object store.\n   *\n   * @param options Options specifying how to iterate the objects in the store.\n   * @param callback will be called for each iterated object. Iteration can be\n   * canceled at any point by calling the doneFn passed to the callback.\n   * The callback can return a PersistencePromise if it performs async\n   * operations but note that iteration will continue without waiting for them\n   * to complete.\n   * @returns A PersistencePromise that resolves once all PersistencePromises\n   * returned by callbacks resolve.\n   */\n  iterate(\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    options: IterateOptions,\n    callback: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void>;\n  iterate(\n    optionsOrCallback: IterateOptions | IterateCallback<KeyType, ValueType>,\n    callback?: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback as IterateCallback<KeyType, ValueType>;\n    } else {\n      options = optionsOrCallback as IterateOptions;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n\n  /**\n   * Iterates over a store, but waits for the given callback to complete for\n   * each entry before iterating the next entry. This allows the callback to do\n   * asynchronous work to determine if this iteration should continue.\n   *\n   * The provided callback should return `true` to continue iteration, and\n   * `false` otherwise.\n   */\n  iterateSerial(\n    callback: (k: KeyType, v: ValueType) => PersistencePromise<boolean>\n  ): PersistencePromise<void> {\n    const cursorRequest = this.cursor({});\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        const error = checkForAndReportiOSError(\n          (event.target as IDBRequest).error!\n        );\n        reject(error);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n\n        callback(cursor.primaryKey as KeyType, cursor.value).next(\n          shouldContinue => {\n            if (shouldContinue) {\n              cursor.continue();\n            } else {\n              resolve();\n            }\n          }\n        );\n      };\n    });\n  }\n\n  private iterateCursor(\n    cursorRequest: IDBRequest,\n    fn: IterateCallback<KeyType, ValueType>\n  ): PersistencePromise<void> {\n    const results: Array<PersistencePromise<void>> = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = (event: Event) => {\n        reject((event.target as IDBRequest).error!);\n      };\n      cursorRequest.onsuccess = (event: Event) => {\n        const cursor: IDBCursorWithValue = (event.target as IDBRequest).result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(\n          cursor.primaryKey as KeyType,\n          cursor.value,\n          controller\n        );\n        if (userResult instanceof PersistencePromise) {\n          const userPromise: PersistencePromise<void> = userResult.catch(\n            err => {\n              controller.done();\n              return PersistencePromise.reject(err);\n            }\n          );\n          results.push(userPromise);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => {\n      return PersistencePromise.waitFor(results);\n    });\n  }\n\n  private options(\n    indexOrRange?: string | IDBKeyRange,\n    range?: IDBKeyRange\n  ): IterateOptions {\n    let indexName: string | undefined = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        debugAssert(\n          range === undefined,\n          '3rd argument must not be defined if 2nd is a range.'\n        );\n        range = indexOrRange;\n      }\n    }\n    return { index: indexName, range };\n  }\n\n  private cursor(options: IterateOptions): IDBRequest {\n    let direction: IDBCursorDirection = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  }\n}\n\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest<R>(request: IDBRequest): PersistencePromise<R> {\n  return new PersistencePromise<R>((resolve, reject) => {\n    request.onsuccess = (event: Event) => {\n      const result = (event.target as IDBRequest).result;\n      resolve(result);\n    };\n\n    request.onerror = (event: Event) => {\n      const error = checkForAndReportiOSError(\n        (event.target as IDBRequest).error!\n      );\n      reject(error);\n    };\n  });\n}\n\n// Guard so we only report the error once.\nlet reportedIOSError = false;\nfunction checkForAndReportiOSError(error: DOMException): Error {\n  const iOSVersion = SimpleDb.getIOSVersion(getUA());\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    const IOS_ERROR =\n      'An internal error was encountered in the Indexed Database server';\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      const newError = new FirestoreError(\n        'internal',\n        `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` +\n          `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` +\n          `for details and a potential workaround.`\n      );\n      if (!reportedIOSError) {\n        reportedIOSError = true;\n        // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n        setTimeout(() => {\n          throw newError;\n        }, 0);\n      }\n      return newError;\n    }\n  }\n  return error;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The Platform's 'window' implementation or null if not available. */\nexport function getWindow(): Window | null {\n  // `window` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' ? window : null;\n}\n\n/** The Platform's 'document' implementation or null if not available. */\nexport function getDocument(): Document | null {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return typeof document !== 'undefined' ? document : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert, fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { logDebug, logError } from './log';\nimport { Deferred } from './promise';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\nimport { getWindow } from '../platform/dom';\n\nconst LOG_TAG = 'AsyncQueue';\n\n// Accept any return type from setTimeout().\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TimerHandle = any;\n\n/**\n * Wellknown \"timer\" IDs used when scheduling delayed operations on the\n * AsyncQueue. These IDs can then be used from tests to check for the presence\n * of operations or to run them early.\n *\n * The string values are used when encoding these timer IDs in JSON spec tests.\n */\nexport const enum TimerId {\n  /** All can be used with runDelayedOperationsEarly() to run all timers. */\n  All = 'all',\n\n  /**\n   * The following 4 timers are used in persistent_stream.ts for the listen and\n   * write streams. The \"Idle\" timer is used to close the stream due to\n   * inactivity. The \"ConnectionBackoff\" timer is used to restart a stream once\n   * the appropriate backoff delay has elapsed.\n   */\n  ListenStreamIdle = 'listen_stream_idle',\n  ListenStreamConnectionBackoff = 'listen_stream_connection_backoff',\n  WriteStreamIdle = 'write_stream_idle',\n  WriteStreamConnectionBackoff = 'write_stream_connection_backoff',\n\n  /**\n   * A timer used in online_state_tracker.ts to transition from\n   * OnlineState.Unknown to Offline after a set timeout, rather than waiting\n   * indefinitely for success or failure.\n   */\n  OnlineStateTimeout = 'online_state_timeout',\n\n  /**\n   * A timer used to update the client metadata in IndexedDb, which is used\n   * to determine the primary leaseholder.\n   */\n  ClientMetadataRefresh = 'client_metadata_refresh',\n\n  /** A timer used to periodically attempt LRU Garbage collection */\n  LruGarbageCollection = 'lru_garbage_collection',\n\n  /**\n   * A timer used to retry transactions. Since there can be multiple concurrent\n   * transactions, multiple of these may be in the queue at a given time.\n   */\n  TransactionRetry = 'transaction_retry',\n\n  /**\n   * A timer used to retry operations scheduled via retryable AsyncQueue\n   * operations.\n   */\n  AsyncQueueRetry = 'async_queue_retry'\n}\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nexport class DelayedOperation<T extends unknown> implements PromiseLike<T> {\n  // handle for use with clearTimeout(), or null if the operation has been\n  // executed or canceled already.\n  private timerHandle: TimerHandle | null;\n\n  private readonly deferred = new Deferred<T>();\n\n  private constructor(\n    private readonly asyncQueue: AsyncQueue,\n    readonly timerId: TimerId,\n    readonly targetTimeMs: number,\n    private readonly op: () => Promise<T>,\n    private readonly removalCallback: (op: DelayedOperation<T>) => void\n  ) {\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue The queue to schedule the operation on.\n   * @param id A Timer ID identifying the type of operation this is.\n   * @param delayMs The delay (ms) before the operation should be scheduled.\n   * @param op The operation to run.\n   * @param removalCallback A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule<R extends unknown>(\n    asyncQueue: AsyncQueue,\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<R>,\n    removalCallback: (op: DelayedOperation<R>) => void\n  ): DelayedOperation<R> {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(\n      asyncQueue,\n      timerId,\n      targetTime,\n      op,\n      removalCallback\n    );\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  private start(delayMs: number): void {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay(): void {\n    return this.handleDelayElapsed();\n  }\n\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason?: string): void {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(\n        new FirestoreError(\n          Code.CANCELLED,\n          'Operation cancelled' + (reason ? ': ' + reason : '')\n        )\n      );\n    }\n  }\n\n  then = this.deferred.promise.then.bind(this.deferred.promise);\n\n  private handleDelayElapsed(): void {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  private clearTimeout(): void {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n\nexport class AsyncQueue {\n  // The last promise in the queue.\n  private tail: Promise<unknown> = Promise.resolve();\n\n  // The last retryable operation. Retryable operation are run in order and\n  // retried with backoff.\n  private retryableTail: Promise<void> = Promise.resolve();\n\n  // Is this AsyncQueue being shut down? Once it is set to true, it will not\n  // be changed again.\n  private _isShuttingDown: boolean = false;\n\n  // Operations scheduled to be queued in the future. Operations are\n  // automatically removed after they are run or canceled.\n  private delayedOperations: Array<DelayedOperation<unknown>> = [];\n\n  // visible for testing\n  failure: Error | null = null;\n\n  // Flag set while there's an outstanding AsyncQueue operation, used for\n  // assertion sanity-checks.\n  private operationInProgress = false;\n\n  // List of TimerIds to fast-forward delays for.\n  private timerIdsToSkip: TimerId[] = [];\n\n  // Backoff timer used to schedule retries for retryable operations\n  private backoff = new ExponentialBackoff(this, TimerId.AsyncQueueRetry);\n\n  // Visibility handler that triggers an immediate retry of all retryable\n  // operations. Meant to speed up recovery when we regain file system access\n  // after page comes into foreground.\n  private visibilityHandler = (): void => this.backoff.skipBackoff();\n\n  constructor() {\n    const window = getWindow();\n    if (window && typeof window.addEventListener === 'function') {\n      window.addEventListener('visibilitychange', this.visibilityHandler);\n    }\n  }\n\n  // Is this AsyncQueue being shut down? If true, this instance will not enqueue\n  // any new operations, Promises from enqueue requests will not resolve.\n  get isShuttingDown(): boolean {\n    return this._isShuttingDown;\n  }\n\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget<T extends unknown>(op: () => Promise<T>): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue without waiting for it to complete (i.e. we ignore the Promise result).\n   */\n  enqueueAndForgetEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): void {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n\n  /**\n   * Regardless if the queue has initialized shutdown, adds a new operation to the\n   * queue.\n   */\n  private enqueueEvenAfterShutdown<T extends unknown>(\n    op: () => Promise<T>\n  ): Promise<T> {\n    this.verifyNotFailed();\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Adds a new operation to the queue and initialize the shut down of this queue.\n   * Returns a promise that will be resolved when the promise returned by the new\n   * operation is (with its value).\n   * Once this method is called, the only possible way to request running an operation\n   * is through `enqueueAndForgetEvenAfterShutdown`.\n   */\n  async enqueueAndInitiateShutdown(op: () => Promise<void>): Promise<void> {\n    this.verifyNotFailed();\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      const window = getWindow();\n      if (window) {\n        window.removeEventListener('visibilitychange', this.visibilityHandler);\n      }\n      await this.enqueueEvenAfterShutdown(op);\n    }\n  }\n\n  /**\n   * Adds a new operation to the queue. Returns a promise that will be resolved\n   * when the promise returned by the new operation is (with its value).\n   */\n  enqueue<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise<T>(resolve => {});\n    }\n    return this.enqueueInternal(op);\n  }\n\n  /**\n   * Enqueue a retryable operation.\n   *\n   * A retryable operation is rescheduled with backoff if it fails with a\n   * IndexedDbTransactionError (the error type used by SimpleDb). All\n   * retryable operations are executed in order and only run if all prior\n   * operations were retried successfully.\n   */\n  enqueueRetryable(op: () => Promise<void>): void {\n    this.verifyNotFailed();\n\n    if (this._isShuttingDown) {\n      return;\n    }\n\n    this.retryableTail = this.retryableTail.then(() => {\n      const deferred = new Deferred<void>();\n      const retryingOp = async (): Promise<void> => {\n        try {\n          await op();\n          deferred.resolve();\n          this.backoff.reset();\n        } catch (e) {\n          if (isIndexedDbTransactionError(e)) {\n            logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n            this.backoff.backoffAndRun(retryingOp);\n          } else {\n            deferred.resolve();\n            throw e; // Failure will be handled by AsyncQueue\n          }\n        }\n      };\n      this.enqueueAndForget(retryingOp);\n      return deferred.promise;\n    });\n  }\n\n  private enqueueInternal<T extends unknown>(op: () => Promise<T>): Promise<T> {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op()\n        .catch((error: FirestoreError) => {\n          this.failure = error;\n          this.operationInProgress = false;\n          const message = getMessageOrStack(error);\n          logError('INTERNAL UNHANDLED ERROR: ', message);\n\n          // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n          throw error;\n        })\n        .then(result => {\n          this.operationInProgress = false;\n          return result;\n        });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n\n  /**\n   * Schedules an operation to be queued on the AsyncQueue once the specified\n   * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel\n   * or fast-forward the operation prior to its running.\n   */\n  enqueueAfterDelay<T extends unknown>(\n    timerId: TimerId,\n    delayMs: number,\n    op: () => Promise<T>\n  ): DelayedOperation<T> {\n    this.verifyNotFailed();\n\n    debugAssert(\n      delayMs >= 0,\n      `Attempted to schedule an operation with a negative delay of ${delayMs}`\n    );\n\n    // Fast-forward delays for timerIds that have been overriden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    const delayedOp = DelayedOperation.createAndSchedule<T>(\n      this,\n      timerId,\n      delayMs,\n      op,\n      removedOp =>\n        this.removeDelayedOperation(removedOp as DelayedOperation<unknown>)\n    );\n    this.delayedOperations.push(delayedOp as DelayedOperation<unknown>);\n    return delayedOp;\n  }\n\n  private verifyNotFailed(): void {\n    if (this.failure) {\n      fail('AsyncQueue is already failed: ' + getMessageOrStack(this.failure));\n    }\n  }\n\n  /**\n   * Verifies there's an operation currently in-progress on the AsyncQueue.\n   * Unfortunately we can't verify that the running code is in the promise chain\n   * of that operation, so this isn't a foolproof check, but it should be enough\n   * to catch some bugs.\n   */\n  verifyOperationInProgress(): void {\n    debugAssert(\n      this.operationInProgress,\n      'verifyOpInProgress() called when no op in progress on this queue.'\n    );\n  }\n\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain(): Promise<void> {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail: Promise<unknown>;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId: TimerId): boolean {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId Delayed operations up to and including this TimerId will\n   *  be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runAllDelayedOperationsUntil(lastTimerId: TimerId): Promise<void> {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return this.drain();\n    });\n  }\n\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId: TimerId): void {\n    this.timerIdsToSkip.push(timerId);\n  }\n\n  /** Called once a DelayedOperation is run or canceled. */\n  private removeDelayedOperation(op: DelayedOperation<unknown>): void {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    debugAssert(index >= 0, 'Delayed operation not found.');\n    this.delayedOperations.splice(index, 1);\n  }\n}\n\n/**\n * Returns a FirestoreError that can be surfaced to the user if the provided\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\n */\nexport function wrapInUserErrorIfRecoverable(\n  e: Error,\n  msg: string\n): FirestoreError {\n  logError(LOG_TAG, `${msg}: ${e}`);\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\n  } else {\n    throw e;\n  }\n}\n\n/**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error Error or FirestoreError\n */\nfunction getMessageOrStack(error: Error): string {\n  let message = error.message || '';\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n  return message;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { getLogLevel, logDebug, LogLevel } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\nimport { ignoreIfPrimaryLeaseLoss, LocalStore } from './local_store';\nimport {\n  GarbageCollectionScheduler,\n  PersistenceTransaction\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetData } from './target_data';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LruGarbageCollector';\n\n/**\n * Persistence layers intending to use LRU Garbage collection should have reference delegates that\n * implement this interface. This interface defines the operations that the LRU garbage collector\n * needs from the persistence layer.\n */\nexport interface LruDelegate {\n  readonly garbageCollector: LruGarbageCollector;\n\n  /** Enumerates all the targets in the TargetCache. */\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (target: TargetData) => void\n  ): PersistencePromise<void>;\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number>;\n\n  /**\n   * Enumerates sequence numbers for documents not associated with a target.\n   * Note that this may include duplicate sequence numbers.\n   */\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void>;\n\n  /**\n   * Removes all targets that have a sequence number less than or equal to `upperBound`, and are not\n   * present in the `activeTargetIds` set.\n   *\n   * @return the number of targets removed.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number>;\n\n  /**\n   * Removes all unreferenced documents from the cache that have a sequence number less than or\n   * equal to the given `upperBound`.\n   *\n   * @return the number of documents removed.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number>;\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number>;\n}\n\n/**\n * Describes a map whose keys are active target ids. We do not care about the type of the\n * values.\n */\nexport type ActiveTargets = SortedMap<TargetId, unknown>;\n\n// The type and comparator for the items contained in the SortedSet used in\n// place of a priority queue for the RollingSequenceNumberBuffer.\ntype BufferEntry = [ListenSequenceNumber, number];\nfunction bufferEntryComparator(\n  [aSequence, aIndex]: BufferEntry,\n  [bSequence, bIndex]: BufferEntry\n): number {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n\n/**\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\n * lowest n values passed to `addElement`, and finally reports the largest of\n * them in `maxValue`.\n */\nclass RollingSequenceNumberBuffer {\n  private buffer: SortedSet<BufferEntry> = new SortedSet<BufferEntry>(\n    bufferEntryComparator\n  );\n\n  private previousIndex = 0;\n\n  constructor(private readonly maxElements: number) {}\n\n  private nextIndex(): number {\n    return ++this.previousIndex;\n  }\n\n  addElement(sequenceNumber: ListenSequenceNumber): void {\n    const entry: BufferEntry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last()!;\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n\n  get maxValue(): ListenSequenceNumber {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()![0];\n  }\n}\n\n/**\n * Describes the results of a garbage collection run. `didRun` will be set to\n * `false` if collection was skipped (either it is disabled or the cache size\n * has not hit the threshold). If collection ran, the other fields will be\n * filled in with the details of the results.\n */\nexport interface LruResults {\n  readonly didRun: boolean;\n  readonly sequenceNumbersCollected: number;\n  readonly targetsRemoved: number;\n  readonly documentsRemoved: number;\n}\n\nconst GC_DID_NOT_RUN: LruResults = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\n\nexport class LruParams {\n  static readonly COLLECTION_DISABLED = -1;\n  static readonly MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n  static readonly DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\n  private static readonly DEFAULT_COLLECTION_PERCENTILE = 10;\n  private static readonly DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\n\n  static withCacheSize(cacheSize: number): LruParams {\n    return new LruParams(\n      cacheSize,\n      LruParams.DEFAULT_COLLECTION_PERCENTILE,\n      LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n    );\n  }\n\n  static readonly DEFAULT: LruParams = new LruParams(\n    LruParams.DEFAULT_CACHE_SIZE_BYTES,\n    LruParams.DEFAULT_COLLECTION_PERCENTILE,\n    LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT\n  );\n\n  static readonly DISABLED: LruParams = new LruParams(\n    LruParams.COLLECTION_DISABLED,\n    0,\n    0\n  );\n\n  constructor(\n    // When we attempt to collect, we will only do so if the cache size is greater than this\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n    readonly cacheSizeCollectionThreshold: number,\n    // The percentage of sequence numbers that we will attempt to collect\n    readonly percentileToCollect: number,\n    // A cap on the total number of sequence numbers that will be collected. This prevents\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\n    readonly maximumSequenceNumbersToCollect: number\n  ) {}\n}\n\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\n\n/**\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\n * whether or not GC is enabled, as well as which delay to use before the next run.\n */\nexport class LruScheduler implements GarbageCollectionScheduler {\n  private hasRun: boolean = false;\n  private gcTask: DelayedOperation<void> | null;\n\n  constructor(\n    private readonly garbageCollector: LruGarbageCollector,\n    private readonly asyncQueue: AsyncQueue\n  ) {\n    this.gcTask = null;\n  }\n\n  start(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot start an already started LruScheduler'\n    );\n    if (\n      this.garbageCollector.params.cacheSizeCollectionThreshold !==\n      LruParams.COLLECTION_DISABLED\n    ) {\n      this.scheduleGC(localStore);\n    }\n  }\n\n  stop(): void {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n\n  get started(): boolean {\n    return this.gcTask !== null;\n  }\n\n  private scheduleGC(localStore: LocalStore): void {\n    debugAssert(\n      this.gcTask === null,\n      'Cannot schedule GC while a task is pending'\n    );\n    const delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;\n    logDebug(\n      'LruGarbageCollector',\n      `Garbage collection scheduled in ${delay}ms`\n    );\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\n      TimerId.LruGarbageCollection,\n      delay,\n      async () => {\n        this.gcTask = null;\n        this.hasRun = true;\n        try {\n          await localStore.collectGarbage(this.garbageCollector);\n        } catch (e) {\n          if (isIndexedDbTransactionError(e)) {\n            logDebug(\n              LOG_TAG,\n              'Ignoring IndexedDB error during garbage collection: ',\n              e\n            );\n          } else {\n            await ignoreIfPrimaryLeaseLoss(e);\n          }\n        }\n        await this.scheduleGC(localStore);\n      }\n    );\n  }\n}\n\n/** Implements the steps for LRU garbage collection. */\nexport class LruGarbageCollector {\n  constructor(\n    private readonly delegate: LruDelegate,\n    readonly params: LruParams\n  ) {}\n\n  /** Given a percentile of target to collect, returns the number of targets to collect. */\n  calculateTargetCount(\n    txn: PersistenceTransaction,\n    percentile: number\n  ): PersistencePromise<number> {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor((percentile / 100.0) * targetCount);\n    });\n  }\n\n  /** Returns the nth sequence number, counting in order from the smallest. */\n  nthSequenceNumber(\n    txn: PersistenceTransaction,\n    n: number\n  ): PersistencePromise<ListenSequenceNumber> {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate\n      .forEachTarget(txn, target => buffer.addElement(target.sequenceNumber))\n      .next(() => {\n        return this.delegate.forEachOrphanedDocumentSequenceNumber(\n          txn,\n          sequenceNumber => buffer.addElement(sequenceNumber)\n        );\n      })\n      .next(() => buffer.maxValue);\n  }\n\n  /**\n   * Removes targets with a sequence number equal to or less than the given upper bound, and removes\n   * document associations with those targets.\n   */\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  /**\n   * Removes documents that have a sequence number equal to or less than the upper bound and are not\n   * otherwise pinned.\n   */\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n\n  collect(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    if (\n      this.params.cacheSizeCollectionThreshold === LruParams.COLLECTION_DISABLED\n    ) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug(\n          'LruGarbageCollector',\n          `Garbage collection skipped; Cache size ${cacheSize} ` +\n            `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`\n        );\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.delegate.getCacheSize(txn);\n  }\n\n  private runGarbageCollection(\n    txn: PersistenceTransaction,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<LruResults> {\n    let upperBoundSequenceNumber: number;\n    let sequenceNumbersToCollect: number, targetsRemoved: number;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs: number,\n      foundUpperBoundTs: number,\n      removedTargetsTs: number,\n      removedDocumentsTs: number;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect)\n      .next(sequenceNumbers => {\n        // Cap at the configured max\n        if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n          logDebug(\n            'LruGarbageCollector',\n            'Capping sequence numbers to collect down ' +\n              `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` +\n              `from ${sequenceNumbers}`\n          );\n          sequenceNumbersToCollect = this.params\n            .maximumSequenceNumbersToCollect;\n        } else {\n          sequenceNumbersToCollect = sequenceNumbers;\n        }\n        countedTargetsTs = Date.now();\n\n        return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n      })\n      .next(upperBound => {\n        upperBoundSequenceNumber = upperBound;\n        foundUpperBoundTs = Date.now();\n\n        return this.removeTargets(\n          txn,\n          upperBoundSequenceNumber,\n          activeTargetIds\n        );\n      })\n      .next(numTargetsRemoved => {\n        targetsRemoved = numTargetsRemoved;\n        removedTargetsTs = Date.now();\n\n        return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n      })\n      .next(documentsRemoved => {\n        removedDocumentsTs = Date.now();\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          const desc =\n            'LRU Garbage Collection\\n' +\n            `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` +\n            `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` +\n            `${foundUpperBoundTs - countedTargetsTs}ms\\n` +\n            `\\tRemoved ${targetsRemoved} targets in ` +\n            `${removedTargetsTs - foundUpperBoundTs}ms\\n` +\n            `\\tRemoved ${documentsRemoved} documents in ` +\n            `${removedDocumentsTs - removedTargetsTs}ms\\n` +\n            `Total Duration: ${removedDocumentsTs - startTs}ms`;\n          logDebug('LruGarbageCollector', desc);\n        }\n\n        return PersistencePromise.resolve<LruResults>({\n          didRun: true,\n          sequenceNumbersCollected: sequenceNumbersToCollect,\n          targetsRemoved,\n          documentsRemoved\n        });\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { User } from '../auth/user';\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { canonifyTarget, Target, targetEquals } from '../core/target';\nimport { BatchId, TargetId } from '../core/types';\nimport {\n  DocumentKeySet,\n  documentKeySet,\n  DocumentMap,\n  maybeDocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation, PatchMutation, Precondition } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { LocalDocumentsView } from './local_documents_view';\nimport { LocalViewChanges } from './local_view_changes';\nimport { LruGarbageCollector, LruResults } from './lru_garbage_collector';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PRIMARY_LEASE_LOST_ERROR_MSG\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { TargetCache } from './target_cache';\nimport { QueryEngine } from './query_engine';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\nimport { ClientId } from './shared_client_state';\nimport { TargetData, TargetPurpose } from './target_data';\nimport { IndexedDbPersistence } from './indexeddb_persistence';\nimport { IndexedDbMutationQueue } from './indexeddb_mutation_queue';\nimport { IndexedDbRemoteDocumentCache } from './indexeddb_remote_document_cache';\nimport { IndexedDbTargetCache } from './indexeddb_target_cache';\nimport { extractFieldMask } from '../model/object_value';\nimport { isIndexedDbTransactionError } from './simple_db';\n\nconst LOG_TAG = 'LocalStore';\n\n/** The result of a write to the local store. */\nexport interface LocalWriteResult {\n  batchId: BatchId;\n  changes: MaybeDocumentMap;\n}\n\n/** The result of a user-change operation in the local store. */\nexport interface UserChangeResult {\n  readonly affectedDocuments: MaybeDocumentMap;\n  readonly removedBatchIds: BatchId[];\n  readonly addedBatchIds: BatchId[];\n}\n\n/** The result of executing a query against the local store. */\nexport interface QueryResult {\n  readonly documents: DocumentMap;\n  readonly remoteKeys: DocumentKeySet;\n}\n\n/**\n * Local storage in the Firestore client. Coordinates persistence components\n * like the mutation queue and remote document cache to present a\n * latency-compensated view of stored data.\n *\n * The LocalStore is responsible for accepting mutations from the Sync Engine.\n * Writes from the client are put into a queue as provisional Mutations until\n * they are processed by the RemoteStore and confirmed as having been written\n * to the server.\n *\n * The local store provides the local version of documents that have been\n * modified locally. It maintains the constraint:\n *\n *   LocalDocument = RemoteDocument + Active(LocalMutations)\n *\n * (Active mutations are those that are enqueued and have not been previously\n * acknowledged or rejected).\n *\n * The RemoteDocument (\"ground truth\") state is provided via the\n * applyChangeBatch method. It will be some version of a server-provided\n * document OR will be a server-provided document PLUS acknowledged mutations:\n *\n *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)\n *\n * Note that this \"dirty\" version of a RemoteDocument will not be identical to a\n * server base version, since it has LocalMutations added to it pending getting\n * an authoritative copy from the server.\n *\n * Since LocalMutations can be rejected by the server, we have to be able to\n * revert a LocalMutation that has already been applied to the LocalDocument\n * (typically done by replaying all remaining LocalMutations to the\n * RemoteDocument to re-apply).\n *\n * The LocalStore is responsible for the garbage collection of the documents it\n * contains. For now, it every doc referenced by a view, the mutation queue, or\n * the RemoteStore.\n *\n * It also maintains the persistence of mapping queries to resume tokens and\n * target ids. It needs to know this data about queries to properly know what\n * docs it would be allowed to garbage collect.\n *\n * The LocalStore must be able to efficiently execute queries against its local\n * cache of the documents, to provide the initial set of results before any\n * remote changes have been received.\n *\n * Note: In TypeScript, most methods return Promises since the implementation\n * may rely on fetching data from IndexedDB which is async.\n * These Promises will only be rejected on an I/O error or other internal\n * (unexpected) failure (e.g. failed assert) and always represent an\n * unrecoverable error (should be caught / reported by the async_queue).\n */\nexport class LocalStore {\n  /**\n   * The maximum time to leave a resume token buffered without writing it out.\n   * This value is arbitrary: it's long enough to avoid several writes\n   * (possibly indefinitely if updates come more frequently than this) but\n   * short enough that restarting after crashing will still have a pretty\n   * recent resume token.\n   */\n  private static readonly RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  protected mutationQueue: MutationQueue;\n\n  /** The set of all cached remote documents. */\n  protected remoteDocuments: RemoteDocumentCache;\n\n  /**\n   * The \"local\" view of all documents (layering mutationQueue on top of\n   * remoteDocumentCache).\n   */\n  protected localDocuments: LocalDocumentsView;\n\n  /** Maps a target to its `TargetData`. */\n  protected targetCache: TargetCache;\n\n  /**\n   * Maps a targetID to data about its target.\n   *\n   * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\n   * of `applyRemoteEvent()` idempotent.\n   */\n  protected targetDataByTarget = new SortedMap<TargetId, TargetData>(\n    primitiveComparator\n  );\n\n  /** Maps a target to its targetID. */\n  // TODO(wuandy): Evaluate if TargetId can be part of Target.\n  private targetIdByTarget = new ObjectMap<Target, TargetId>(\n    t => canonifyTarget(t),\n    targetEquals\n  );\n\n  /**\n   * The read time of the last entry processed by `getNewDocumentChanges()`.\n   *\n   * PORTING NOTE: This is only used for multi-tab synchronization.\n   */\n  protected lastDocumentChangeReadTime = SnapshotVersion.min();\n\n  constructor(\n    /** Manages our in-memory or durable persistence. */\n    protected persistence: Persistence,\n    private queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    debugAssert(\n      persistence.started,\n      'LocalStore was passed an unstarted persistence implementation'\n    );\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.localDocuments = new LocalDocumentsView(\n      this.remoteDocuments,\n      this.mutationQueue,\n      this.persistence.getIndexManager()\n    );\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n  }\n\n  /** Starts the LocalStore. */\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Tells the LocalStore that the currently authenticated user has changed.\n   *\n   * In response the local store switches the mutation queue to the new user and\n   * returns any resulting document changes.\n   */\n  // PORTING NOTE: Android and iOS only return the documents affected by the\n  // change.\n  async handleUserChange(user: User): Promise<UserChangeResult> {\n    let newMutationQueue = this.mutationQueue;\n    let newLocalDocuments = this.localDocuments;\n\n    const result = await this.persistence.runTransaction(\n      'Handle user change',\n      'readonly',\n      txn => {\n        // Swap out the mutation queue, grabbing the pending mutation batches\n        // before and after.\n        let oldBatches: MutationBatch[];\n        return this.mutationQueue\n          .getAllMutationBatches(txn)\n          .next(promisedOldBatches => {\n            oldBatches = promisedOldBatches;\n\n            newMutationQueue = this.persistence.getMutationQueue(user);\n\n            // Recreate our LocalDocumentsView using the new\n            // MutationQueue.\n            newLocalDocuments = new LocalDocumentsView(\n              this.remoteDocuments,\n              newMutationQueue,\n              this.persistence.getIndexManager()\n            );\n            return newMutationQueue.getAllMutationBatches(txn);\n          })\n          .next(newBatches => {\n            const removedBatchIds: BatchId[] = [];\n            const addedBatchIds: BatchId[] = [];\n\n            // Union the old/new changed keys.\n            let changedKeys = documentKeySet();\n\n            for (const batch of oldBatches) {\n              removedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            for (const batch of newBatches) {\n              addedBatchIds.push(batch.batchId);\n              for (const mutation of batch.mutations) {\n                changedKeys = changedKeys.add(mutation.key);\n              }\n            }\n\n            // Return the set of all (potentially) changed documents and the list\n            // of mutation batch IDs that were affected by change.\n            return newLocalDocuments\n              .getDocuments(txn, changedKeys)\n              .next(affectedDocuments => {\n                return {\n                  affectedDocuments,\n                  removedBatchIds,\n                  addedBatchIds\n                };\n              });\n          });\n      }\n    );\n\n    this.mutationQueue = newMutationQueue;\n    this.localDocuments = newLocalDocuments;\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n\n    return result;\n  }\n\n  /* Accept locally generated Mutations and commit them to storage. */\n  localWrite(mutations: Mutation[]): Promise<LocalWriteResult> {\n    const localWriteTime = Timestamp.now();\n    const keys = mutations.reduce(\n      (keys, m) => keys.add(m.key),\n      documentKeySet()\n    );\n\n    let existingDocs: MaybeDocumentMap;\n\n    return this.persistence\n      .runTransaction('Locally write mutations', 'readwrite', txn => {\n        // Load and apply all existing mutations. This lets us compute the\n        // current base state for all non-idempotent transforms before applying\n        // any additional user-provided writes.\n        return this.localDocuments.getDocuments(txn, keys).next(docs => {\n          existingDocs = docs;\n\n          // For non-idempotent mutations (such as `FieldValue.increment()`),\n          // we record the base state in a separate patch mutation. This is\n          // later used to guarantee consistent values and prevents flicker\n          // even if the backend sends us an update that already includes our\n          // transform.\n          const baseMutations: Mutation[] = [];\n\n          for (const mutation of mutations) {\n            const baseValue = mutation.extractBaseValue(\n              existingDocs.get(mutation.key)\n            );\n            if (baseValue != null) {\n              // NOTE: The base state should only be applied if there's some\n              // existing document to override, so use a Precondition of\n              // exists=true\n              baseMutations.push(\n                new PatchMutation(\n                  mutation.key,\n                  baseValue,\n                  extractFieldMask(baseValue.proto.mapValue!),\n                  Precondition.exists(true)\n                )\n              );\n            }\n          }\n\n          return this.mutationQueue.addMutationBatch(\n            txn,\n            localWriteTime,\n            baseMutations,\n            mutations\n          );\n        });\n      })\n      .then(batch => {\n        const changes = batch.applyToLocalDocumentSet(existingDocs);\n        return { batchId: batch.batchId, changes };\n      });\n  }\n\n  /**\n   * Acknowledge the given batch.\n   *\n   * On the happy path when a batch is acknowledged, the local store will\n   *\n   *  + remove the batch from the mutation queue;\n   *  + apply the changes to the remote document cache;\n   *  + recalculate the latency compensated view implied by those changes (there\n   *    may be mutations in the queue that affect the documents but haven't been\n   *    acknowledged yet); and\n   *  + give the changed documents back the sync engine\n   *\n   * @returns The resulting (modified) documents.\n   */\n  acknowledgeBatch(\n    batchResult: MutationBatchResult\n  ): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Acknowledge batch',\n      'readwrite-primary',\n      txn => {\n        const affected = batchResult.batch.keys();\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n        return this.applyWriteToRemoteDocuments(\n          txn,\n          batchResult,\n          documentBuffer\n        )\n          .next(() => documentBuffer.apply(txn))\n          .next(() => this.mutationQueue.performConsistencyCheck(txn))\n          .next(() => this.localDocuments.getDocuments(txn, affected));\n      }\n    );\n  }\n\n  /**\n   * Remove mutations from the MutationQueue for the specified batch;\n   * LocalDocuments will be recalculated.\n   *\n   * @returns The resulting modified documents.\n   */\n  rejectBatch(batchId: BatchId): Promise<MaybeDocumentMap> {\n    return this.persistence.runTransaction(\n      'Reject batch',\n      'readwrite-primary',\n      txn => {\n        let affectedKeys: DocumentKeySet;\n        return this.mutationQueue\n          .lookupMutationBatch(txn, batchId)\n          .next((batch: MutationBatch | null) => {\n            hardAssert(batch !== null, 'Attempt to reject nonexistent batch!');\n            affectedKeys = batch.keys();\n            return this.mutationQueue.removeMutationBatch(txn, batch);\n          })\n          .next(() => {\n            return this.mutationQueue.performConsistencyCheck(txn);\n          })\n          .next(() => {\n            return this.localDocuments.getDocuments(txn, affectedKeys);\n          });\n      }\n    );\n  }\n\n  /**\n   * Returns the largest (latest) batch id in mutation queue that is pending server response.\n   * Returns `BATCHID_UNKNOWN` if the queue is empty.\n   */\n  getHighestUnacknowledgedBatchId(): Promise<BatchId> {\n    return this.persistence.runTransaction(\n      'Get highest unacknowledged batch id',\n      'readonly',\n      txn => {\n        return this.mutationQueue.getHighestUnacknowledgedBatchId(txn);\n      }\n    );\n  }\n\n  /**\n   * Returns the last consistent snapshot processed (used by the RemoteStore to\n   * determine whether to buffer incoming snapshots from the backend).\n   */\n  getLastRemoteSnapshotVersion(): Promise<SnapshotVersion> {\n    return this.persistence.runTransaction(\n      'Get last remote snapshot version',\n      'readonly',\n      txn => this.targetCache.getLastRemoteSnapshotVersion(txn)\n    );\n  }\n\n  /**\n   * Update the \"ground-state\" (remote) documents. We assume that the remote\n   * event reflects any write batches that have been acknowledged or rejected\n   * (i.e. we do not re-apply local mutations to updates from this event).\n   *\n   * LocalDocuments are re-calculated if there are remaining mutations in the\n   * queue.\n   */\n  applyRemoteEvent(remoteEvent: RemoteEvent): Promise<MaybeDocumentMap> {\n    const remoteVersion = remoteEvent.snapshotVersion;\n    let newTargetDataByTargetMap = this.targetDataByTarget;\n\n    return this.persistence\n      .runTransaction('Apply remote event', 'readwrite-primary', txn => {\n        const documentBuffer = this.remoteDocuments.newChangeBuffer({\n          trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n        });\n\n        // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n        newTargetDataByTargetMap = this.targetDataByTarget;\n\n        const promises = [] as Array<PersistencePromise<void>>;\n        remoteEvent.targetChanges.forEach((change, targetId) => {\n          const oldTargetData = newTargetDataByTargetMap.get(targetId);\n          if (!oldTargetData) {\n            return;\n          }\n\n          // Only update the remote keys if the target is still active. This\n          // ensures that we can persist the updated target data along with\n          // the updated assignment.\n          promises.push(\n            this.targetCache\n              .removeMatchingKeys(txn, change.removedDocuments, targetId)\n              .next(() => {\n                return this.targetCache.addMatchingKeys(\n                  txn,\n                  change.addedDocuments,\n                  targetId\n                );\n              })\n          );\n\n          const resumeToken = change.resumeToken;\n          // Update the resume token if the change includes one.\n          if (resumeToken.approximateByteSize() > 0) {\n            const newTargetData = oldTargetData\n              .withResumeToken(resumeToken, remoteVersion)\n              .withSequenceNumber(txn.currentSequenceNumber);\n            newTargetDataByTargetMap = newTargetDataByTargetMap.insert(\n              targetId,\n              newTargetData\n            );\n\n            // Update the target data if there are target changes (or if\n            // sufficient time has passed since the last update).\n            if (\n              LocalStore.shouldPersistTargetData(\n                oldTargetData,\n                newTargetData,\n                change\n              )\n            ) {\n              promises.push(\n                this.targetCache.updateTargetData(txn, newTargetData)\n              );\n            }\n          }\n        });\n\n        let changedDocs = maybeDocumentMap();\n        let updatedKeys = documentKeySet();\n        remoteEvent.documentUpdates.forEach((key, doc) => {\n          updatedKeys = updatedKeys.add(key);\n        });\n\n        // Each loop iteration only affects its \"own\" doc, so it's safe to get all the remote\n        // documents in advance in a single call.\n        promises.push(\n          documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\n            remoteEvent.documentUpdates.forEach((key, doc) => {\n              const existingDoc = existingDocs.get(key);\n\n              // Note: The order of the steps below is important, since we want\n              // to ensure that rejected limbo resolutions (which fabricate\n              // NoDocuments with SnapshotVersion.min()) never add documents to\n              // cache.\n              if (\n                doc instanceof NoDocument &&\n                doc.version.isEqual(SnapshotVersion.min())\n              ) {\n                // NoDocuments with SnapshotVersion.min() are used in manufactured\n                // events. We remove these documents from cache since we lost\n                // access.\n                documentBuffer.removeEntry(key, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else if (\n                existingDoc == null ||\n                doc.version.compareTo(existingDoc.version) > 0 ||\n                (doc.version.compareTo(existingDoc.version) === 0 &&\n                  existingDoc.hasPendingWrites)\n              ) {\n                debugAssert(\n                  !SnapshotVersion.min().isEqual(remoteVersion),\n                  'Cannot add a document when the remote version is zero'\n                );\n                documentBuffer.addEntry(doc, remoteVersion);\n                changedDocs = changedDocs.insert(key, doc);\n              } else {\n                logDebug(\n                  LOG_TAG,\n                  'Ignoring outdated watch update for ',\n                  key,\n                  '. Current version:',\n                  existingDoc.version,\n                  ' Watch version:',\n                  doc.version\n                );\n              }\n\n              if (remoteEvent.resolvedLimboDocuments.has(key)) {\n                promises.push(\n                  this.persistence.referenceDelegate.updateLimboDocument(\n                    txn,\n                    key\n                  )\n                );\n              }\n            });\n          })\n        );\n\n        // HACK: The only reason we allow a null snapshot version is so that we\n        // can synthesize remote events when we get permission denied errors while\n        // trying to resolve the state of a locally cached document that is in\n        // limbo.\n        if (!remoteVersion.isEqual(SnapshotVersion.min())) {\n          const updateRemoteVersion = this.targetCache\n            .getLastRemoteSnapshotVersion(txn)\n            .next(lastRemoteSnapshotVersion => {\n              debugAssert(\n                remoteVersion.compareTo(lastRemoteSnapshotVersion) >= 0,\n                'Watch stream reverted to previous snapshot?? ' +\n                  remoteVersion +\n                  ' < ' +\n                  lastRemoteSnapshotVersion\n              );\n              return this.targetCache.setTargetsMetadata(\n                txn,\n                txn.currentSequenceNumber,\n                remoteVersion\n              );\n            });\n          promises.push(updateRemoteVersion);\n        }\n\n        return PersistencePromise.waitFor(promises)\n          .next(() => documentBuffer.apply(txn))\n          .next(() => {\n            return this.localDocuments.getLocalViewOfDocuments(\n              txn,\n              changedDocs\n            );\n          });\n      })\n      .then(changedDocs => {\n        this.targetDataByTarget = newTargetDataByTargetMap;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Returns true if the newTargetData should be persisted during an update of\n   * an active target. TargetData should always be persisted when a target is\n   * being released and should not call this function.\n   *\n   * While the target is active, TargetData updates can be omitted when nothing\n   * about the target has changed except metadata like the resume token or\n   * snapshot version. Occasionally it's worth the extra write to prevent these\n   * values from getting too stale after a crash, but this doesn't have to be\n   * too frequent.\n   */\n  private static shouldPersistTargetData(\n    oldTargetData: TargetData,\n    newTargetData: TargetData,\n    change: TargetChange\n  ): boolean {\n    hardAssert(\n      newTargetData.resumeToken.approximateByteSize() > 0,\n      'Attempted to persist target data with no resume token'\n    );\n\n    // Always persist target data if we don't already have a resume token.\n    if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n      return true;\n    }\n\n    // Don't allow resume token changes to be buffered indefinitely. This\n    // allows us to be reasonably up-to-date after a crash and avoids needing\n    // to loop over all active queries on shutdown. Especially in the browser\n    // we may not get time to do anything interesting while the current tab is\n    // closing.\n    const timeDelta =\n      newTargetData.snapshotVersion.toMicroseconds() -\n      oldTargetData.snapshotVersion.toMicroseconds();\n    if (timeDelta >= this.RESUME_TOKEN_MAX_AGE_MICROS) {\n      return true;\n    }\n\n    // Otherwise if the only thing that has changed about a target is its resume\n    // token it's not worth persisting. Note that the RemoteStore keeps an\n    // in-memory view of the currently active targets which includes the current\n    // resume token, so stream failure or user changes will still use an\n    // up-to-date resume token regardless of what we do here.\n    const changes =\n      change.addedDocuments.size +\n      change.modifiedDocuments.size +\n      change.removedDocuments.size;\n    return changes > 0;\n  }\n\n  /**\n   * Notify local store of the changed views to locally pin documents.\n   */\n  async notifyLocalViewChanges(viewChanges: LocalViewChanges[]): Promise<void> {\n    try {\n      await this.persistence.runTransaction(\n        'notifyLocalViewChanges',\n        'readwrite',\n        txn => {\n          return PersistencePromise.forEach(\n            viewChanges,\n            (viewChange: LocalViewChanges) => {\n              return PersistencePromise.forEach(\n                viewChange.addedKeys,\n                (key: DocumentKey) =>\n                  this.persistence.referenceDelegate.addReference(\n                    txn,\n                    viewChange.targetId,\n                    key\n                  )\n              ).next(() =>\n                PersistencePromise.forEach(\n                  viewChange.removedKeys,\n                  (key: DocumentKey) =>\n                    this.persistence.referenceDelegate.removeReference(\n                      txn,\n                      viewChange.targetId,\n                      key\n                    )\n                )\n              );\n            }\n          );\n        }\n      );\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        // If `notifyLocalViewChanges` fails, we did not advance the sequence\n        // number for the documents that were included in this transaction.\n        // This might trigger them to be deleted earlier than they otherwise\n        // would have, but it should not invalidate the integrity of the data.\n        logDebug(LOG_TAG, 'Failed to update sequence numbers: ' + e);\n      } else {\n        throw e;\n      }\n    }\n\n    for (const viewChange of viewChanges) {\n      const targetId = viewChange.targetId;\n\n      if (!viewChange.fromCache) {\n        const targetData = this.targetDataByTarget.get(targetId);\n        debugAssert(\n          targetData !== null,\n          `Can't set limbo-free snapshot version for unknown target: ${targetId}`\n        );\n\n        // Advance the last limbo free snapshot version\n        const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n        const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(\n          lastLimboFreeSnapshotVersion\n        );\n        this.targetDataByTarget = this.targetDataByTarget.insert(\n          targetId,\n          updatedTargetData\n        );\n      }\n    }\n  }\n\n  /**\n   * Gets the mutation batch after the passed in batchId in the mutation queue\n   * or null if empty.\n   * @param afterBatchId If provided, the batch to search after.\n   * @returns The next mutation or null if there wasn't one.\n   */\n  nextMutationBatch(afterBatchId?: BatchId): Promise<MutationBatch | null> {\n    return this.persistence.runTransaction(\n      'Get next mutation batch',\n      'readonly',\n      txn => {\n        if (afterBatchId === undefined) {\n          afterBatchId = BATCHID_UNKNOWN;\n        }\n        return this.mutationQueue.getNextMutationBatchAfterBatchId(\n          txn,\n          afterBatchId\n        );\n      }\n    );\n  }\n\n  /**\n   * Read the current value of a Document with a given key or null if not\n   * found - used for testing.\n   */\n  readDocument(key: DocumentKey): Promise<MaybeDocument | null> {\n    return this.persistence.runTransaction('read document', 'readonly', txn => {\n      return this.localDocuments.getDocument(txn, key);\n    });\n  }\n\n  /**\n   * Assigns the given target an internal ID so that its results can be pinned so\n   * they don't get GC'd. A target must be allocated in the local store before\n   * the store can be used to manage its view.\n   *\n   * Allocating an already allocated `Target` will return the existing `TargetData`\n   * for that `Target`.\n   */\n  allocateTarget(target: Target): Promise<TargetData> {\n    return this.persistence\n      .runTransaction('Allocate target', 'readwrite', txn => {\n        let targetData: TargetData;\n        return this.targetCache\n          .getTargetData(txn, target)\n          .next((cached: TargetData | null) => {\n            if (cached) {\n              // This target has been listened to previously, so reuse the\n              // previous targetID.\n              // TODO(mcg): freshen last accessed date?\n              targetData = cached;\n              return PersistencePromise.resolve(targetData);\n            } else {\n              return this.targetCache.allocateTargetId(txn).next(targetId => {\n                targetData = new TargetData(\n                  target,\n                  targetId,\n                  TargetPurpose.Listen,\n                  txn.currentSequenceNumber\n                );\n                return this.targetCache\n                  .addTargetData(txn, targetData)\n                  .next(() => targetData);\n              });\n            }\n          });\n      })\n      .then(targetData => {\n        // If Multi-Tab is enabled, the existing target data may be newer than\n        // the in-memory data\n        const cachedTargetData = this.targetDataByTarget.get(\n          targetData.targetId\n        );\n        if (\n          cachedTargetData === null ||\n          targetData.snapshotVersion.compareTo(\n            cachedTargetData.snapshotVersion\n          ) > 0\n        ) {\n          this.targetDataByTarget = this.targetDataByTarget.insert(\n            targetData.targetId,\n            targetData\n          );\n          this.targetIdByTarget.set(target, targetData.targetId);\n        }\n        return targetData;\n      });\n  }\n\n  /**\n   * Returns the TargetData as seen by the LocalStore, including updates that may\n   * have not yet been persisted to the TargetCache.\n   */\n  // Visible for testing.\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetId = this.targetIdByTarget.get(target);\n    if (targetId !== undefined) {\n      return PersistencePromise.resolve<TargetData | null>(\n        this.targetDataByTarget.get(targetId)\n      );\n    } else {\n      return this.targetCache.getTargetData(transaction, target);\n    }\n  }\n\n  /**\n   * Unpin all the documents associated with the given target. If\n   * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\n   * directly removes the associated target data from the target cache.\n   *\n   * Releasing a non-existing `Target` is a no-op.\n   */\n  // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\n  releaseTarget(\n    targetId: number,\n    keepPersistedTargetData: boolean\n  ): Promise<void> {\n    const targetData = this.targetDataByTarget.get(targetId);\n    debugAssert(\n      targetData !== null,\n      `Tried to release nonexistent target: ${targetId}`\n    );\n\n    const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n    return this.persistence\n      .runTransaction('Release target', mode, txn => {\n        if (!keepPersistedTargetData) {\n          return this.persistence.referenceDelegate.removeTarget(\n            txn,\n            targetData!\n          );\n        } else {\n          return PersistencePromise.resolve();\n        }\n      })\n      .then(() => {\n        this.targetDataByTarget = this.targetDataByTarget.remove(targetId);\n        this.targetIdByTarget.delete(targetData!.target);\n      });\n  }\n\n  /**\n   * Runs the specified query against the local store and returns the results,\n   * potentially taking advantage of query data from previous executions (such\n   * as the set of remote keys).\n   *\n   * @param usePreviousResults Whether results from previous executions can\n   * be used to optimize this query execution.\n   */\n  executeQuery(\n    query: Query,\n    usePreviousResults: boolean\n  ): Promise<QueryResult> {\n    let lastLimboFreeSnapshotVersion = SnapshotVersion.min();\n    let remoteKeys = documentKeySet();\n\n    return this.persistence.runTransaction('Execute query', 'readonly', txn => {\n      return this.getTargetData(txn, query.toTarget())\n        .next(targetData => {\n          if (targetData) {\n            lastLimboFreeSnapshotVersion =\n              targetData.lastLimboFreeSnapshotVersion;\n            return this.targetCache\n              .getMatchingKeysForTargetId(txn, targetData.targetId)\n              .next(result => {\n                remoteKeys = result;\n              });\n          }\n        })\n        .next(() =>\n          this.queryEngine.getDocumentsMatchingQuery(\n            txn,\n            query,\n            usePreviousResults\n              ? lastLimboFreeSnapshotVersion\n              : SnapshotVersion.min(),\n            usePreviousResults ? remoteKeys : documentKeySet()\n          )\n        )\n        .next(documents => {\n          return { documents, remoteKeys };\n        });\n    });\n  }\n\n  private applyWriteToRemoteDocuments(\n    txn: PersistenceTransaction,\n    batchResult: MutationBatchResult,\n    documentBuffer: RemoteDocumentChangeBuffer\n  ): PersistencePromise<void> {\n    const batch = batchResult.batch;\n    const docKeys = batch.keys();\n    let promiseChain = PersistencePromise.resolve();\n    docKeys.forEach(docKey => {\n      promiseChain = promiseChain\n        .next(() => {\n          return documentBuffer.getEntry(txn, docKey);\n        })\n        .next((remoteDoc: MaybeDocument | null) => {\n          let doc = remoteDoc;\n          const ackVersion = batchResult.docVersions.get(docKey);\n          hardAssert(\n            ackVersion !== null,\n            'ackVersions should contain every doc in the write.'\n          );\n          if (!doc || doc.version.compareTo(ackVersion!) < 0) {\n            doc = batch.applyToRemoteDocument(docKey, doc, batchResult);\n            if (!doc) {\n              debugAssert(\n                !remoteDoc,\n                'Mutation batch ' +\n                  batch +\n                  ' applied to document ' +\n                  remoteDoc +\n                  ' resulted in null'\n              );\n            } else {\n              // We use the commitVersion as the readTime rather than the\n              // document's updateTime since the updateTime is not advanced\n              // for updates that do not modify the underlying document.\n              documentBuffer.addEntry(doc, batchResult.commitVersion);\n            }\n          }\n        });\n    });\n    return promiseChain.next(() =>\n      this.mutationQueue.removeMutationBatch(txn, batch)\n    );\n  }\n\n  collectGarbage(garbageCollector: LruGarbageCollector): Promise<LruResults> {\n    return this.persistence.runTransaction(\n      'Collect garbage',\n      'readwrite-primary',\n      txn => garbageCollector.collect(txn, this.targetDataByTarget)\n    );\n  }\n}\n\n/**\n * An implementation of LocalStore that provides additional functionality\n * for MultiTabSyncEngine.\n */\n// PORTING NOTE: Web only.\nexport class MultiTabLocalStore extends LocalStore {\n  protected mutationQueue: IndexedDbMutationQueue;\n  protected remoteDocuments: IndexedDbRemoteDocumentCache;\n  protected targetCache: IndexedDbTargetCache;\n\n  constructor(\n    protected persistence: IndexedDbPersistence,\n    queryEngine: QueryEngine,\n    initialUser: User\n  ) {\n    super(persistence, queryEngine, initialUser);\n\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n  }\n\n  /** Starts the LocalStore. */\n  start(): Promise<void> {\n    return this.synchronizeLastDocumentChangeReadTime();\n  }\n\n  /** Returns the local view of the documents affected by a mutation batch. */\n  lookupMutationDocuments(batchId: BatchId): Promise<MaybeDocumentMap | null> {\n    return this.persistence.runTransaction(\n      'Lookup mutation documents',\n      'readonly',\n      txn => {\n        return this.mutationQueue\n          .lookupMutationKeys(txn, batchId)\n          .next(keys => {\n            if (keys) {\n              return this.localDocuments.getDocuments(\n                txn,\n                keys\n              ) as PersistencePromise<MaybeDocumentMap | null>;\n            } else {\n              return PersistencePromise.resolve<MaybeDocumentMap | null>(null);\n            }\n          });\n      }\n    );\n  }\n\n  removeCachedMutationBatchMetadata(batchId: BatchId): void {\n    this.mutationQueue.removeCachedMutationKeys(batchId);\n  }\n\n  setNetworkEnabled(networkEnabled: boolean): void {\n    this.persistence.setNetworkEnabled(networkEnabled);\n  }\n\n  getActiveClients(): Promise<ClientId[]> {\n    return this.persistence.getActiveClients();\n  }\n\n  getTarget(targetId: TargetId): Promise<Target | null> {\n    const cachedTargetData = this.targetDataByTarget.get(targetId);\n\n    if (cachedTargetData) {\n      return Promise.resolve(cachedTargetData.target);\n    } else {\n      return this.persistence.runTransaction(\n        'Get target data',\n        'readonly',\n        txn => {\n          return this.targetCache\n            .getTargetDataForTarget(txn, targetId)\n            .next(targetData => (targetData ? targetData.target : null));\n        }\n      );\n    }\n  }\n\n  /**\n   * Returns the set of documents that have been updated since the last call.\n   * If this is the first call, returns the set of changes since client\n   * initialization. Further invocations will return document changes since\n   * the point of rejection.\n   */\n  getNewDocumentChanges(): Promise<MaybeDocumentMap> {\n    return this.persistence\n      .runTransaction('Get new document changes', 'readonly', txn =>\n        this.remoteDocuments.getNewDocumentChanges(\n          txn,\n          this.lastDocumentChangeReadTime\n        )\n      )\n      .then(({ changedDocs, readTime }) => {\n        this.lastDocumentChangeReadTime = readTime;\n        return changedDocs;\n      });\n  }\n\n  /**\n   * Reads the newest document change from persistence and forwards the internal\n   * synchronization marker so that calls to `getNewDocumentChanges()`\n   * only return changes that happened after client initialization.\n   */\n  async synchronizeLastDocumentChangeReadTime(): Promise<void> {\n    this.lastDocumentChangeReadTime = await this.persistence.runTransaction(\n      'Synchronize last document change read time',\n      'readonly',\n      txn => this.remoteDocuments.getLastReadTime(txn)\n    );\n  }\n}\n\n/**\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\n * operation fails because the primary lease has been taken by another client,\n * we ignore the error (the persistence layer will immediately call\n * `applyPrimaryLease` to propagate the primary state change). All other errors\n * are re-thrown.\n *\n * @param err An error returned by a LocalStore operation.\n * @return A Promise that resolves after we recovered, or the original error.\n */\nexport async function ignoreIfPrimaryLeaseLoss(\n  err: FirestoreError\n): Promise<void> {\n  if (\n    err.code === Code.FAILED_PRECONDITION &&\n    err.message === PRIMARY_LEASE_LOST_ERROR_MSG\n  ) {\n    logDebug(LOG_TAG, 'Unexpectedly lost primary lease');\n  } else {\n    throw err;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, TargetId } from '../core/types';\nimport { documentKeySet, DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedSet } from '../util/sorted_set';\n\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nexport class ReferenceSet {\n  // A set of outstanding references to a document sorted by key.\n  private refsByKey = new SortedSet(DocReference.compareByKey);\n\n  // A set of outstanding references to a document sorted by target id.\n  private refsByTarget = new SortedSet(DocReference.compareByTargetId);\n\n  /** Returns true if the reference set contains no references. */\n  isEmpty(): boolean {\n    return this.refsByKey.isEmpty();\n  }\n\n  /** Adds a reference to the given document key for the given ID. */\n  addReference(key: DocumentKey, id: TargetId | BatchId): void {\n    const ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  }\n\n  /** Add references to the given document keys for the given ID. */\n  addReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.addReference(key, id));\n  }\n\n  /**\n   * Removes a reference to the given document key for the given\n   * ID.\n   */\n  removeReference(key: DocumentKey, id: TargetId | BatchId): void {\n    this.removeRef(new DocReference(key, id));\n  }\n\n  removeReferences(keys: DocumentKeySet, id: TargetId | BatchId): void {\n    keys.forEach(key => this.removeReference(key, id));\n  }\n\n  /**\n   * Clears all references with a given ID. Calls removeRef() for each key\n   * removed.\n   */\n  removeReferencesForId(id: TargetId | BatchId): DocumentKey[] {\n    const emptyKey = DocumentKey.EMPTY;\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    const keys: DocumentKey[] = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      this.removeRef(ref);\n      keys.push(ref.key);\n    });\n    return keys;\n  }\n\n  removeAllReferences(): void {\n    this.refsByKey.forEach(ref => this.removeRef(ref));\n  }\n\n  private removeRef(ref: DocReference): void {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  }\n\n  referencesForId(id: TargetId | BatchId): DocumentKeySet {\n    const emptyKey = DocumentKey.EMPTY;\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    let keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  }\n\n  containsKey(key: DocumentKey): boolean {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  }\n}\n\nexport class DocReference {\n  constructor(\n    public key: DocumentKey,\n    public targetOrBatchId: TargetId | BatchId\n  ) {}\n\n  /** Compare by key then by ID */\n  static compareByKey(left: DocReference, right: DocReference): number {\n    return (\n      DocumentKey.comparator(left.key, right.key) ||\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId)\n    );\n  }\n\n  /** Compare by ID then by key */\n  static compareByTargetId(left: DocReference, right: DocReference): number {\n    return (\n      primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\n      DocumentKey.comparator(left.key, right.key)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { Dict, forEach } from './obj';\nimport { DocumentKey } from '../model/document_key';\nimport { ResourcePath } from '../model/path';\n\n/** Types accepted by validateType() and related methods for validation. */\nexport type ValidationType =\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'boolean'\n  | 'number'\n  | 'string'\n  | 'non-empty string';\n\n/**\n * Validates that no arguments were passed in the invocation of functionName.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateNoArgs('myFunction', arguments);\n */\nexport function validateNoArgs(functionName: string, args: IArguments): void {\n  if (args.length !== 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() does not support arguments, ` +\n        'but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(\n  functionName: string,\n  args: ArrayLike<unknown>,\n  numberOfArgs: number\n): void {\n  if (args.length !== numberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires ` +\n        formatPlural(numberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires at least ` +\n        formatPlural(minNumberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number,\n  maxNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires between ${minNumberOfArgs} and ` +\n        `${maxNumberOfArgs} arguments, but was called with ` +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements<T>(\n  functionName: string,\n  value: T[],\n  name: string,\n  minNumberOfElements: number\n): void {\n  if (!(value instanceof Array) || value.length < minNumberOfElements) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${name} argument to be an ` +\n        'array with at least ' +\n        `${formatPlural(minNumberOfElements, 'element')}.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${ordinal(position)} argument`, argument);\n}\n\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(\n  functionName: string,\n  type: ValidationType,\n  position: number,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateArgType(functionName, type, position, argument);\n  }\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  validateType(functionName, type, `${optionName} option`, argument);\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(\n  functionName: string,\n  type: ValidationType,\n  optionName: string,\n  argument: unknown\n): void {\n  if (argument !== undefined) {\n    validateNamedType(functionName, type, optionName, argument);\n  }\n}\n\nexport function validateArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[],\n  validator: (arg0: T) => boolean\n): void {\n  if (!(argument instanceof Array)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${optionName} ` +\n        `option to be an array, but it was: ${valueDescription(argument)}`\n    );\n  }\n\n  for (let i = 0; i < argument.length; ++i) {\n    if (!validator(argument[i])) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${functionName}() requires all ${optionName} ` +\n          `elements to be ${typeDescription}, but the value at index ${i} ` +\n          `was: ${valueDescription(argument[i])}`\n      );\n    }\n  }\n}\n\nexport function validateOptionalArrayElements<T>(\n  functionName: string,\n  optionName: string,\n  typeDescription: string,\n  argument: T[] | undefined,\n  validator: (arg0: T) => boolean\n): void {\n  if (argument !== undefined) {\n    validateArrayElements(\n      functionName,\n      optionName,\n      typeDescription,\n      argument,\n      validator\n    );\n  }\n}\n\n/**\n * Validates that the provided named option equals one of the expected values.\n */\nexport function validateNamedPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  const expectedDescription: string[] = [];\n\n  for (const val of expected) {\n    if (val === input) {\n      return;\n    }\n    expectedDescription.push(valueDescription(val));\n  }\n\n  const actualDescription = valueDescription(input);\n  throw new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Invalid value ${actualDescription} provided to function ${functionName}() for option ` +\n      `\"${optionName}\". Acceptable values: ${expectedDescription.join(', ')}`\n  );\n}\n\n/**\n * Validates that the provided named option equals one of the expected values or\n * is undefined.\n */\nexport function validateNamedOptionalPropertyEquals<T>(\n  functionName: string,\n  inputName: string,\n  optionName: string,\n  input: T,\n  expected: T[]\n): void {\n  if (input !== undefined) {\n    validateNamedPropertyEquals(\n      functionName,\n      inputName,\n      optionName,\n      input,\n      expected\n    );\n  }\n}\n\n/**\n * Validates that the provided argument is a valid enum.\n *\n * @param functionName Function making the validation call.\n * @param enums Array containing all possible values for the enum.\n * @param position Position of the argument in `functionName`.\n * @param argument Argument to validate.\n * @return The value as T if the argument can be converted.\n */\nexport function validateStringEnum<T>(\n  functionName: string,\n  enums: T[],\n  position: number,\n  argument: unknown\n): T {\n  if (!enums.some(element => element === argument)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value ${valueDescription(argument)} provided to function ` +\n        `${functionName}() for its ${ordinal(position)} argument. Acceptable ` +\n        `values: ${enums.join(', ')}`\n    );\n  }\n  return argument as T;\n}\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nexport function validateDocumentPath(path: ResourcePath): void {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid document path (${path}). Path points to a collection.`\n    );\n  }\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nexport function validateCollectionPath(path: ResourcePath): void {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid collection path (${path}). Path points to a document.`\n    );\n  }\n}\n\n/** Helper to validate the type of a provided input. */\nfunction validateType(\n  functionName: string,\n  type: ValidationType,\n  inputName: string,\n  input: unknown\n): void {\n  let valid = false;\n  if (type === 'object') {\n    valid = isPlainObject(input);\n  } else if (type === 'non-empty string') {\n    valid = typeof input === 'string' && input !== '';\n  } else {\n    valid = typeof input === type;\n  }\n\n  if (!valid) {\n    const description = valueDescription(input);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${inputName} ` +\n        `to be of type ${type}, but it was: ${description}`\n    );\n  }\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    (Object.getPrototypeOf(input) === Object.prototype ||\n      Object.getPrototypeOf(input) === null)\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: unknown): string {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input!);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/** Validates the provided argument is defined. */\nexport function validateDefined(\n  functionName: string,\n  position: number,\n  argument: unknown\n): void {\n  if (argument === undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a valid ${ordinal(position)} ` +\n        `argument, but it was undefined.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(\n  functionName: string,\n  options: object,\n  optionNames: string[]\n): void {\n  forEach(options as Dict<unknown>, (key, _) => {\n    if (optionNames.indexOf(key) < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Unknown option '${key}' passed to function ${functionName}(). ` +\n          'Available options: ' +\n          optionNames.join(', ')\n      );\n    }\n  });\n}\n\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: unknown\n): Error {\n  const description = valueDescription(argument);\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Function ${functionName}() requires its ${ordinal(position)} ` +\n      `argument to be a ${type}, but it was: ${description}`\n  );\n}\n\nexport function validatePositiveNumber(\n  functionName: string,\n  position: number,\n  n: number\n): void {\n  if (n <= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${ordinal(\n        position\n      )} argument to be a positive number, but it was: ${n}.`\n    );\n  }\n}\n\n/** Converts a number to its english word representation */\nfunction ordinal(num: number): string {\n  switch (num) {\n    case 1:\n      return 'first';\n    case 2:\n      return 'second';\n    case 3:\n      return 'third';\n    default:\n      return num + 'th';\n  }\n}\n\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num: number, str: string): string {\n  return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBase64Available } from '../platform/base64';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { ByteString } from '../util/byte_string';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable(): void {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available(): void {\n  if (!isBase64Available()) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob {\n  // Prefix with underscore to signal that we consider this not part of the\n  // public API and to prevent it from showing up for autocompletion.\n  _byteString: ByteString;\n\n  constructor(byteString: ByteString) {\n    assertBase64Available();\n    this._byteString = byteString;\n  }\n\n  static fromBase64String(base64: string): Blob {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try {\n      return new Blob(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    }\n    return new Blob(ByteString.fromUint8Array(array));\n  }\n\n  toBase64(): string {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return this._byteString.toBase64();\n  }\n\n  toUint8Array(): Uint8Array {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    return this._byteString.toUint8Array();\n  }\n\n  toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n  isEqual(other: Blob): boolean {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateNamedArrayAtLeastNumberOfElements\n} from '../util/input_validation';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n\n/**\n * A field class base class that is shared by the lite, full and legacy SDK,\n * which supports shared code that deals with FieldPaths.\n */\nexport abstract class BaseFieldPath {\n  /** Internal representation of a Firestore field path. */\n  readonly _internalPath: InternalFieldPath;\n\n  constructor(fieldNames: string[]) {\n    validateNamedArrayAtLeastNumberOfElements(\n      'FieldPath',\n      fieldNames,\n      'fieldNames',\n      1\n    );\n\n    for (let i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n}\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath extends BaseFieldPath implements firestore.FieldPath {\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    super(fieldNames);\n  }\n\n  /**\n   * Internal Note: The backend doesn't technically support querying by\n   * document ID. Instead it queries by the entire document name (full path\n   * included), but in the cases we currently support documentId(), the net\n   * effect is the same.\n   */\n  private static readonly _DOCUMENT_ID = new FieldPath(\n    InternalFieldPath.keyField().canonicalString()\n  );\n\n  static documentId(): FieldPath {\n    return FieldPath._DOCUMENT_ID;\n  }\n\n  isEqual(other: firestore.FieldPath): boolean {\n    if (!(other instanceof FieldPath)) {\n      throw invalidClassError('isEqual', 'FieldPath', 1, other);\n    }\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\nimport {\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateExactNumberOfArgs,\n  validateNoArgs\n} from '../util/input_validation';\nimport { FieldTransform } from '../model/mutation';\nimport {\n  ArrayRemoveTransformOperation,\n  ArrayUnionTransformOperation,\n  NumericIncrementTransformOperation,\n  ServerTimestampTransform\n} from '../model/transform_operation';\nimport { ParseContext, parseData, UserDataSource } from './user_data_reader';\nimport { debugAssert } from '../util/assert';\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API that\n * is shared between the full, lite and legacy SDK.\n */\nexport abstract class SerializableFieldValue {\n  /** The public API endpoint that returns this class. */\n  abstract readonly _methodName: string;\n\n  /** A pointer to the implementing class. */\n  readonly _delegate: SerializableFieldValue = this;\n\n  abstract _toFieldTransform(context: ParseContext): FieldTransform | null;\n\n  abstract isEqual(other: SerializableFieldValue): boolean;\n}\n\nexport class DeleteFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): null {\n    if (context.dataSource === UserDataSource.MergeSet) {\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      context.fieldMask.push(context.path!);\n    } else if (context.dataSource === UserDataSource.Update) {\n      debugAssert(\n        context.path!.length > 0,\n        `${this._methodName}() at the top level should have already ` +\n          'been handled.'\n      );\n      throw context.createError(\n        `${this._methodName}() can only appear at the top level ` +\n          'of your update data'\n      );\n    } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(\n        `${this._methodName}() cannot be used with set() unless you pass ` +\n          '{merge:true}'\n      );\n    }\n    return null;\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof DeleteFieldValueImpl;\n  }\n}\n\nexport class ServerTimestampFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    return new FieldTransform(context.path!, ServerTimestampTransform.instance);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    return other instanceof ServerTimestampFieldValueImpl;\n  }\n}\n\nexport class ArrayUnionFieldValueImpl extends SerializableFieldValue {\n  constructor(\n    readonly _methodName: string,\n    private readonly _elements: unknown[]\n  ) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    // Although array transforms are used with writes, the actual elements\n    // being uniomed or removed are not considered writes since they cannot\n    // contain any FieldValue sentinels, etc.\n    const parseContext = new ParseContext(\n      {\n        dataSource: UserDataSource.Argument,\n        methodName: this._methodName,\n        arrayElement: true\n      },\n      context.databaseId,\n      context.serializer,\n      context.ignoreUndefinedProperties\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class ArrayRemoveFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string, readonly _elements: unknown[]) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    // Although array transforms are used with writes, the actual elements\n    // being unioned or removed are not considered writes since they cannot\n    // contain any FieldValue sentinels, etc.\n    const parseContext = new ParseContext(\n      {\n        dataSource: UserDataSource.Argument,\n        methodName: this._methodName,\n        arrayElement: true\n      },\n      context.databaseId,\n      context.serializer,\n      context.ignoreUndefinedProperties\n    );\n    const parsedElements = this._elements.map(\n      element => parseData(element, parseContext)!\n    );\n    const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path!, arrayUnion);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\nexport class NumericIncrementFieldValueImpl extends SerializableFieldValue {\n  constructor(readonly _methodName: string, private readonly _operand: number) {\n    super();\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform {\n    const parseContext = new ParseContext(\n      {\n        dataSource: UserDataSource.Argument,\n        methodName: this._methodName\n      },\n      context.databaseId,\n      context.serializer,\n      context.ignoreUndefinedProperties\n    );\n    const operand = parseData(this._operand, parseContext)!;\n    const numericIncrement = new NumericIncrementTransformOperation(\n      context.serializer,\n      operand\n    );\n    return new FieldTransform(context.path!, numericIncrement);\n  }\n\n  isEqual(other: FieldValue): boolean {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  }\n}\n\n/** The public FieldValue class of the lite API. */\nexport abstract class FieldValue extends SerializableFieldValue\n  implements firestore.FieldValue {\n  static delete(): firestore.FieldValue {\n    validateNoArgs('FieldValue.delete', arguments);\n    return new FieldValueDelegate(\n      new DeleteFieldValueImpl('FieldValue.delete')\n    );\n  }\n\n  static serverTimestamp(): firestore.FieldValue {\n    validateNoArgs('FieldValue.serverTimestamp', arguments);\n    return new FieldValueDelegate(\n      new ServerTimestampFieldValueImpl('FieldValue.serverTimestamp')\n    );\n  }\n\n  static arrayUnion(...elements: unknown[]): firestore.FieldValue {\n    validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new FieldValueDelegate(\n      new ArrayUnionFieldValueImpl('FieldValue.arrayUnion', elements)\n    );\n  }\n\n  static arrayRemove(...elements: unknown[]): firestore.FieldValue {\n    validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1);\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new FieldValueDelegate(\n      new ArrayRemoveFieldValueImpl('FieldValue.arrayRemove', elements)\n    );\n  }\n\n  static increment(n: number): firestore.FieldValue {\n    validateArgType('FieldValue.increment', 'number', 1, n);\n    validateExactNumberOfArgs('FieldValue.increment', arguments, 1);\n    return new FieldValueDelegate(\n      new NumericIncrementFieldValueImpl('FieldValue.increment', n)\n    );\n  }\n}\n\n/**\n * A delegate class that allows the FieldValue implementations returned by\n * deleteField(), serverTimestamp(), arrayUnion(), arrayRemove() and\n * increment() to be an instance of the legacy FieldValue class declared above.\n *\n * We don't directly subclass `FieldValue` in the various field value\n * implementations as the base FieldValue class differs between the lite, full\n * and legacy SDK.\n */\nclass FieldValueDelegate extends FieldValue implements firestore.FieldValue {\n  readonly _methodName: string;\n\n  constructor(readonly _delegate: SerializableFieldValue) {\n    super();\n    this._methodName = _delegate._methodName;\n  }\n\n  _toFieldTransform(context: ParseContext): FieldTransform | null {\n    return this._delegate._toFieldTransform(context);\n  }\n\n  isEqual(other: firestore.FieldValue): boolean {\n    if (!(other instanceof FieldValueDelegate)) {\n      return false;\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  constructor(latitude: number, longitude: number) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * Returns the latitude of this geo point, a number between -90 and 90.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * Returns the longitude of this geo point, a number between -180 and 180.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  isEqual(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Return the Platform-specific serializer monitor. */\nimport { DatabaseId } from '../../core/database_info';\nimport { JsonProtoSerializer } from '../../remote/serializer';\n\nexport function newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n  return new JsonProtoSerializer(databaseId, /* useProto3Json= */ true);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  FieldMask,\n  FieldTransform,\n  Mutation,\n  PatchMutation,\n  Precondition,\n  SetMutation,\n  TransformMutation\n} from '../model/mutation';\nimport { FieldPath } from '../model/path';\nimport { debugAssert, fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { isPlainObject, valueDescription } from '../util/input_validation';\nimport { Dict, forEach, isEmpty } from '../util/obj';\nimport { ObjectValue, ObjectValueBuilder } from '../model/object_value';\nimport {\n  JsonProtoSerializer,\n  toBytes,\n  toNumber,\n  toResourceName,\n  toTimestamp\n} from '../remote/serializer';\nimport { Blob } from './blob';\nimport { BaseFieldPath, fromDotSeparatedString } from './field_path';\nimport { DeleteFieldValueImpl, SerializableFieldValue } from './field_value';\nimport { GeoPoint } from './geo_point';\nimport { newSerializer } from '../platform/serializer';\n\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n\n/**\n * An untyped Firestore Data Converter interface that is shared between the\n * lite, full and legacy SDK.\n */\nexport interface UntypedFirestoreDataConverter<T> {\n  toFirestore(modelObject: T): firestore.DocumentData;\n  fromFirestore(snapshot: unknown, options?: unknown): T;\n}\n\n/**\n * A reference to a document in a Firebase project.\n *\n * This class serves as a common base class for the public DocumentReferences\n * exposed in the lite, full and legacy SDK.\n */\nexport class DocumentKeyReference<T> {\n  constructor(\n    readonly _databaseId: DatabaseId,\n    readonly _key: DocumentKey,\n    readonly _converter: UntypedFirestoreDataConverter<T> | null\n  ) {}\n}\n\n/** The result of parsing document data (e.g. for a setData call). */\nexport class ParsedSetData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask | null,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [] as Mutation[];\n    if (this.fieldMask !== null) {\n      mutations.push(\n        new PatchMutation(key, this.data, this.fieldMask, precondition)\n      );\n    } else {\n      mutations.push(new SetMutation(key, this.data, precondition));\n    }\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nexport class ParsedUpdateData {\n  constructor(\n    readonly data: ObjectValue,\n    readonly fieldMask: FieldMask,\n    readonly fieldTransforms: FieldTransform[]\n  ) {}\n\n  toMutations(key: DocumentKey, precondition: Precondition): Mutation[] {\n    const mutations = [\n      new PatchMutation(key, this.data, this.fieldMask, precondition)\n    ] as Mutation[];\n    if (this.fieldTransforms.length > 0) {\n      mutations.push(new TransformMutation(key, this.fieldTransforms));\n    }\n    return mutations;\n  }\n}\n\n/*\n * Represents what type of API method provided the data being parsed; useful\n * for determining which error conditions apply during parsing and providing\n * better error messages.\n */\nexport const enum UserDataSource {\n  Set,\n  Update,\n  MergeSet,\n  /**\n   * Indicates the source is a where clause, cursor bound, arrayUnion()\n   * element, etc. Of note, isWrite(source) will return false.\n   */\n  Argument,\n  /**\n   * Indicates that the source is an Argument that may directly contain nested\n   * arrays (e.g. the operand of an `in` query).\n   */\n  ArrayArgument\n}\n\nfunction isWrite(dataSource: UserDataSource): boolean {\n  switch (dataSource) {\n    case UserDataSource.Set: // fall through\n    case UserDataSource.MergeSet: // fall through\n    case UserDataSource.Update:\n      return true;\n    case UserDataSource.Argument:\n    case UserDataSource.ArrayArgument:\n      return false;\n    default:\n      throw fail(`Unexpected case for UserDataSource: ${dataSource}`);\n  }\n}\n\n/** Contains the settings that are mutated as we parse user data. */\ninterface ContextSettings {\n  /** Indicates what kind of API method this data came from. */\n  readonly dataSource: UserDataSource;\n  /** The name of the method the user called to create the ParseContext. */\n  readonly methodName: string;\n  /**\n   * A path within the object being parsed. This could be an empty path (in\n   * which case the context represents the root of the data being parsed), or a\n   * nonempty path (indicating the context represents a nested location within\n   * the data).\n   */\n  readonly path?: FieldPath;\n  /**\n   * Whether or not this context corresponds to an element of an array.\n   * If not set, elements are treated as if they were outside of arrays.\n   */\n  readonly arrayElement?: boolean;\n}\n\n/** A \"context\" object passed around while parsing user data. */\nexport class ParseContext {\n  readonly fieldTransforms: FieldTransform[];\n  readonly fieldMask: FieldPath[];\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings The settings for the parser.\n   * @param databaseId The database ID of the Firestore instance.\n   * @param serializer The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms A mutable list of field transforms encountered while\n   *     parsing the data.\n   * @param fieldMask A mutable list of field paths encountered while parsing\n   *     the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(\n    readonly settings: ContextSettings,\n    readonly databaseId: DatabaseId,\n    readonly serializer: JsonProtoSerializer,\n    readonly ignoreUndefinedProperties: boolean,\n    fieldTransforms?: FieldTransform[],\n    fieldMask?: FieldPath[]\n  ) {\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  get path(): FieldPath | undefined {\n    return this.settings.path;\n  }\n\n  get dataSource(): UserDataSource {\n    return this.settings.dataSource;\n  }\n\n  /** Returns a new context with the specified settings overwritten. */\n  contextWith(configuration: Partial<ContextSettings>): ParseContext {\n    return new ParseContext(\n      { ...this.settings, ...configuration },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties,\n      this.fieldTransforms,\n      this.fieldMask\n    );\n  }\n\n  childContextForField(field: string): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePathSegment(field);\n    return context;\n  }\n\n  childContextForFieldPath(field: FieldPath): ParseContext {\n    const childPath = this.path?.child(field);\n    const context = this.contextWith({ path: childPath, arrayElement: false });\n    context.validatePath();\n    return context;\n  }\n\n  childContextForArray(index: number): ParseContext {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({ path: undefined, arrayElement: true });\n  }\n\n  createError(reason: string): Error {\n    const fieldDescription =\n      !this.path || this.path.isEmpty()\n        ? ''\n        : ` (found in field ${this.path.toString()})`;\n    return new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${this.settings.methodName}() called with invalid data. ` +\n        reason +\n        fieldDescription\n    );\n  }\n\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath: FieldPath): boolean {\n    return (\n      this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\n      this.fieldTransforms.find(transform =>\n        fieldPath.isPrefixOf(transform.field)\n      ) !== undefined\n    );\n  }\n\n  private validatePath(): void {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n\n  private validatePathSegment(segment: string): void {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nexport class UserDataReader {\n  private readonly serializer: JsonProtoSerializer;\n\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly ignoreUndefinedProperties: boolean,\n    serializer?: JsonProtoSerializer\n  ) {\n    this.serializer = serializer || newSerializer(databaseId);\n  }\n\n  /** Parse document data from a set() call. */\n  parseSetData(\n    methodName: string,\n    input: unknown,\n    options: firestore.SetOptions = {}\n  ): ParsedSetData {\n    const context = this.createContext(\n      options.merge || options.mergeFields\n        ? UserDataSource.MergeSet\n        : UserDataSource.Set,\n      methodName\n    );\n    validatePlainObject('Data must be an object, but it was:', context, input);\n    const updateData = parseObject(input, context)!;\n\n    let fieldMask: FieldMask | null;\n    let fieldTransforms: FieldTransform[];\n\n    if (options.merge) {\n      fieldMask = new FieldMask(context.fieldMask);\n      fieldTransforms = context.fieldTransforms;\n    } else if (options.mergeFields) {\n      const validatedFieldPaths: FieldPath[] = [];\n\n      for (const stringOrFieldPath of options.mergeFields) {\n        let fieldPath: FieldPath;\n\n        if (stringOrFieldPath instanceof BaseFieldPath) {\n          fieldPath = stringOrFieldPath._internalPath;\n        } else if (typeof stringOrFieldPath === 'string') {\n          fieldPath = fieldPathFromDotSeparatedString(\n            methodName,\n            stringOrFieldPath\n          );\n        } else {\n          throw fail(\n            'Expected stringOrFieldPath to be a string or a FieldPath'\n          );\n        }\n\n        if (!context.contains(fieldPath)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Field '${fieldPath}' is specified in your field mask but missing from your input data.`\n          );\n        }\n\n        if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n          validatedFieldPaths.push(fieldPath);\n        }\n      }\n\n      fieldMask = new FieldMask(validatedFieldPaths);\n      fieldTransforms = context.fieldTransforms.filter(transform =>\n        fieldMask!.covers(transform.field)\n      );\n    } else {\n      fieldMask = null;\n      fieldTransforms = context.fieldTransforms;\n    }\n\n    return new ParsedSetData(\n      new ObjectValue(updateData),\n      fieldMask,\n      fieldTransforms\n    );\n  }\n\n  /** Parse update data from an update() call. */\n  parseUpdateData(methodName: string, input: unknown): ParsedUpdateData {\n    const context = this.createContext(UserDataSource.Update, methodName);\n    validatePlainObject('Data must be an object, but it was:', context, input);\n\n    const fieldMaskPaths: FieldPath[] = [];\n    const updateData = new ObjectValueBuilder();\n    forEach(input as Dict<unknown>, (key, value) => {\n      const path = fieldPathFromDotSeparatedString(methodName, key);\n\n      const childContext = context.childContextForFieldPath(path);\n      if (\n        value instanceof SerializableFieldValue &&\n        value._delegate instanceof DeleteFieldValueImpl\n      ) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        const parsedValue = parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    });\n\n    const mask = new FieldMask(fieldMaskPaths);\n    return new ParsedUpdateData(\n      updateData.build(),\n      mask,\n      context.fieldTransforms\n    );\n  }\n\n  /** Parse update data from a list of field/value arguments. */\n  parseUpdateVarargs(\n    methodName: string,\n    field: string | BaseFieldPath,\n    value: unknown,\n    moreFieldsAndValues: unknown[]\n  ): ParsedUpdateData {\n    const context = this.createContext(UserDataSource.Update, methodName);\n    const keys = [fieldPathFromArgument(methodName, field)];\n    const values = [value];\n\n    if (moreFieldsAndValues.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function ${methodName}() needs to be called with an even number ` +\n          'of arguments that alternate between field names and values.'\n      );\n    }\n\n    for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n      keys.push(\n        fieldPathFromArgument(\n          methodName,\n          moreFieldsAndValues[i] as string | BaseFieldPath\n        )\n      );\n      values.push(moreFieldsAndValues[i + 1]);\n    }\n\n    const fieldMaskPaths: FieldPath[] = [];\n    const updateData = new ObjectValueBuilder();\n\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let i = keys.length - 1; i >= 0; --i) {\n      if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n        const path = keys[i];\n        const value = values[i];\n        const childContext = context.childContextForFieldPath(path);\n        if (\n          value instanceof SerializableFieldValue &&\n          value._delegate instanceof DeleteFieldValueImpl\n        ) {\n          // Add it to the field mask, but don't add anything to updateData.\n          fieldMaskPaths.push(path);\n        } else {\n          const parsedValue = parseData(value, childContext);\n          if (parsedValue != null) {\n            fieldMaskPaths.push(path);\n            updateData.set(path, parsedValue);\n          }\n        }\n      }\n    }\n\n    const mask = new FieldMask(fieldMaskPaths);\n    return new ParsedUpdateData(\n      updateData.build(),\n      mask,\n      context.fieldTransforms\n    );\n  }\n\n  /** Creates a new top-level parse context. */\n  private createContext(\n    dataSource: UserDataSource,\n    methodName: string\n  ): ParseContext {\n    return new ParseContext(\n      {\n        dataSource,\n        methodName,\n        path: FieldPath.EMPTY_PATH,\n        arrayElement: false\n      },\n      this.databaseId,\n      this.serializer,\n      this.ignoreUndefinedProperties\n    );\n  }\n\n  /**\n   * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n   * bound).\n   *\n   * @param allowArrays Whether the query value is an array that may directly\n   * contain additional arrays (e.g. the operand of an `in` query).\n   */\n  parseQueryValue(\n    methodName: string,\n    input: unknown,\n    allowArrays = false\n  ): api.Value {\n    const context = this.createContext(\n      allowArrays ? UserDataSource.ArrayArgument : UserDataSource.Argument,\n      methodName\n    );\n    const parsed = parseData(input, context);\n    debugAssert(parsed != null, 'Parsed data should not be null.');\n    debugAssert(\n      context.fieldTransforms.length === 0,\n      'Field transforms should have been disallowed.'\n    );\n    return parsed;\n  }\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input Data to be parsed.\n * @param context A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @return The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nexport function parseData(\n  input: unknown,\n  context: ParseContext\n): api.Value | null {\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof SerializableFieldValue) {\n    // FieldValues usually parse into transforms (except FieldValue.delete())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (\n        context.settings.arrayElement &&\n        context.dataSource !== UserDataSource.ArrayArgument\n      ) {\n        throw context.createError('Nested arrays are not supported');\n      }\n      return parseArray(input as unknown[], context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\n\nfunction parseObject(\n  obj: Dict<unknown>,\n  context: ParseContext\n): { mapValue: api.MapValue } {\n  const fields: Dict<api.Value> = {};\n\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, (key: string, val: unknown) => {\n      const parsedValue = parseData(val, context.childContextForField(key));\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n\n  return { mapValue: { fields } };\n}\n\nfunction parseArray(array: unknown[], context: ParseContext): api.Value {\n  const values: api.Value[] = [];\n  let entryIndex = 0;\n  for (const entry of array) {\n    let parsedEntry = parseData(\n      entry,\n      context.childContextForArray(entryIndex)\n    );\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = { nullValue: 'NULL_VALUE' };\n    }\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n  return { arrayValue: { values } };\n}\n\n/**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\nfunction parseSentinelFieldValue(\n  value: SerializableFieldValue,\n  context: ParseContext\n): void {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(\n      `${value._methodName}() can only be used with update() and set()`\n    );\n  }\n  if (!context.path) {\n    throw context.createError(\n      `${value._methodName}() is not currently supported inside arrays`\n    );\n  }\n\n  const fieldTransform = value._toFieldTransform(context);\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n\n/**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @return The parsed value\n */\nfunction parseScalarValue(\n  value: unknown,\n  context: ParseContext\n): api.Value | null {\n  if (value === null) {\n    return { nullValue: 'NULL_VALUE' };\n  } else if (typeof value === 'number') {\n    return toNumber(context.serializer, value);\n  } else if (typeof value === 'boolean') {\n    return { booleanValue: value };\n  } else if (typeof value === 'string') {\n    return { stringValue: value };\n  } else if (value instanceof Date) {\n    const timestamp = Timestamp.fromDate(value);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    const timestamp = new Timestamp(\n      value.seconds,\n      Math.floor(value.nanoseconds / 1000) * 1000\n    );\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Blob) {\n    return { bytesValue: toBytes(context.serializer, value) };\n  } else if (value instanceof DocumentKeyReference) {\n    const thisDb = context.databaseId;\n    const otherDb = value._databaseId;\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError(\n        'Document reference is for database ' +\n          `${otherDb.projectId}/${otherDb.database} but should be ` +\n          `for database ${thisDb.projectId}/${thisDb.database}`\n      );\n    }\n    return {\n      referenceValue: toResourceName(\n        value._databaseId || context.databaseId,\n        value._key.path\n      )\n    };\n  } else if (value === undefined && context.ignoreUndefinedProperties) {\n    return null;\n  } else {\n    throw context.createError(\n      `Unsupported field value: ${valueDescription(value)}`\n    );\n  }\n}\n\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input: unknown): boolean {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    !(input instanceof Array) &&\n    !(input instanceof Date) &&\n    !(input instanceof Timestamp) &&\n    !(input instanceof GeoPoint) &&\n    !(input instanceof Blob) &&\n    !(input instanceof DocumentKeyReference) &&\n    !(input instanceof SerializableFieldValue)\n  );\n}\n\nfunction validatePlainObject(\n  message: string,\n  context: ParseContext,\n  input: unknown\n): asserts input is Dict<unknown> {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nexport function fieldPathFromArgument(\n  methodName: string,\n  path: string | BaseFieldPath\n): FieldPath {\n  if (path instanceof BaseFieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or FieldPath.';\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() called with invalid data. ${message}`\n    );\n  }\n}\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName The publicly visible method name\n * @param path The dot-separated string form of a field path which will be split\n * on dots.\n */\nexport function fieldPathFromDotSeparatedString(\n  methodName: string,\n  path: string\n): FieldPath {\n  try {\n    return fromDotSeparatedString(path)._internalPath;\n  } catch (e) {\n    const message = errorMessage(e);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${methodName}() called with invalid data. ${message}`\n    );\n  }\n}\n\n/**\n * Extracts the message from a caught exception, which should be an Error object\n * though JS doesn't guarantee that.\n */\nfunction errorMessage(error: Error | object): string {\n  return error instanceof Error ? error.message : error.toString();\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction fieldMaskContains(haystack: FieldPath[], needle: FieldPath): boolean {\n  return haystack.some(v => v.isEqual(needle));\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isAuthenticated(): boolean {\n    return this.uid != null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n\n  isEqual(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { logDebug } from '../util/log';\n\n// TODO(mikelehen): This should be split into multiple files and probably\n// moved to an auth/ folder to match other platforms.\n\nexport interface FirstPartyCredentialsSettings {\n  type: 'gapi';\n  client: unknown;\n  sessionIndex: string;\n}\n\nexport interface ProviderCredentialsSettings {\n  type: 'provider';\n  client: CredentialsProvider;\n}\n\n/** Settings for private credentials */\nexport type CredentialsSettings =\n  | FirstPartyCredentialsSettings\n  | ProviderCredentialsSettings;\n\nexport type TokenType = 'OAuth' | 'FirstParty';\nexport interface Token {\n  /** Type of token. */\n  type: TokenType;\n\n  /**\n   * The user with which the token is associated (used for persisting user\n   * state on disk, etc.).\n   */\n  user: User;\n\n  /** Extra header values to be passed along with a request */\n  authHeaders: { [header: string]: string };\n}\n\nexport class OAuthToken implements Token {\n  type = 'OAuth' as TokenType;\n  authHeaders: { [header: string]: string };\n  constructor(value: string, public user: User) {\n    this.authHeaders = {};\n    // Set the headers using Object Literal notation to avoid minification\n    this.authHeaders['Authorization'] = `Bearer ${value}`;\n  }\n}\n\n/**\n * A Listener for credential change events. The listener should fetch a new\n * token and may need to invalidate other state if the current user has also\n * changed.\n */\nexport type CredentialChangeListener = (user: User) => void;\n\n/**\n * Provides methods for getting the uid and token for the current user and\n * listening for changes.\n */\nexport interface CredentialsProvider {\n  /** Requests a token for the current user. */\n  getToken(): Promise<Token | null>;\n\n  /**\n   * Marks the last retrieved token as invalid, making the next GetToken request\n   * force-refresh the token.\n   */\n  invalidateToken(): void;\n\n  /**\n   * Specifies a listener to be notified of credential changes\n   * (sign-in / sign-out, token changes). It is immediately called once with the\n   * initial user.\n   */\n  setChangeListener(changeListener: CredentialChangeListener): void;\n\n  /** Removes the previously-set change listener. */\n  removeChangeListener(): void;\n}\n\n/** A CredentialsProvider that always yields an empty token. */\nexport class EmptyCredentialsProvider implements CredentialsProvider {\n  /**\n   * Stores the listener registered with setChangeListener()\n   * This isn't actually necessary since the UID never changes, but we use this\n   * to verify the listen contract is adhered to in tests.\n   */\n  private changeListener: CredentialChangeListener | null = null;\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve<Token | null>(null);\n  }\n\n  invalidateToken(): void {}\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    changeListener(User.UNAUTHENTICATED);\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() when no listener registered'\n    );\n    this.changeListener = null;\n  }\n}\n\nexport class FirebaseCredentialsProvider implements CredentialsProvider {\n  /**\n   * The auth token listener registered with FirebaseApp, retained here so we\n   * can unregister it.\n   */\n  private tokenListener: ((token: string | null) => void) | null = null;\n\n  /** Tracks the current User. */\n  private currentUser: User = User.UNAUTHENTICATED;\n  private receivedInitialUser: boolean = false;\n\n  /**\n   * Counter used to detect if the token changed while a getToken request was\n   * outstanding.\n   */\n  private tokenCounter = 0;\n\n  /** The listener registered with setChangeListener(). */\n  private changeListener: CredentialChangeListener | null = null;\n\n  private forceRefresh = false;\n\n  private auth: FirebaseAuthInternal | null;\n\n  constructor(authProvider: Provider<FirebaseAuthInternalName>) {\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      this.receivedInitialUser = true;\n      if (this.changeListener) {\n        this.changeListener(this.currentUser);\n      }\n    };\n\n    this.tokenCounter = 0;\n\n    this.auth = authProvider.getImmediate({ optional: true });\n\n    if (this.auth) {\n      this.auth.addAuthTokenListener(this.tokenListener!);\n    } else {\n      // if auth is not available, invoke tokenListener once with null token\n      this.tokenListener(null);\n      authProvider.get().then(\n        auth => {\n          this.auth = auth;\n          if (this.tokenListener) {\n            // tokenListener can be removed by removeChangeListener()\n            this.auth.addAuthTokenListener(this.tokenListener);\n          }\n        },\n        () => {\n          /* this.authProvider.get() never rejects */\n        }\n      );\n    }\n  }\n\n  getToken(): Promise<Token | null> {\n    debugAssert(\n      this.tokenListener != null,\n      'getToken cannot be called after listener removed.'\n    );\n\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        logDebug(\n          'FirebaseCredentialsProvider',\n          'getToken aborted due to token change.'\n        );\n        return this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(\n            typeof tokenData.accessToken === 'string',\n            'Invalid tokenData returned from getToken():' + tokenData\n          );\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n\n  invalidateToken(): void {\n    this.forceRefresh = true;\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    debugAssert(\n      !this.changeListener,\n      'Can only call setChangeListener() once.'\n    );\n    this.changeListener = changeListener;\n\n    // Fire the initial event\n    if (this.receivedInitialUser) {\n      changeListener(this.currentUser);\n    }\n  }\n\n  removeChangeListener(): void {\n    debugAssert(\n      this.tokenListener != null,\n      'removeChangeListener() called twice'\n    );\n    debugAssert(\n      this.changeListener !== null,\n      'removeChangeListener() called when no listener registered'\n    );\n\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener!);\n    }\n    this.tokenListener = null;\n    this.changeListener = null;\n  }\n\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  private getUser(): User {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(\n      currentUid === null || typeof currentUid === 'string',\n      'Received invalid UID: ' + currentUid\n    );\n    return new User(currentUid);\n  }\n}\n\n// Manual type definition for the subset of Gapi we use.\ninterface Gapi {\n  auth: {\n    getAuthHeaderValueForFirstParty: (\n      userIdentifiers: Array<{ [key: string]: string }>\n    ) => string | null;\n  };\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nexport class FirstPartyToken implements Token {\n  type = 'FirstParty' as TokenType;\n  user = User.FIRST_PARTY;\n\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  get authHeaders(): { [header: string]: string } {\n    const headers: { [header: string]: string } = {\n      'X-Goog-AuthUser': this.sessionIndex\n    };\n    const authHeader = this.gapi.auth.getAuthHeaderValueForFirstParty([]);\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    return headers;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nexport class FirstPartyCredentialsProvider implements CredentialsProvider {\n  constructor(private gapi: Gapi, private sessionIndex: string) {}\n\n  getToken(): Promise<Token | null> {\n    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));\n  }\n\n  setChangeListener(changeListener: CredentialChangeListener): void {\n    // Fire with initial uid.\n    changeListener(User.FIRST_PARTY);\n  }\n\n  removeChangeListener(): void {}\n\n  invalidateToken(): void {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nexport function makeCredentialsProvider(\n  credentials?: CredentialsSettings\n): CredentialsProvider {\n  if (!credentials) {\n    return new EmptyCredentialsProvider();\n  }\n\n  switch (credentials.type) {\n    case 'gapi':\n      const client = credentials.client as Gapi;\n      // Make sure this really is a Gapi client.\n      hardAssert(\n        !!(\n          typeof client === 'object' &&\n          client !== null &&\n          client['auth'] &&\n          client['auth']['getAuthHeaderValueForFirstParty']\n        ),\n        'unexpected gapi interface'\n      );\n      return new FirstPartyCredentialsProvider(\n        client,\n        credentials.sessionIndex || '0'\n      );\n\n    case 'provider':\n      return credentials.client;\n\n    default:\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'makeCredentialsProvider failed due to invalid credential type'\n      );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider, Token } from '../api/credentials';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetId } from '../core/types';\nimport { TargetData } from '../local/target_data';\nimport { Mutation, MutationResult } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug, logError } from '../util/log';\n\nimport { isNullOrUndefined } from '../util/types';\nimport { ExponentialBackoff } from './backoff';\nimport { Connection, Stream } from './connection';\nimport {\n  fromBytes,\n  fromVersion,\n  fromWatchChange,\n  fromWriteResults,\n  getEncodedDatabaseId,\n  JsonProtoSerializer,\n  toBytes,\n  toListenRequestLabels,\n  toMutation,\n  toTarget,\n  versionFromListenResponse\n} from './serializer';\nimport { WatchChange } from './watch_change';\nimport { ByteString } from '../util/byte_string';\n\nconst LOG_TAG = 'PersistentStream';\n\n// The generated proto interfaces for these class are missing the database\n// field. So we add it here.\n// TODO(b/36015800): Remove this once the api generator is fixed.\ninterface ListenRequest extends api.ListenRequest {\n  database?: string;\n}\nexport interface WriteRequest extends api.WriteRequest {\n  database?: string;\n}\n/**\n * PersistentStream can be in one of 5 states (each described in detail below)\n * based on the following state transition diagram:\n *\n *          start() called             auth & connection succeeded\n * INITIAL ----------------> STARTING -----------------------------> OPEN\n *                             ^  |                                   |\n *                             |  |                    error occurred |\n *                             |  \\-----------------------------v-----/\n *                             |                                |\n *                    backoff  |                                |\n *                    elapsed  |              start() called    |\n *                             \\--- BACKOFF <---------------- ERROR\n *\n * [any state] --------------------------> INITIAL\n *               stop() called or\n *               idle timer expired\n */\nconst enum PersistentStreamState {\n  /**\n   * The streaming RPC is not yet running and there's no error condition.\n   * Calling start() will start the stream immediately without backoff.\n   * While in this state isStarted() will return false.\n   */\n  Initial,\n\n  /**\n   * The stream is starting, either waiting for an auth token or for the stream\n   * to successfully open. While in this state, isStarted() will return true but\n   * isOpen() will return false.\n   */\n  Starting,\n\n  /**\n   * The streaming RPC is up and running. Requests and responses can flow\n   * freely. Both isStarted() and isOpen() will return true.\n   */\n  Open,\n\n  /**\n   * The stream encountered an error. The next start attempt will back off.\n   * While in this state isStarted() will return false.\n   */\n  Error,\n\n  /**\n   * An in-between state after an error where the stream is waiting before\n   * re-starting. After waiting is complete, the stream will try to open.\n   * While in this state isStarted() will return true but isOpen() will return\n   * false.\n   */\n  Backoff\n}\n\n/**\n * Provides a common interface that is shared by the listeners for stream\n * events by the concrete implementation classes.\n */\nexport interface PersistentStreamListener {\n  /**\n   * Called after the stream was established and can accept outgoing\n   * messages\n   */\n  onOpen: () => Promise<void>;\n  /**\n   * Called after the stream has closed. If there was an error, the\n   * FirestoreError will be set.\n   */\n  onClose: (err?: FirestoreError) => Promise<void>;\n}\n\n/** The time a stream stays open after it is marked idle. */\nconst IDLE_TIMEOUT_MS = 60 * 1000;\n\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *   - Closing idle streams after 60 seconds of inactivity\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be start()ed before messages can\n * be sent and received. The PersistentStream will call the onOpen() function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a start() fail, PersistentStream will call the registered onClose()\n * listener with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nexport abstract class PersistentStream<\n  SendType,\n  ReceiveType,\n  ListenerType extends PersistentStreamListener\n> {\n  private state = PersistentStreamState.Initial;\n  /**\n   * A close count that's incremented every time the stream is closed; used by\n   * getCloseGuardedDispatcher() to invalidate callbacks that happen after\n   * close.\n   */\n  private closeCount = 0;\n\n  private idleTimer: DelayedOperation<void> | null = null;\n  private stream: Stream<SendType, ReceiveType> | null = null;\n\n  protected backoff: ExponentialBackoff;\n\n  constructor(\n    private queue: AsyncQueue,\n    connectionTimerId: TimerId,\n    private idleTimerId: TimerId,\n    protected connection: Connection,\n    private credentialsProvider: CredentialsProvider,\n    protected listener: ListenerType\n  ) {\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n\n  /**\n   * Returns true if start() has been called and no error has occurred. True\n   * indicates the stream is open or in the process of opening (which\n   * encompasses respecting backoff, getting auth tokens, and starting the\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\n   * outbound requests.\n   */\n  isStarted(): boolean {\n    return (\n      this.state === PersistentStreamState.Starting ||\n      this.state === PersistentStreamState.Open ||\n      this.state === PersistentStreamState.Backoff\n    );\n  }\n\n  /**\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\n   * called) and the stream is ready for outbound requests.\n   */\n  isOpen(): boolean {\n    return this.state === PersistentStreamState.Open;\n  }\n\n  /**\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\n   * ready for outbound requests, at which point isOpen() will return true.\n   *\n   * When start returns, isStarted() will return true.\n   */\n  start(): void {\n    if (this.state === PersistentStreamState.Error) {\n      this.performBackoff();\n      return;\n    }\n\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Already started'\n    );\n    this.auth();\n  }\n\n  /**\n   * Stops the RPC. This call is idempotent and allowed regardless of the\n   * current isStarted() state.\n   *\n   * When stop returns, isStarted() and isOpen() will both return false.\n   */\n  async stop(): Promise<void> {\n    if (this.isStarted()) {\n      await this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /**\n   * After an error the stream will usually back off on the next attempt to\n   * start it. If the error warrants an immediate restart of the stream, the\n   * sender can use this to indicate that the receiver should not back off.\n   *\n   * Each error will call the onClose() listener. That function can decide to\n   * inhibit backoff if required.\n   */\n  inhibitBackoff(): void {\n    debugAssert(\n      !this.isStarted(),\n      'Can only inhibit backoff in a stopped state'\n    );\n\n    this.state = PersistentStreamState.Initial;\n    this.backoff.reset();\n  }\n\n  /**\n   * Marks this stream as idle. If no further actions are performed on the\n   * stream for one minute, the stream will automatically close itself and\n   * notify the stream's onClose() handler with Status.OK. The stream will then\n   * be in a !isStarted() state, requiring the caller to start the stream again\n   * before further use.\n   *\n   * Only streams that are in state 'Open' can be marked idle, as all other\n   * states imply pending network operations.\n   */\n  markIdle(): void {\n    // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(\n        this.idleTimerId,\n        IDLE_TIMEOUT_MS,\n        () => this.handleIdleCloseTimer()\n      );\n    }\n  }\n\n  /** Sends a message to the underlying stream. */\n  protected sendRequest(msg: SendType): void {\n    this.cancelIdleCheck();\n    this.stream!.send(msg);\n  }\n\n  /** Called by the idle timer when the stream should close due to inactivity. */\n  private async handleIdleCloseTimer(): Promise<void> {\n    if (this.isOpen()) {\n      // When timing out an idle stream there's no reason to force the stream into backoff when\n      // it restarts so set the stream state to Initial instead of Error.\n      return this.close(PersistentStreamState.Initial);\n    }\n  }\n\n  /** Marks the stream as active again. */\n  private cancelIdleCheck(): void {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  }\n\n  /**\n   * Closes the stream and cleans up as necessary:\n   *\n   * * closes the underlying GRPC stream;\n   * * calls the onClose handler with the given 'error';\n   * * sets internal stream state to 'finalState';\n   * * adjusts the backoff timer based on the error\n   *\n   * A new stream can be opened by calling start().\n   *\n   * @param finalState the intended state of the stream after closing.\n   * @param error the error the connection was closed with.\n   */\n  private async close(\n    finalState: PersistentStreamState,\n    error?: FirestoreError\n  ): Promise<void> {\n    debugAssert(this.isStarted(), 'Only started streams should be closed.');\n    debugAssert(\n      finalState === PersistentStreamState.Error || isNullOrUndefined(error),\n      \"Can't provide an error when not in an error state.\"\n    );\n\n    // Cancel any outstanding timers (they're guaranteed not to execute).\n    this.cancelIdleCheck();\n    this.backoff.cancel();\n\n    // Invalidates any stream-related callbacks (e.g. from auth or the\n    // underlying stream), guaranteeing they won't execute.\n    this.closeCount++;\n\n    if (finalState !== PersistentStreamState.Error) {\n      // If this is an intentional close ensure we don't delay our next connection attempt.\n      this.backoff.reset();\n    } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n      logError(error.toString());\n      logError(\n        'Using maximum backoff delay to prevent overloading the backend.'\n      );\n      this.backoff.resetToMax();\n    } else if (error && error.code === Code.UNAUTHENTICATED) {\n      // \"unauthenticated\" error means the token was rejected. Try force refreshing it in case it\n      // just expired.\n      this.credentialsProvider.invalidateToken();\n    }\n\n    // Clean up the underlying stream because we are no longer interested in events.\n    if (this.stream !== null) {\n      this.tearDown();\n      this.stream.close();\n      this.stream = null;\n    }\n\n    // This state must be assigned before calling onClose() to allow the callback to\n    // inhibit backoff or otherwise manipulate the state in its non-started state.\n    this.state = finalState;\n\n    // Notify the listener that the stream closed.\n    await this.listener.onClose(error);\n  }\n\n  /**\n   * Can be overridden to perform additional cleanup before the stream is closed.\n   * Calling super.tearDown() is not required.\n   */\n  protected tearDown(): void {}\n\n  /**\n   * Used by subclasses to start the concrete RPC and return the underlying\n   * connection stream.\n   */\n  protected abstract startRpc(\n    token: Token | null\n  ): Stream<SendType, ReceiveType>;\n\n  /**\n   * Called after the stream has received a message. The function will be\n   * called on the right queue and must return a Promise.\n   * @param message The message received from the stream.\n   */\n  protected abstract onMessage(message: ReceiveType): Promise<void>;\n\n  private auth(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Initial,\n      'Must be in initial state to auth'\n    );\n\n    this.state = PersistentStreamState.Starting;\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n    const closeCount = this.closeCount;\n\n    this.credentialsProvider.getToken().then(\n      token => {\n        // Stream can be stopped while waiting for authentication.\n        // TODO(mikelehen): We really should just use dispatchIfNotClosed\n        // and let this dispatch onto the queue, but that opened a spec test can\n        // of worms that I don't want to deal with in this PR.\n        if (this.closeCount === closeCount) {\n          // Normally we'd have to schedule the callback on the AsyncQueue.\n          // However, the following calls are safe to be called outside the\n          // AsyncQueue since they don't chain asynchronous calls\n          this.startStream(token);\n        }\n      },\n      (error: Error) => {\n        dispatchIfNotClosed(() => {\n          const rpcError = new FirestoreError(\n            Code.UNKNOWN,\n            'Fetching auth token failed: ' + error.message\n          );\n          return this.handleStreamClose(rpcError);\n        });\n      }\n    );\n  }\n\n  private startStream(token: Token | null): void {\n    debugAssert(\n      this.state === PersistentStreamState.Starting,\n      'Trying to start stream in a non-starting state'\n    );\n\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n\n    this.stream = this.startRpc(token);\n    this.stream.onOpen(() => {\n      dispatchIfNotClosed(() => {\n        debugAssert(\n          this.state === PersistentStreamState.Starting,\n          'Expected stream to be in state Starting, but was ' + this.state\n        );\n        this.state = PersistentStreamState.Open;\n        return this.listener!.onOpen();\n      });\n    });\n    this.stream.onClose((error?: FirestoreError) => {\n      dispatchIfNotClosed(() => {\n        return this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage((msg: ReceiveType) => {\n      dispatchIfNotClosed(() => {\n        return this.onMessage(msg);\n      });\n    });\n  }\n\n  private performBackoff(): void {\n    debugAssert(\n      this.state === PersistentStreamState.Error,\n      'Should only perform backoff when in Error state'\n    );\n    this.state = PersistentStreamState.Backoff;\n\n    this.backoff.backoffAndRun(async () => {\n      debugAssert(\n        this.state === PersistentStreamState.Backoff,\n        'Backoff elapsed but state is now: ' + this.state\n      );\n\n      this.state = PersistentStreamState.Initial;\n      this.start();\n      debugAssert(this.isStarted(), 'PersistentStream should have started');\n    });\n  }\n\n  // Visible for tests\n  handleStreamClose(error?: FirestoreError): Promise<void> {\n    debugAssert(\n      this.isStarted(),\n      \"Can't handle server close on non-started stream\"\n    );\n    logDebug(LOG_TAG, `close with error: ${error}`);\n\n    this.stream = null;\n\n    // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n    return this.close(PersistentStreamState.Error, error);\n  }\n\n  /**\n   * Returns a \"dispatcher\" function that dispatches operations onto the\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\n   * re-opened, etc.\n   */\n  private getCloseGuardedDispatcher(\n    startCloseCount: number\n  ): (fn: () => Promise<void>) => void {\n    return (fn: () => Promise<void>): void => {\n      this.queue.enqueueAndForget(() => {\n        if (this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(\n            LOG_TAG,\n            'stream callback skipped by getCloseGuardedDispatcher.'\n          );\n          return Promise.resolve();\n        }\n      });\n    };\n  }\n}\n\n/** Listener for the PersistentWatchStream */\nexport interface WatchStreamListener extends PersistentStreamListener {\n  /**\n   * Called on a watchChange. The snapshot parameter will be MIN if the watch\n   * change did not have a snapshot associated with it.\n   */\n  onWatchChange: (\n    watchChange: WatchChange,\n    snapshot: SnapshotVersion\n  ) => Promise<void>;\n}\n\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the onOpen() listener, any number of\n * listen() and unlisten() calls can be made to control what changes will be\n * sent from the server for ListenResponses.\n */\nexport class PersistentListenStream extends PersistentStream<\n  api.ListenRequest,\n  api.ListenResponse,\n  WatchStreamListener\n> {\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WatchStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.ListenStreamConnectionBackoff,\n      TimerId.ListenStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.ListenRequest, api.ListenResponse> {\n    return this.connection.openStream<api.ListenRequest, api.ListenResponse>(\n      'Listen',\n      token\n    );\n  }\n\n  protected onMessage(watchChangeProto: api.ListenResponse): Promise<void> {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n\n    const watchChange = fromWatchChange(this.serializer, watchChangeProto);\n    const snapshot = versionFromListenResponse(watchChangeProto);\n    return this.listener!.onWatchChange(watchChange, snapshot);\n  }\n\n  /**\n   * Registers interest in the results of the given target. If the target\n   * includes a resumeToken it will be included in the request. Results that\n   * affect the target will be streamed back as WatchChange messages that\n   * reference the targetId.\n   */\n  watch(targetData: TargetData): void {\n    const request: ListenRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.addTarget = toTarget(this.serializer, targetData);\n\n    const labels = toListenRequestLabels(this.serializer, targetData);\n    if (labels) {\n      request.labels = labels;\n    }\n\n    this.sendRequest(request);\n  }\n\n  /**\n   * Unregisters interest in the results of the target associated with the\n   * given targetId.\n   */\n  unwatch(targetId: TargetId): void {\n    const request: ListenRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  }\n}\n\n/** Listener for the PersistentWriteStream */\nexport interface WriteStreamListener extends PersistentStreamListener {\n  /**\n   * Called by the PersistentWriteStream upon a successful handshake response\n   * from the server, which is the receiver's cue to send any pending writes.\n   */\n  onHandshakeComplete: () => Promise<void>;\n\n  /**\n   * Called by the PersistentWriteStream upon receiving a StreamingWriteResponse\n   * from the server that contains a mutation result.\n   */\n  onMutationResult: (\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ) => Promise<void>;\n}\n\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nexport class PersistentWriteStream extends PersistentStream<\n  api.WriteRequest,\n  api.WriteResponse,\n  WriteStreamListener\n> {\n  private handshakeComplete_ = false;\n\n  constructor(\n    queue: AsyncQueue,\n    connection: Connection,\n    credentials: CredentialsProvider,\n    private serializer: JsonProtoSerializer,\n    listener: WriteStreamListener\n  ) {\n    super(\n      queue,\n      TimerId.WriteStreamConnectionBackoff,\n      TimerId.WriteStreamIdle,\n      connection,\n      credentials,\n      listener\n    );\n  }\n\n  /**\n   * The last received stream token from the server, used to acknowledge which\n   * responses the client has processed. Stream tokens are opaque checkpoint\n   * markers whose only real value is their inclusion in the next request.\n   *\n   * PersistentWriteStream manages propagating this value from responses to the\n   * next request.\n   */\n  private lastStreamToken: ByteString = ByteString.EMPTY_BYTE_STRING;\n\n  /**\n   * Tracks whether or not a handshake has been successfully exchanged and\n   * the stream is ready to accept mutations.\n   */\n  get handshakeComplete(): boolean {\n    return this.handshakeComplete_;\n  }\n\n  // Override of PersistentStream.start\n  start(): void {\n    this.handshakeComplete_ = false;\n    this.lastStreamToken = ByteString.EMPTY_BYTE_STRING;\n    super.start();\n  }\n\n  protected tearDown(): void {\n    if (this.handshakeComplete_) {\n      this.writeMutations([]);\n    }\n  }\n\n  protected startRpc(\n    token: Token | null\n  ): Stream<api.WriteRequest, api.WriteResponse> {\n    return this.connection.openStream<api.WriteRequest, api.WriteResponse>(\n      'Write',\n      token\n    );\n  }\n\n  protected onMessage(responseProto: api.WriteResponse): Promise<void> {\n    // Always capture the last stream token.\n    hardAssert(\n      !!responseProto.streamToken,\n      'Got a write response without a stream token'\n    );\n    this.lastStreamToken = fromBytes(\n      this.serializer,\n      responseProto.streamToken\n    );\n\n    if (!this.handshakeComplete_) {\n      // The first response is always the handshake response\n      hardAssert(\n        !responseProto.writeResults || responseProto.writeResults.length === 0,\n        'Got mutation results for handshake'\n      );\n      this.handshakeComplete_ = true;\n      return this.listener!.onHandshakeComplete();\n    } else {\n      // A successful first write response means the stream is healthy,\n      // Note, that we could consider a successful handshake healthy, however,\n      // the write itself might be causing an error we want to back off from.\n      this.backoff.reset();\n\n      const results = fromWriteResults(\n        responseProto.writeResults,\n        responseProto.commitTime\n      );\n      const commitVersion = fromVersion(responseProto.commitTime!);\n      return this.listener!.onMutationResult(commitVersion, results);\n    }\n  }\n\n  /**\n   * Sends an initial streamToken to the server, performing the handshake\n   * required to make the StreamingWrite RPC work. Subsequent\n   * calls should wait until onHandshakeComplete was called.\n   */\n  writeHandshake(): void {\n    debugAssert(this.isOpen(), 'Writing handshake requires an opened stream');\n    debugAssert(!this.handshakeComplete_, 'Handshake already completed');\n    debugAssert(\n      this.lastStreamToken.isEqual(ByteString.EMPTY_BYTE_STRING),\n      'Stream token should be empty during handshake'\n    );\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    const request: WriteRequest = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    this.sendRequest(request);\n  }\n\n  /** Sends a group of mutations to the Firestore backend to apply. */\n  writeMutations(mutations: Mutation[]): void {\n    debugAssert(this.isOpen(), 'Writing mutations requires an opened stream');\n    debugAssert(\n      this.handshakeComplete_,\n      'Handshake must be complete before writing mutations'\n    );\n    debugAssert(\n      this.lastStreamToken.approximateByteSize() > 0,\n      'Trying to write mutation without a token'\n    );\n\n    const request: WriteRequest = {\n      streamToken: toBytes(this.serializer, this.lastStreamToken),\n      writes: mutations.map(mutation => toMutation(this.serializer, mutation))\n    };\n\n    this.sendRequest(request);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport * as api from '../protos/firestore_proto_api';\nimport { debugCast, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { Connection } from './connection';\nimport {\n  fromDocument,\n  fromMaybeDocument,\n  getEncodedDatabaseId,\n  JsonProtoSerializer,\n  toMutation,\n  toName,\n  toQueryTarget\n} from './serializer';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream,\n  WatchStreamListener,\n  WriteStreamListener\n} from './persistent_stream';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Query } from '../core/query';\n\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\nexport class Datastore {\n  // Make sure that the structural type of `Datastore` is unique.\n  // See https://github.com/microsoft/TypeScript/issues/5451\n  private _ = undefined;\n}\n\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass DatastoreImpl extends Datastore {\n  terminated = false;\n\n  constructor(\n    readonly connection: Connection,\n    readonly credentials: CredentialsProvider,\n    readonly serializer: JsonProtoSerializer\n  ) {\n    super();\n  }\n\n  private verifyNotTerminated(): void {\n    if (this.terminated) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  /** Gets an auth token and invokes the provided RPC. */\n  invokeRPC<Req, Resp>(rpcName: string, request: Req): Promise<Resp> {\n    this.verifyNotTerminated();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeRPC<Req, Resp>(rpcName, request, token);\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req\n  ): Promise<Resp[]> {\n    this.verifyNotTerminated();\n    return this.credentials\n      .getToken()\n      .then(token => {\n        return this.connection.invokeStreamingRPC<Req, Resp>(\n          rpcName,\n          request,\n          token\n        );\n      })\n      .catch((error: FirestoreError) => {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.credentials.invalidateToken();\n        }\n        throw error;\n      });\n  }\n}\n\nexport function newDatastore(\n  connection: Connection,\n  credentials: CredentialsProvider,\n  serializer: JsonProtoSerializer\n): Datastore {\n  return new DatastoreImpl(connection, credentials, serializer);\n}\n\nexport async function invokeCommitRpc(\n  datastore: Datastore,\n  mutations: Mutation[]\n): Promise<void> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const params = {\n    database: getEncodedDatabaseId(datastoreImpl.serializer),\n    writes: mutations.map(m => toMutation(datastoreImpl.serializer, m))\n  };\n  await datastoreImpl.invokeRPC('Commit', params);\n}\n\nexport async function invokeBatchGetDocumentsRpc(\n  datastore: Datastore,\n  keys: DocumentKey[]\n): Promise<MaybeDocument[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const params = {\n    database: getEncodedDatabaseId(datastoreImpl.serializer),\n    documents: keys.map(k => toName(datastoreImpl.serializer, k))\n  };\n  const response = await datastoreImpl.invokeStreamingRPC<\n    api.BatchGetDocumentsRequest,\n    api.BatchGetDocumentsResponse\n  >('BatchGetDocuments', params);\n\n  const docs = new Map<string, MaybeDocument>();\n  response.forEach(proto => {\n    const doc = fromMaybeDocument(datastoreImpl.serializer, proto);\n    docs.set(doc.key.toString(), doc);\n  });\n  const result: MaybeDocument[] = [];\n  keys.forEach(key => {\n    const doc = docs.get(key.toString());\n    hardAssert(!!doc, 'Missing entity in write response for ' + key);\n    result.push(doc);\n  });\n  return result;\n}\n\nexport async function invokeRunQueryRpc(\n  datastore: Datastore,\n  query: Query\n): Promise<Document[]> {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  const { structuredQuery, parent } = toQueryTarget(\n    datastoreImpl.serializer,\n    query.toTarget()\n  );\n  const params = {\n    database: getEncodedDatabaseId(datastoreImpl.serializer),\n    parent,\n    structuredQuery\n  };\n\n  const response = await datastoreImpl.invokeStreamingRPC<\n    api.RunQueryRequest,\n    api.RunQueryResponse\n  >('RunQuery', params);\n\n  return (\n    response\n      // Omit RunQueryResponses that only contain readTimes.\n      .filter(proto => !!proto.document)\n      .map(proto =>\n        fromDocument(datastoreImpl.serializer, proto.document!, undefined)\n      )\n  );\n}\n\nexport function newPersistentWriteStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WriteStreamListener\n): PersistentWriteStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  return new PersistentWriteStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function newPersistentWatchStream(\n  datastore: Datastore,\n  queue: AsyncQueue,\n  listener: WatchStreamListener\n): PersistentListenStream {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  return new PersistentListenStream(\n    queue,\n    datastoreImpl.connection,\n    datastoreImpl.credentials,\n    datastoreImpl.serializer,\n    listener\n  );\n}\n\nexport function terminateDatastore(datastore: Datastore): void {\n  const datastoreImpl = debugCast(datastore, DatastoreImpl);\n  datastoreImpl.terminated = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ParsedSetData, ParsedUpdateData } from '../api/user_data_reader';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\n\nimport { DocumentKey } from '../model/document_key';\nimport {\n  DeleteMutation,\n  Mutation,\n  Precondition,\n  VerifyMutation\n} from '../model/mutation';\nimport {\n  Datastore,\n  invokeBatchGetDocumentsRpc,\n  invokeCommitRpc\n} from '../remote/datastore';\nimport { fail, debugAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { SnapshotVersion } from './snapshot_version';\nimport { ResourcePath } from '../model/path';\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nexport class Transaction {\n  // The version of each document that was read during this transaction.\n  private readVersions = new Map</* path */ string, SnapshotVersion>();\n  private mutations: Mutation[] = [];\n  private committed = false;\n\n  /**\n   * A deferred usage error that occurred previously in this transaction that\n   * will cause the transaction to fail once it actually commits.\n   */\n  private lastWriteError: FirestoreError | null = null;\n\n  /**\n   * Set of documents that have been written in the transaction.\n   *\n   * When there's more than one write to the same key in a transaction, any\n   * writes after the first are handled differently.\n   */\n  private writtenDocs: Set<DocumentKey> = new Set();\n\n  constructor(private datastore: Datastore) {}\n\n  async lookup(keys: DocumentKey[]): Promise<MaybeDocument[]> {\n    this.ensureCommitNotCalled();\n\n    if (this.mutations.length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Firestore transactions require all reads to be executed before all writes.'\n      );\n    }\n    const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\n    docs.forEach(doc => {\n      if (doc instanceof NoDocument || doc instanceof Document) {\n        this.recordVersion(doc);\n      } else {\n        fail('Document in a transaction was a ' + doc.constructor.name);\n      }\n    });\n    return docs;\n  }\n\n  set(key: DocumentKey, data: ParsedSetData): void {\n    this.write(data.toMutations(key, this.precondition(key)));\n    this.writtenDocs.add(key);\n  }\n\n  update(key: DocumentKey, data: ParsedUpdateData): void {\n    try {\n      this.write(data.toMutations(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e;\n    }\n    this.writtenDocs.add(key);\n  }\n\n  delete(key: DocumentKey): void {\n    this.write([new DeleteMutation(key, this.precondition(key))]);\n    this.writtenDocs.add(key);\n  }\n\n  async commit(): Promise<void> {\n    this.ensureCommitNotCalled();\n\n    if (this.lastWriteError) {\n      throw this.lastWriteError;\n    }\n    const unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten.delete(mutation.key.toString());\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((_, path) => {\n      const key = new DocumentKey(ResourcePath.fromString(path));\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await invokeCommitRpc(this.datastore, this.mutations);\n    this.committed = true;\n  }\n\n  private recordVersion(doc: MaybeDocument): void {\n    let docVersion: SnapshotVersion;\n\n    if (doc instanceof Document) {\n      docVersion = doc.version;\n    } else if (doc instanceof NoDocument) {\n      // For deleted docs, we must use baseVersion 0 when we overwrite them.\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail('Document in a transaction was a ' + doc.constructor.name);\n    }\n\n    const existingVersion = this.readVersions.get(doc.key.toString());\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(\n          Code.ABORTED,\n          'Document version changed between two reads.'\n        );\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  }\n\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  private precondition(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    if (!this.writtenDocs.has(key) && version) {\n      return Precondition.updateTime(version);\n    } else {\n      return Precondition.none();\n    }\n  }\n\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  private preconditionForUpdate(key: DocumentKey): Precondition {\n    const version = this.readVersions.get(key.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't update a document that doesn't exist.\"\n        );\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n\n  private write(mutations: Mutation[]): void {\n    this.ensureCommitNotCalled();\n    this.mutations = this.mutations.concat(mutations);\n  }\n\n  private ensureCommitNotCalled(): void {\n    debugAssert(\n      !this.committed,\n      'A transaction object cannot be used after its update callback has been invoked.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnlineState } from '../core/types';\nimport { debugAssert } from '../util/assert';\nimport { AsyncQueue, DelayedOperation, TimerId } from '../util/async_queue';\nimport { FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\n\nconst LOG_TAG = 'OnlineStateTracker';\n\n// To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\nconst MAX_WATCH_STREAM_FAILURES = 1;\n\n// To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n\n/**\n * A component used by the RemoteStore to track the OnlineState (that is,\n * whether or not the client as a whole should be considered to be online or\n * offline), implementing the appropriate heuristics.\n *\n * In particular, when the client is trying to connect to the backend, we\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\n * a connection to succeed. If we have too many failures or the timeout elapses,\n * then we set the OnlineState to Offline, and the client will behave as if\n * it is offline (get()s will return cached data, etc.).\n */\nexport class OnlineStateTracker {\n  /** The current OnlineState. */\n  private state = OnlineState.Unknown;\n\n  /**\n   * A count of consecutive failures to open the stream. If it reaches the\n   * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\n   * Offline.\n   */\n  private watchStreamFailures = 0;\n\n  /**\n   * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\n   * transition from OnlineState.Unknown to OnlineState.Offline without waiting\n   * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\n   */\n  private onlineStateTimer: DelayedOperation<void> | null = null;\n\n  /**\n   * Whether the client should log a warning message if it fails to connect to\n   * the backend (initially true, cleared after a successful stream, or if we've\n   * logged the message already).\n   */\n  private shouldWarnClientIsOffline = true;\n\n  constructor(\n    private asyncQueue: AsyncQueue,\n    private onlineStateHandler: (onlineState: OnlineState) => void\n  ) {}\n\n  /**\n   * Called by RemoteStore when a watch stream is started (including on each\n   * backoff attempt).\n   *\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\n   * the onlineStateTimer.\n   */\n  handleWatchStreamStart(): void {\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      debugAssert(\n        this.onlineStateTimer === null,\n        `onlineStateTimer shouldn't be started yet`\n      );\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\n        TimerId.OnlineStateTimeout,\n        ONLINE_STATE_TIMEOUT_MS,\n        () => {\n          this.onlineStateTimer = null;\n          debugAssert(\n            this.state === OnlineState.Unknown,\n            'Timer should be canceled if we transitioned to a different state.'\n          );\n          this.logClientOfflineWarningIfNecessary(\n            `Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` +\n              `seconds.`\n          );\n          this.setAndBroadcast(OnlineState.Offline);\n\n          // NOTE: handleWatchStreamFailure() will continue to increment\n          // watchStreamFailures even though we are already marked Offline,\n          // but this is non-harmful.\n\n          return Promise.resolve();\n        }\n      );\n    }\n  }\n\n  /**\n   * Updates our OnlineState as appropriate after the watch stream reports a\n   * failure. The first failure moves us to the 'Unknown' state. We then may\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\n   * actually transition to the 'Offline' state.\n   */\n  handleWatchStreamFailure(error: FirestoreError): void {\n    if (this.state === OnlineState.Online) {\n      this.setAndBroadcast(OnlineState.Unknown);\n\n      // To get to OnlineState.Online, set() must have been called which would\n      // have reset our heuristics.\n      debugAssert(\n        this.watchStreamFailures === 0,\n        'watchStreamFailures must be 0'\n      );\n      debugAssert(\n        this.onlineStateTimer === null,\n        'onlineStateTimer must be null'\n      );\n    } else {\n      this.watchStreamFailures++;\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n\n        this.logClientOfflineWarningIfNecessary(\n          `Connection failed ${MAX_WATCH_STREAM_FAILURES} ` +\n            `times. Most recent error: ${error.toString()}`\n        );\n\n        this.setAndBroadcast(OnlineState.Offline);\n      }\n    }\n  }\n\n  /**\n   * Explicitly sets the OnlineState to the specified state.\n   *\n   * Note that this resets our timers / failure counters, etc. used by our\n   * Offline heuristics, so must not be used in place of\n   * handleWatchStreamStart() and handleWatchStreamFailure().\n   */\n  set(newState: OnlineState): void {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n\n    if (newState === OnlineState.Online) {\n      // We've connected to watch at least once. Don't warn the developer\n      // about being offline going forward.\n      this.shouldWarnClientIsOffline = false;\n    }\n\n    this.setAndBroadcast(newState);\n  }\n\n  private setAndBroadcast(newState: OnlineState): void {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  }\n\n  private logClientOfflineWarningIfNecessary(details: string): void {\n    const message =\n      `Could not reach Cloud Firestore backend. ${details}\\n` +\n      `This typically indicates that your device does not have a healthy ` +\n      `Internet connection at the moment. The client will operate in offline ` +\n      `mode until it is able to successfully connect to the backend.`;\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG, message);\n    }\n  }\n\n  private clearOnlineStateTimer(): void {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { Transaction } from '../core/transaction';\nimport { OnlineState, TargetId } from '../core/types';\nimport { LocalStore } from '../local/local_store';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport { MutationResult } from '../model/mutation';\nimport {\n  BATCHID_UNKNOWN,\n  MutationBatch,\n  MutationBatchResult\n} from '../model/mutation_batch';\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { DocumentKeySet } from '../model/collections';\nimport { AsyncQueue } from '../util/async_queue';\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\nimport {\n  Datastore,\n  newPersistentWatchStream,\n  newPersistentWriteStream\n} from './datastore';\nimport { OnlineStateTracker } from './online_state_tracker';\nimport {\n  PersistentListenStream,\n  PersistentWriteStream\n} from './persistent_stream';\nimport { RemoteSyncer } from './remote_syncer';\nimport { isPermanentWriteError } from './rpc_error';\nimport {\n  DocumentWatchChange,\n  ExistenceFilterChange,\n  TargetMetadataProvider,\n  WatchChange,\n  WatchChangeAggregator,\n  WatchTargetChange,\n  WatchTargetChangeState\n} from './watch_change';\nimport { ByteString } from '../util/byte_string';\nimport { isIndexedDbTransactionError } from '../local/simple_db';\nimport { User } from '../auth/user';\n\nconst LOG_TAG = 'RemoteStore';\n\n// TODO(b/35853402): Negotiate this with the stream.\nconst MAX_PENDING_WRITES = 10;\n\n/** Reasons for why the RemoteStore may be offline. */\nconst enum OfflineCause {\n  /** The user has explicitly disabled the network (via `disableNetwork()`). */\n  UserDisabled,\n  /** An IndexedDb failure occurred while persisting a stream update. */\n  IndexedDbFailed,\n  /** The tab is not the primary tab (only relevant with multi-tab). */\n  IsSecondary,\n  /** We are restarting the streams due to an Auth credential change. */\n  CredentialChange,\n  /** The connectivity state of the environment has changed. */\n  ConnectivityChange,\n  /** The RemoteStore has been shut down. */\n  Shutdown\n}\n\n/**\n * RemoteStore - An interface to remotely stored data, basically providing a\n * wrapper around the Datastore that is more reliable for the rest of the\n * system.\n *\n * RemoteStore is responsible for maintaining the connection to the server.\n * - maintaining a list of active listens.\n * - reconnecting when the connection is dropped.\n * - resuming all the active listens on reconnect.\n *\n * RemoteStore handles all incoming events from the Datastore.\n * - listening to the watch stream and repackaging the events as RemoteEvents\n * - notifying SyncEngine of any changes to the active listens.\n *\n * RemoteStore takes writes from other components and handles them reliably.\n * - pulling pending mutations from LocalStore and sending them to Datastore.\n * - retrying mutations that failed because of network problems.\n * - acking mutations to the SyncEngine once they are accepted or rejected.\n */\nexport class RemoteStore implements TargetMetadataProvider {\n  /**\n   * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\n   * LocalStore via fillWritePipeline() and have or will send to the write\n   * stream.\n   *\n   * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\n   * restart the write stream. When the stream is established the writes in the\n   * pipeline will be sent in order.\n   *\n   * Writes remain in writePipeline until they are acknowledged by the backend\n   * and thus will automatically be re-sent if the stream is interrupted /\n   * restarted before they're acknowledged.\n   *\n   * Write responses from the backend are linked to their originating request\n   * purely based on order, and so we can just shift() writes from the front of\n   * the writePipeline as we receive responses.\n   */\n  private writePipeline: MutationBatch[] = [];\n\n  /**\n   * A mapping of watched targets that the client cares about tracking and the\n   * user has explicitly called a 'listen' for this target.\n   *\n   * These targets may or may not have been sent to or acknowledged by the\n   * server. On re-establishing the listen stream, these targets should be sent\n   * to the server. The targets removed with unlistens are removed eagerly\n   * without waiting for confirmation from the listen stream.\n   */\n  private listenTargets = new Map<TargetId, TargetData>();\n\n  private connectivityMonitor: ConnectivityMonitor;\n  private watchStream: PersistentListenStream;\n  private writeStream: PersistentWriteStream;\n  private watchChangeAggregator: WatchChangeAggregator | null = null;\n\n  /**\n   * A set of reasons for why the RemoteStore may be offline. If empty, the\n   * RemoteStore may start its network connections.\n   */\n  private offlineCauses = new Set<OfflineCause>();\n\n  private onlineStateTracker: OnlineStateTracker;\n\n  constructor(\n    /**\n     * The local store, used to fill the write pipeline with outbound mutations.\n     */\n    private localStore: LocalStore,\n    /** The client-side proxy for interacting with the backend. */\n    private datastore: Datastore,\n    private asyncQueue: AsyncQueue,\n    onlineStateHandler: (onlineState: OnlineState) => void,\n    connectivityMonitor: ConnectivityMonitor\n  ) {\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback((status: NetworkStatus) => {\n      asyncQueue.enqueueAndForget(async () => {\n        if (this.canUseNetwork()) {\n          logDebug(\n            LOG_TAG,\n            'Restarting streams for network reachability change.'\n          );\n          await this.restartNetwork();\n        }\n      });\n    });\n\n    this.onlineStateTracker = new OnlineStateTracker(\n      asyncQueue,\n      onlineStateHandler\n    );\n\n    // Create streams (but note they're not started yet).\n    this.watchStream = newPersistentWatchStream(this.datastore, asyncQueue, {\n      onOpen: this.onWatchStreamOpen.bind(this),\n      onClose: this.onWatchStreamClose.bind(this),\n      onWatchChange: this.onWatchStreamChange.bind(this)\n    });\n\n    this.writeStream = newPersistentWriteStream(this.datastore, asyncQueue, {\n      onOpen: this.onWriteStreamOpen.bind(this),\n      onClose: this.onWriteStreamClose.bind(this),\n      onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),\n      onMutationResult: this.onMutationResult.bind(this)\n    });\n  }\n\n  /**\n   * SyncEngine to notify of watch and write events. This must be set\n   * immediately after construction.\n   */\n  syncEngine!: RemoteSyncer;\n\n  /**\n   * Starts up the remote store, creating streams, restoring state from\n   * LocalStore, etc.\n   */\n  start(): Promise<void> {\n    return this.enableNetwork();\n  }\n\n  /** Re-enables the network. Idempotent. */\n  enableNetwork(): Promise<void> {\n    this.offlineCauses.delete(OfflineCause.UserDisabled);\n    return this.enableNetworkInternal();\n  }\n\n  private async enableNetworkInternal(): Promise<void> {\n    if (this.canUseNetwork()) {\n      if (this.shouldStartWatchStream()) {\n        this.startWatchStream();\n      } else {\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n\n      // This will start the write stream if necessary.\n      await this.fillWritePipeline();\n    }\n  }\n\n  /**\n   * Temporarily disables the network. The network can be re-enabled using\n   * enableNetwork().\n   */\n  async disableNetwork(): Promise<void> {\n    this.offlineCauses.add(OfflineCause.UserDisabled);\n    await this.disableNetworkInternal();\n\n    // Set the OnlineState to Offline so get()s return from cache, etc.\n    this.onlineStateTracker.set(OnlineState.Offline);\n  }\n\n  private async disableNetworkInternal(): Promise<void> {\n    await this.writeStream.stop();\n    await this.watchStream.stop();\n\n    if (this.writePipeline.length > 0) {\n      logDebug(\n        LOG_TAG,\n        `Stopping write stream with ${this.writePipeline.length} pending writes`\n      );\n      this.writePipeline = [];\n    }\n\n    this.cleanUpWatchStreamState();\n  }\n\n  async shutdown(): Promise<void> {\n    logDebug(LOG_TAG, 'RemoteStore shutting down.');\n    this.offlineCauses.add(OfflineCause.Shutdown);\n    await this.disableNetworkInternal();\n    this.connectivityMonitor.shutdown();\n\n    // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n    // triggering spurious listener events with cached data, etc.\n    this.onlineStateTracker.set(OnlineState.Unknown);\n  }\n\n  /**\n   * Starts new listen for the given target. Uses resume token if provided. It\n   * is a no-op if the target of given `TargetData` is already being listened to.\n   */\n  listen(targetData: TargetData): void {\n    if (this.listenTargets.has(targetData.targetId)) {\n      return;\n    }\n\n    // Mark this as something the client is currently listening for.\n    this.listenTargets.set(targetData.targetId, targetData);\n\n    if (this.shouldStartWatchStream()) {\n      // The listen will be sent in onWatchStreamOpen\n      this.startWatchStream();\n    } else if (this.watchStream.isOpen()) {\n      this.sendWatchRequest(targetData);\n    }\n  }\n\n  /**\n   * Removes the listen from server. It is a no-op if the given target id is\n   * not being listened to.\n   */\n  unlisten(targetId: TargetId): void {\n    debugAssert(\n      this.listenTargets.has(targetId),\n      `unlisten called on target no currently watched: ${targetId}`\n    );\n\n    this.listenTargets.delete(targetId);\n    if (this.watchStream.isOpen()) {\n      this.sendUnwatchRequest(targetId);\n    }\n\n    if (this.listenTargets.size === 0) {\n      if (this.watchStream.isOpen()) {\n        this.watchStream.markIdle();\n      } else if (this.canUseNetwork()) {\n        // Revert to OnlineState.Unknown if the watch stream is not open and we\n        // have no listeners, since without any listens to send we cannot\n        // confirm if the stream is healthy and upgrade to OnlineState.Online.\n        this.onlineStateTracker.set(OnlineState.Unknown);\n      }\n    }\n  }\n\n  /** {@link TargetMetadataProvider.getTargetDataForTarget} */\n  getTargetDataForTarget(targetId: TargetId): TargetData | null {\n    return this.listenTargets.get(targetId) || null;\n  }\n\n  /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    return this.syncEngine.getRemoteKeysForTarget(targetId);\n  }\n\n  /**\n   * We need to increment the the expected number of pending responses we're due\n   * from watch so we wait for the ack to process any messages from this target.\n   */\n  private sendWatchRequest(targetData: TargetData): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetData.targetId);\n    this.watchStream.watch(targetData);\n  }\n\n  /**\n   * We need to increment the expected number of pending responses we're due\n   * from watch so we wait for the removal on the server before we process any\n   * messages from this target.\n   */\n  private sendUnwatchRequest(targetId: TargetId): void {\n    this.watchChangeAggregator!.recordPendingTargetRequest(targetId);\n    this.watchStream.unwatch(targetId);\n  }\n\n  private startWatchStream(): void {\n    debugAssert(\n      this.shouldStartWatchStream(),\n      'startWatchStream() called when shouldStartWatchStream() is false.'\n    );\n\n    this.watchChangeAggregator = new WatchChangeAggregator(this);\n    this.watchStream.start();\n    this.onlineStateTracker.handleWatchStreamStart();\n  }\n\n  /**\n   * Returns whether the watch stream should be started because it's necessary\n   * and has not yet been started.\n   */\n  private shouldStartWatchStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.watchStream.isStarted() &&\n      this.listenTargets.size > 0\n    );\n  }\n\n  canUseNetwork(): boolean {\n    return this.offlineCauses.size === 0;\n  }\n\n  private cleanUpWatchStreamState(): void {\n    this.watchChangeAggregator = null;\n  }\n\n  private async onWatchStreamOpen(): Promise<void> {\n    this.listenTargets.forEach((targetData, targetId) => {\n      this.sendWatchRequest(targetData);\n    });\n  }\n\n  private async onWatchStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWatchStream(),\n        'Watch stream was stopped gracefully while still needed.'\n      );\n    }\n\n    this.cleanUpWatchStreamState();\n\n    // If we still need the watch stream, retry the connection.\n    if (this.shouldStartWatchStream()) {\n      this.onlineStateTracker.handleWatchStreamFailure(error!);\n\n      this.startWatchStream();\n    } else {\n      // No need to restart watch stream because there are no active targets.\n      // The online state is set to unknown because there is no active attempt\n      // at establishing a connection\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n\n  private async onWatchStreamChange(\n    watchChange: WatchChange,\n    snapshotVersion: SnapshotVersion\n  ): Promise<void> {\n    // Mark the client as online since we got a message from the server\n    this.onlineStateTracker.set(OnlineState.Online);\n\n    if (\n      watchChange instanceof WatchTargetChange &&\n      watchChange.state === WatchTargetChangeState.Removed &&\n      watchChange.cause\n    ) {\n      // There was an error on a target, don't wait for a consistent snapshot\n      // to raise events\n      try {\n        await this.handleTargetError(watchChange);\n      } catch (e) {\n        logDebug(\n          LOG_TAG,\n          'Failed to remove targets %s: %s ',\n          watchChange.targetIds.join(','),\n          e\n        );\n        await this.disableNetworkUntilRecovery(e);\n      }\n      return;\n    }\n\n    if (watchChange instanceof DocumentWatchChange) {\n      this.watchChangeAggregator!.handleDocumentChange(watchChange);\n    } else if (watchChange instanceof ExistenceFilterChange) {\n      this.watchChangeAggregator!.handleExistenceFilter(watchChange);\n    } else {\n      debugAssert(\n        watchChange instanceof WatchTargetChange,\n        'Expected watchChange to be an instance of WatchTargetChange'\n      );\n      this.watchChangeAggregator!.handleTargetChange(watchChange);\n    }\n\n    if (!snapshotVersion.isEqual(SnapshotVersion.min())) {\n      try {\n        const lastRemoteSnapshotVersion = await this.localStore.getLastRemoteSnapshotVersion();\n        if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\n          // We have received a target change with a global snapshot if the snapshot\n          // version is not equal to SnapshotVersion.min().\n          await this.raiseWatchSnapshot(snapshotVersion);\n        }\n      } catch (e) {\n        logDebug(LOG_TAG, 'Failed to raise snapshot:', e);\n        await this.disableNetworkUntilRecovery(e);\n      }\n    }\n  }\n\n  /**\n   * Recovery logic for IndexedDB errors that takes the network offline until\n   * `op` succeeds. Retries are scheduled with backoff using\n   * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\n   * validated via a generic operation.\n   *\n   * The returned Promise is resolved once the network is disabled and before\n   * any retry attempt.\n   */\n  private async disableNetworkUntilRecovery(\n    e: FirestoreError,\n    op?: () => Promise<unknown>\n  ): Promise<void> {\n    if (isIndexedDbTransactionError(e)) {\n      debugAssert(\n        !this.offlineCauses.has(OfflineCause.IndexedDbFailed),\n        'Unexpected network event when IndexedDB was marked failed.'\n      );\n      this.offlineCauses.add(OfflineCause.IndexedDbFailed);\n\n      // Disable network and raise offline snapshots\n      await this.disableNetworkInternal();\n      this.onlineStateTracker.set(OnlineState.Offline);\n\n      if (!op) {\n        // Use a simple read operation to determine if IndexedDB recovered.\n        // Ideally, we would expose a health check directly on SimpleDb, but\n        // RemoteStore only has access to persistence through LocalStore.\n        op = () => this.localStore.getLastRemoteSnapshotVersion();\n      }\n\n      // Probe IndexedDB periodically and re-enable network\n      this.asyncQueue.enqueueRetryable(async () => {\n        logDebug(LOG_TAG, 'Retrying IndexedDB access');\n        await op!();\n        this.offlineCauses.delete(OfflineCause.IndexedDbFailed);\n        await this.enableNetworkInternal();\n      });\n    } else {\n      throw e;\n    }\n  }\n\n  /**\n   * Executes `op`. If `op` fails, takes the network offline until `op`\n   * succeeds. Returns after the first attempt.\n   */\n  private executeWithRecovery(op: () => Promise<void>): Promise<void> {\n    return op().catch(e => this.disableNetworkUntilRecovery(e, op));\n  }\n\n  /**\n   * Takes a batch of changes from the Datastore, repackages them as a\n   * RemoteEvent, and passes that on to the listener, which is typically the\n   * SyncEngine.\n   */\n  private raiseWatchSnapshot(snapshotVersion: SnapshotVersion): Promise<void> {\n    debugAssert(\n      !snapshotVersion.isEqual(SnapshotVersion.min()),\n      \"Can't raise event for unknown SnapshotVersion\"\n    );\n    const remoteEvent = this.watchChangeAggregator!.createRemoteEvent(\n      snapshotVersion\n    );\n\n    // Update in-memory resume tokens. LocalStore will update the\n    // persistent view of these when applying the completed RemoteEvent.\n    remoteEvent.targetChanges.forEach((change, targetId) => {\n      if (change.resumeToken.approximateByteSize() > 0) {\n        const targetData = this.listenTargets.get(targetId);\n        // A watched target might have been removed already.\n        if (targetData) {\n          this.listenTargets.set(\n            targetId,\n            targetData.withResumeToken(change.resumeToken, snapshotVersion)\n          );\n        }\n      }\n    });\n\n    // Re-establish listens for the targets that have been invalidated by\n    // existence filter mismatches.\n    remoteEvent.targetMismatches.forEach(targetId => {\n      const targetData = this.listenTargets.get(targetId);\n      if (!targetData) {\n        // A watched target might have been removed already.\n        return;\n      }\n\n      // Clear the resume token for the target, since we're in a known mismatch\n      // state.\n      this.listenTargets.set(\n        targetId,\n        targetData.withResumeToken(\n          ByteString.EMPTY_BYTE_STRING,\n          targetData.snapshotVersion\n        )\n      );\n\n      // Cause a hard reset by unwatching and rewatching immediately, but\n      // deliberately don't send a resume token so that we get a full update.\n      this.sendUnwatchRequest(targetId);\n\n      // Mark the target we send as being on behalf of an existence filter\n      // mismatch, but don't actually retain that in listenTargets. This ensures\n      // that we flag the first re-listen this way without impacting future\n      // listens of this target (that might happen e.g. on reconnect).\n      const requestTargetData = new TargetData(\n        targetData.target,\n        targetId,\n        TargetPurpose.ExistenceFilterMismatch,\n        targetData.sequenceNumber\n      );\n      this.sendWatchRequest(requestTargetData);\n    });\n\n    // Finally raise remote event\n    return this.syncEngine.applyRemoteEvent(remoteEvent);\n  }\n\n  /** Handles an error on a target */\n  private async handleTargetError(\n    watchChange: WatchTargetChange\n  ): Promise<void> {\n    debugAssert(!!watchChange.cause, 'Handling target error without a cause');\n    const error = watchChange.cause!;\n    for (const targetId of watchChange.targetIds) {\n      // A watched target might have been removed already.\n      if (this.listenTargets.has(targetId)) {\n        await this.syncEngine.rejectListen(targetId, error);\n        this.listenTargets.delete(targetId);\n        this.watchChangeAggregator!.removeTarget(targetId);\n      }\n    }\n  }\n\n  /**\n   * Attempts to fill our write pipeline with writes from the LocalStore.\n   *\n   * Called internally to bootstrap or refill the write pipeline and by\n   * SyncEngine whenever there are new mutations to process.\n   *\n   * Starts the write stream if necessary.\n   */\n  async fillWritePipeline(): Promise<void> {\n    let lastBatchIdRetrieved =\n      this.writePipeline.length > 0\n        ? this.writePipeline[this.writePipeline.length - 1].batchId\n        : BATCHID_UNKNOWN;\n\n    while (this.canAddToWritePipeline()) {\n      try {\n        const batch = await this.localStore.nextMutationBatch(\n          lastBatchIdRetrieved\n        );\n\n        if (batch === null) {\n          if (this.writePipeline.length === 0) {\n            this.writeStream.markIdle();\n          }\n          break;\n        } else {\n          lastBatchIdRetrieved = batch.batchId;\n          this.addToWritePipeline(batch);\n        }\n      } catch (e) {\n        await this.disableNetworkUntilRecovery(e);\n      }\n    }\n\n    if (this.shouldStartWriteStream()) {\n      this.startWriteStream();\n    }\n  }\n\n  /**\n   * Returns true if we can add to the write pipeline (i.e. the network is\n   * enabled and the write pipeline is not full).\n   */\n  private canAddToWritePipeline(): boolean {\n    return (\n      this.canUseNetwork() && this.writePipeline.length < MAX_PENDING_WRITES\n    );\n  }\n\n  // For testing\n  outstandingWrites(): number {\n    return this.writePipeline.length;\n  }\n\n  /**\n   * Queues additional writes to be sent to the write stream, sending them\n   * immediately if the write stream is established.\n   */\n  private addToWritePipeline(batch: MutationBatch): void {\n    debugAssert(\n      this.canAddToWritePipeline(),\n      'addToWritePipeline called when pipeline is full'\n    );\n    this.writePipeline.push(batch);\n\n    if (this.writeStream.isOpen() && this.writeStream.handshakeComplete) {\n      this.writeStream.writeMutations(batch.mutations);\n    }\n  }\n\n  private shouldStartWriteStream(): boolean {\n    return (\n      this.canUseNetwork() &&\n      !this.writeStream.isStarted() &&\n      this.writePipeline.length > 0\n    );\n  }\n\n  private startWriteStream(): void {\n    debugAssert(\n      this.shouldStartWriteStream(),\n      'startWriteStream() called when shouldStartWriteStream() is false.'\n    );\n    this.writeStream.start();\n  }\n\n  private async onWriteStreamOpen(): Promise<void> {\n    this.writeStream.writeHandshake();\n  }\n\n  private async onWriteHandshakeComplete(): Promise<void> {\n    // Send the write pipeline now that the stream is established.\n    for (const batch of this.writePipeline) {\n      this.writeStream.writeMutations(batch.mutations);\n    }\n  }\n\n  private async onMutationResult(\n    commitVersion: SnapshotVersion,\n    results: MutationResult[]\n  ): Promise<void> {\n    // This is a response to a write containing mutations and should be\n    // correlated to the first write in our write pipeline.\n    debugAssert(\n      this.writePipeline.length > 0,\n      'Got result for empty write pipeline'\n    );\n    const batch = this.writePipeline.shift()!;\n    const success = MutationBatchResult.from(batch, commitVersion, results);\n\n    await this.executeWithRecovery(() =>\n      this.syncEngine.applySuccessfulWrite(success)\n    );\n\n    // It's possible that with the completion of this mutation another\n    // slot has freed up.\n    await this.fillWritePipeline();\n  }\n\n  private async onWriteStreamClose(error?: FirestoreError): Promise<void> {\n    if (error === undefined) {\n      // Graceful stop (due to stop() or idle timeout). Make sure that's\n      // desirable.\n      debugAssert(\n        !this.shouldStartWriteStream(),\n        'Write stream was stopped gracefully while still needed.'\n      );\n    }\n\n    // If the write stream closed after the write handshake completes, a write\n    // operation failed and we fail the pending operation.\n    if (error && this.writeStream.handshakeComplete) {\n      // This error affects the actual write.\n      await this.handleWriteError(error!);\n    }\n\n    // The write stream might have been started by refilling the write\n    // pipeline for failed writes\n    if (this.shouldStartWriteStream()) {\n      this.startWriteStream();\n    }\n  }\n\n  private async handleWriteError(error: FirestoreError): Promise<void> {\n    // Only handle permanent errors here. If it's transient, just let the retry\n    // logic kick in.\n    if (isPermanentWriteError(error.code)) {\n      // This was a permanent error, the request itself was the problem\n      // so it's not going to succeed if we resend it.\n      const batch = this.writePipeline.shift()!;\n\n      // In this case it's also unlikely that the server itself is melting\n      // down -- this was just a bad request so inhibit backoff on the next\n      // restart.\n      this.writeStream.inhibitBackoff();\n\n      await this.executeWithRecovery(() =>\n        this.syncEngine.rejectFailedWrite(batch.batchId, error)\n      );\n\n      // It's possible that with the completion of this mutation\n      // another slot has freed up.\n      await this.fillWritePipeline();\n    } else {\n      // Transient error, just let the retry logic kick in.\n    }\n  }\n\n  createTransaction(): Transaction {\n    return new Transaction(this.datastore);\n  }\n\n  private async restartNetwork(): Promise<void> {\n    this.offlineCauses.add(OfflineCause.ConnectivityChange);\n    await this.disableNetworkInternal();\n    this.onlineStateTracker.set(OnlineState.Unknown);\n    this.offlineCauses.delete(OfflineCause.ConnectivityChange);\n    await this.enableNetworkInternal();\n  }\n\n  async handleCredentialChange(user: User): Promise<void> {\n    this.asyncQueue.verifyOperationInProgress();\n\n    // Tear down and re-create our network streams. This will ensure we get a\n    // fresh auth token for the new user and re-fill the write pipeline with\n    // new mutations from the LocalStore (since mutations are per-user).\n    logDebug(LOG_TAG, 'RemoteStore received new credentials');\n    this.offlineCauses.add(OfflineCause.CredentialChange);\n\n    await this.disableNetworkInternal();\n    this.onlineStateTracker.set(OnlineState.Unknown);\n    await this.syncEngine.handleCredentialChange(user);\n\n    this.offlineCauses.delete(OfflineCause.CredentialChange);\n    await this.enableNetworkInternal();\n  }\n\n  /**\n   * Toggles the network state when the client gains or loses its primary lease.\n   */\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    if (isPrimary) {\n      this.offlineCauses.delete(OfflineCause.IsSecondary);\n      await this.enableNetworkInternal();\n    } else if (!isPrimary) {\n      this.offlineCauses.add(OfflineCause.IsSecondary);\n      await this.disableNetworkInternal();\n      this.onlineStateTracker.set(OnlineState.Unknown);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchId, MutationBatchState, TargetId } from '../core/types';\nimport { QueryTargetState } from './shared_client_state_syncer';\nimport { debugAssert } from '../util/assert';\nimport { ClientId } from './shared_client_state';\nimport { User } from '../auth/user';\n\n// The format of the LocalStorage key that stores the client state is:\n//     firestore_clients_<persistence_prefix>_<instance_key>\nexport const CLIENT_STATE_KEY_PREFIX = 'firestore_clients';\n\n/** Assembles the key for a client state in WebStorage */\nexport function createWebStorageClientStateKey(\n  persistenceKey: string,\n  clientId: ClientId\n): string {\n  debugAssert(\n    clientId.indexOf('_') === -1,\n    `Client key cannot contain '_', but was '${clientId}'`\n  );\n\n  return `${CLIENT_STATE_KEY_PREFIX}_${persistenceKey}_${clientId}`;\n}\n\n/**\n * The JSON representation of a clients's metadata as used during WebStorage\n * serialization. The ClientId is omitted here as it is encoded as part of the\n * key.\n */\nexport interface ClientStateSchema {\n  activeTargetIds: number[];\n  updateTimeMs: number;\n}\n\n// The format of the WebStorage key that stores the mutation state is:\n//     firestore_mutations_<persistence_prefix>_<batch_id>\n//     (for unauthenticated users)\n// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>\n//\n// 'user_uid' is last to avoid needing to escape '_' characters that it might\n// contain.\nexport const MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';\n\n/** Assembles the key for a mutation batch in WebStorage */\nexport function createWebStorageMutationBatchKey(\n  persistenceKey: string,\n  user: User,\n  batchId: BatchId\n): string {\n  let mutationKey = `${MUTATION_BATCH_KEY_PREFIX}_${persistenceKey}_${batchId}`;\n\n  if (user.isAuthenticated()) {\n    mutationKey += `_${user.uid}`;\n  }\n\n  return mutationKey;\n}\n\n/**\n * The JSON representation of a mutation batch's metadata as used during\n * WebStorage serialization. The UserId and BatchId is omitted as it is\n * encoded as part of the key.\n */\nexport interface MutationMetadataSchema {\n  state: MutationBatchState;\n  error?: { code: string; message: string }; // Only set when state === 'rejected'\n  updateTimeMs: number;\n}\n\n// The format of the WebStorage key that stores a query target's metadata is:\n//     firestore_targets_<persistence_prefix>_<target_id>\nexport const QUERY_TARGET_KEY_PREFIX = 'firestore_targets';\n\n/** Assembles the key for a query state in WebStorage */\nexport function createWebStorageQueryTargetMetadataKey(\n  persistenceKey: string,\n  targetId: TargetId\n): string {\n  return `${QUERY_TARGET_KEY_PREFIX}_${persistenceKey}_${targetId}`;\n}\n\n/**\n * The JSON representation of a query target's state as used during WebStorage\n * serialization. The TargetId is omitted as it is encoded as part of the key.\n */\nexport interface QueryTargetStateSchema {\n  state: QueryTargetState;\n  error?: { code: string; message: string }; // Only set when state === 'rejected'\n  updateTimeMs: number;\n}\n\n// The WebStorage prefix that stores the primary tab's online state. The\n// format of the key is:\n//     firestore_online_state_<persistence_prefix>\nexport const ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';\n\n/** Assembles the key for the online state of the primary tab. */\nexport function createWebStorageOnlineStateKey(persistenceKey: string): string {\n  return `${ONLINE_STATE_KEY_PREFIX}_${persistenceKey}`;\n}\n\n/**\n * The JSON representation of the system's online state, as written by the\n * primary client.\n */\nexport interface SharedOnlineStateSchema {\n  /**\n   * The clientId of the client that wrote this onlineState value. Tracked so\n   * that on startup, clients can check if this client is still active when\n   * determining whether to apply this value or not.\n   */\n  readonly clientId: string;\n  readonly onlineState: string;\n}\n\n// The WebStorage key prefix for the key that stores the last sequence number allocated. The key\n// looks like 'firestore_sequence_number_<persistence_prefix>'.\nexport const SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';\n\n/** Assembles the key for the current sequence number. */\nexport function createWebStorageSequenceNumberKey(\n  persistenceKey: string\n): string {\n  return `${SEQUENCE_NUMBER_KEY_PREFIX}_${persistenceKey}`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { ListenSequence } from '../core/listen_sequence';\nimport {\n  BatchId,\n  ListenSequenceNumber,\n  MutationBatchState,\n  OnlineState,\n  TargetId\n} from '../core/types';\nimport { TargetIdSet, targetIdSet } from '../model/collections';\nimport { hardAssert, debugAssert } from '../util/assert';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logError, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\nimport { SortedMap } from '../util/sorted_map';\nimport { primitiveComparator } from '../util/misc';\nimport { isSafeInteger, WindowLike } from '../util/types';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from './shared_client_state_syncer';\nimport {\n  CLIENT_STATE_KEY_PREFIX,\n  ClientStateSchema,\n  createWebStorageClientStateKey,\n  createWebStorageMutationBatchKey,\n  createWebStorageOnlineStateKey,\n  createWebStorageQueryTargetMetadataKey,\n  createWebStorageSequenceNumberKey,\n  MUTATION_BATCH_KEY_PREFIX,\n  MutationMetadataSchema,\n  QUERY_TARGET_KEY_PREFIX,\n  QueryTargetStateSchema,\n  SharedOnlineStateSchema\n} from './shared_client_state_schema';\n\nconst LOG_TAG = 'SharedClientState';\n\n/**\n * A randomly-generated key assigned to each Firestore instance at startup.\n */\nexport type ClientId = string;\n\n/**\n * A `SharedClientState` keeps track of the global state of the mutations\n * and query targets for all active clients with the same persistence key (i.e.\n * project ID and FirebaseApp name). It relays local changes to other clients\n * and updates its local state as new state is observed.\n *\n * `SharedClientState` is primarily used for synchronization in Multi-Tab\n * environments. Each tab is responsible for registering its active query\n * targets and mutations. `SharedClientState` will then notify the listener\n * assigned to `.syncEngine` for updates to mutations and queries that\n * originated in other clients.\n *\n * To receive notifications, `.syncEngine` and `.onlineStateHandler` has to be\n * assigned before calling `start()`.\n */\nexport interface SharedClientState {\n  syncEngine: SharedClientStateSyncer | null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null;\n\n  /** Registers the Mutation Batch ID of a newly pending mutation. */\n  addPendingMutation(batchId: BatchId): void;\n\n  /**\n   * Records that a pending mutation has been acknowledged or rejected.\n   * Called by the primary client to notify secondary clients of mutation\n   * results as they come back from the backend.\n   */\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Associates a new Query Target ID with the local Firestore client. Returns\n   * the new query state for the query (which can be 'current' if the query is\n   * already associated with another tab).\n   *\n   * If the target id is already associated with local client, the method simply\n   * returns its `QueryTargetState`.\n   */\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState;\n\n  /** Removes the Query Target ID association from the local client. */\n  removeLocalQueryTarget(targetId: TargetId): void;\n\n  /** Checks whether the target is associated with the local client. */\n  isLocalQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Processes an update to a query target.\n   *\n   * Called by the primary client to notify secondary clients of document\n   * changes or state transitions that affect the provided query target.\n   */\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void;\n\n  /**\n   * Removes the target's metadata entry.\n   *\n   * Called by the primary client when all clients stopped listening to a query\n   * target.\n   */\n  clearQueryState(targetId: TargetId): void;\n\n  /**\n   * Gets the active Query Targets IDs for all active clients.\n   *\n   * The implementation for this may require O(n) runtime, where 'n' is the size\n   * of the result set.\n   */\n  // Visible for testing\n  getAllActiveQueryTargets(): SortedSet<TargetId>;\n\n  /**\n   * Checks whether the provided target ID is currently being listened to by\n   * any of the active clients.\n   *\n   * The implementation may require O(n*log m) runtime, where 'n' is the number\n   * of clients and 'm' the number of targets.\n   */\n  isActiveQueryTarget(targetId: TargetId): boolean;\n\n  /**\n   * Starts the SharedClientState, reads existing client data and registers\n   * listeners for updates to new and existing clients.\n   */\n  start(): Promise<void>;\n\n  /** Shuts down the `SharedClientState` and its listeners. */\n  shutdown(): void;\n\n  /**\n   * Changes the active user and removes all existing user-specific data. The\n   * user change does not call back into SyncEngine (for example, no mutations\n   * will be marked as removed).\n   */\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void;\n\n  /** Changes the shared online state of all clients. */\n  setOnlineState(onlineState: OnlineState): void;\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void;\n}\n\n/**\n * Holds the state of a mutation batch, including its user ID, batch ID and\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\n */\n// Visible for testing\nexport class MutationMetadata {\n  constructor(\n    readonly user: User,\n    readonly batchId: BatchId,\n    readonly state: MutationBatchState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `MutationMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    user: User,\n    batchId: BatchId,\n    value: string\n  ): MutationMetadata | null {\n    const mutationBatch = JSON.parse(value) as MutationMetadataSchema;\n\n    let validData =\n      typeof mutationBatch === 'object' &&\n      ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==\n        -1 &&\n      (mutationBatch.error === undefined ||\n        typeof mutationBatch.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && mutationBatch.error) {\n      validData =\n        typeof mutationBatch.error.message === 'string' &&\n        typeof mutationBatch.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          mutationBatch.error.code as Code,\n          mutationBatch.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new MutationMetadata(\n        user,\n        batchId,\n        mutationBatch.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse mutation state for ID '${batchId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const batchMetadata: MutationMetadataSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(batchMetadata);\n  }\n}\n\n/**\n * Holds the state of a query target, including its target ID and whether the\n * target is 'not-current', 'current' or 'rejected'.\n */\n// Visible for testing\nexport class QueryTargetMetadata {\n  constructor(\n    readonly targetId: TargetId,\n    readonly state: QueryTargetState,\n    readonly error?: FirestoreError\n  ) {\n    debugAssert(\n      (error !== undefined) === (state === 'rejected'),\n      `QueryTargetMetadata must contain an error iff state is 'rejected'`\n    );\n  }\n\n  /**\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    targetId: TargetId,\n    value: string\n  ): QueryTargetMetadata | null {\n    const targetState = JSON.parse(value) as QueryTargetStateSchema;\n\n    let validData =\n      typeof targetState === 'object' &&\n      ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==\n        -1 &&\n      (targetState.error === undefined ||\n        typeof targetState.error === 'object');\n\n    let firestoreError: FirestoreError | undefined = undefined;\n\n    if (validData && targetState.error) {\n      validData =\n        typeof targetState.error.message === 'string' &&\n        typeof targetState.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(\n          targetState.error.code as Code,\n          targetState.error.message\n        );\n      }\n    }\n\n    if (validData) {\n      return new QueryTargetMetadata(\n        targetId,\n        targetState.state,\n        firestoreError\n      );\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse target state for ID '${targetId}': ${value}`\n      );\n      return null;\n    }\n  }\n\n  toWebStorageJSON(): string {\n    const targetState: QueryTargetStateSchema = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(targetState);\n  }\n}\n\n/**\n * Metadata state of a single client denoting the query targets it is actively\n * listening to.\n */\n// Visible for testing.\nexport interface ClientState {\n  readonly activeTargetIds: TargetIdSet;\n}\n\n/**\n * This class represents the immutable ClientState for a client read from\n * WebStorage, containing the list of active query targets.\n */\nclass RemoteClientState implements ClientState {\n  private constructor(\n    readonly clientId: ClientId,\n    readonly activeTargetIds: TargetIdSet\n  ) {}\n\n  /**\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(\n    clientId: ClientId,\n    value: string\n  ): RemoteClientState | null {\n    const clientState = JSON.parse(value) as ClientStateSchema;\n\n    let validData =\n      typeof clientState === 'object' &&\n      clientState.activeTargetIds instanceof Array;\n\n    let activeTargetIdsSet = targetIdSet();\n\n    for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(\n        clientState.activeTargetIds[i]\n      );\n    }\n\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(\n        LOG_TAG,\n        `Failed to parse client data for instance '${clientId}': ${value}`\n      );\n      return null;\n    }\n  }\n}\n\n/**\n * This class represents the online state for all clients participating in\n * multi-tab. The online state is only written to by the primary client, and\n * used in secondary clients to update their query views.\n */\nexport class SharedOnlineState {\n  constructor(readonly clientId: string, readonly onlineState: OnlineState) {}\n\n  /**\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(value: string): SharedOnlineState | null {\n    const onlineState = JSON.parse(value) as SharedOnlineStateSchema;\n\n    const validData =\n      typeof onlineState === 'object' &&\n      ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !==\n        -1 &&\n      typeof onlineState.clientId === 'string';\n\n    if (validData) {\n      return new SharedOnlineState(\n        onlineState.clientId,\n        onlineState.onlineState as OnlineState\n      );\n    } else {\n      logError(LOG_TAG, `Failed to parse online state: ${value}`);\n      return null;\n    }\n  }\n}\n\n/**\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\n * mutable and keeps track of all pending mutations, which allows us to\n * update the range of pending mutation batch IDs as new mutations are added or\n * removed.\n *\n * The data in `LocalClientState` is not read from WebStorage and instead\n * updated via its instance methods. The updated state can be serialized via\n * `toWebStorageJSON()`.\n */\n// Visible for testing.\nexport class LocalClientState implements ClientState {\n  activeTargetIds = targetIdSet();\n\n  addQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  }\n\n  removeQueryTarget(targetId: TargetId): void {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  }\n\n  /**\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\n   * Does not encode `clientId` as it is part of the key in WebStorage.\n   */\n  toWebStorageJSON(): string {\n    const data: ClientStateSchema = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    return JSON.stringify(data);\n  }\n}\n\n/**\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\n * backing store for the SharedClientState. It keeps track of all active\n * clients and supports modifications of the local client's data.\n */\nexport class WebStorageSharedClientState implements SharedClientState {\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  private readonly storage: Storage;\n  private readonly localClientStorageKey: string;\n  private readonly sequenceNumberKey: string;\n  private readonly storageListener = this.handleWebStorageEvent.bind(this);\n  private readonly onlineStateKey: string;\n  private readonly clientStateKeyRe: RegExp;\n  private readonly mutationBatchKeyRe: RegExp;\n  private readonly queryTargetKeyRe: RegExp;\n  private activeClients = new SortedMap<string, ClientState>(\n    primitiveComparator\n  );\n  private started = false;\n  private currentUser: User;\n\n  /**\n   * Captures WebStorage events that occur before `start()` is called. These\n   * events are replayed once `WebStorageSharedClientState` is started.\n   */\n  private earlyEvents: StorageEvent[] = [];\n\n  constructor(\n    private readonly window: WindowLike,\n    private readonly queue: AsyncQueue,\n    private readonly persistenceKey: string,\n    private readonly localClientId: ClientId,\n    initialUser: User\n  ) {\n    // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    const escapedPersistenceKey = persistenceKey.replace(\n      /[.*+?^${}()|[\\]\\\\]/g,\n      '\\\\$&'\n    );\n\n    this.storage = this.window.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(\n      this.persistenceKey,\n      this.localClientId\n    );\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(\n      this.persistenceKey\n    );\n    this.activeClients = this.activeClients.insert(\n      this.localClientId,\n      new LocalClientState()\n    );\n\n    this.clientStateKeyRe = new RegExp(\n      `^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`\n    );\n    this.mutationBatchKeyRe = new RegExp(\n      `^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`\n    );\n    this.queryTargetKeyRe = new RegExp(\n      `^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`\n    );\n\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n\n    // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n    this.window.addEventListener('storage', this.storageListener);\n  }\n\n  /** Returns 'true' if WebStorage is available in the current environment. */\n  static isAvailable(window: WindowLike | null): window is WindowLike {\n    return !!(window && window.localStorage);\n  }\n\n  async start(): Promise<void> {\n    debugAssert(!this.started, 'WebStorageSharedClientState already started');\n    debugAssert(\n      this.syncEngine !== null,\n      'syncEngine property must be set before calling start()'\n    );\n    debugAssert(\n      this.onlineStateHandler !== null,\n      'onlineStateHandler property must be set before calling start()'\n    );\n\n    // Retrieve the list of existing clients to backfill the data in\n    // SharedClientState.\n    const existingClients = await this.syncEngine!.getActiveClients();\n\n    for (const clientId of existingClients) {\n      if (clientId === this.localClientId) {\n        continue;\n      }\n\n      const storageItem = this.getItem(\n        createWebStorageClientStateKey(this.persistenceKey, clientId)\n      );\n      if (storageItem) {\n        const clientState = RemoteClientState.fromWebStorageEntry(\n          clientId,\n          storageItem\n        );\n        if (clientState) {\n          this.activeClients = this.activeClients.insert(\n            clientState.clientId,\n            clientState\n          );\n        }\n      }\n    }\n\n    this.persistClientState();\n\n    // Check if there is an existing online state and call the callback handler\n    // if applicable.\n    const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n    if (onlineStateJSON) {\n      const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n      if (onlineState) {\n        this.handleOnlineStateEvent(onlineState);\n      }\n    }\n\n    for (const event of this.earlyEvents) {\n      this.handleWebStorageEvent(event);\n    }\n\n    this.earlyEvents = [];\n\n    // Register a window unload hook to remove the client metadata entry from\n    // WebStorage even if `shutdown()` was not called.\n    this.window.addEventListener('unload', () => this.shutdown());\n\n    this.started = true;\n  }\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.extractActiveQueryTargets(this.activeClients);\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    let found = false;\n    this.activeClients.forEach((key, value) => {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  addPendingMutation(batchId: BatchId): void {\n    this.persistMutationState(batchId, 'pending');\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    this.persistMutationState(batchId, state, error);\n\n    // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n    this.removeMutationState(batchId);\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    let queryState: QueryTargetState = 'not-current';\n\n    // Lookup an existing query state if the target ID was already registered\n    // by another tab\n    if (this.isActiveQueryTarget(targetId)) {\n      const storageItem = this.storage.getItem(\n        createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n      );\n\n      if (storageItem) {\n        const metadata = QueryTargetMetadata.fromWebStorageEntry(\n          targetId,\n          storageItem\n        );\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n\n    this.localClientState.addQueryTarget(targetId);\n    this.persistClientState();\n\n    return queryState;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localClientState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    this.removeItem(\n      createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId)\n    );\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.persistQueryTargetState(targetId, state, error);\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    removedBatchIds.forEach(batchId => {\n      this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(batchId => {\n      this.addPendingMutation(batchId);\n    });\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    this.persistOnlineState(onlineState);\n  }\n\n  shutdown(): void {\n    if (this.started) {\n      this.window.removeEventListener('storage', this.storageListener);\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  }\n\n  private getItem(key: string): string | null {\n    const value = this.storage.getItem(key);\n    logDebug(LOG_TAG, 'READ', key, value);\n    return value;\n  }\n\n  private setItem(key: string, value: string): void {\n    logDebug(LOG_TAG, 'SET', key, value);\n    this.storage.setItem(key, value);\n  }\n\n  private removeItem(key: string): void {\n    logDebug(LOG_TAG, 'REMOVE', key);\n    this.storage.removeItem(key);\n  }\n\n  private handleWebStorageEvent(event: Event): void {\n    // Note: The function is typed to take Event to be interface-compatible with\n    // `Window.addEventListener`.\n    const storageEvent = event as StorageEvent;\n    if (storageEvent.storageArea === this.storage) {\n      logDebug(LOG_TAG, 'EVENT', storageEvent.key, storageEvent.newValue);\n\n      if (storageEvent.key === this.localClientStorageKey) {\n        logError(\n          'Received WebStorage notification for local change. Another client might have ' +\n            'garbage-collected our state'\n        );\n        return;\n      }\n\n      this.queue.enqueueRetryable(async () => {\n        if (!this.started) {\n          this.earlyEvents.push(storageEvent);\n          return;\n        }\n\n        if (storageEvent.key === null) {\n          return;\n        }\n\n        if (this.clientStateKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue != null) {\n            const clientState = this.fromWebStorageClientState(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (clientState) {\n              return this.handleClientStateEvent(\n                clientState.clientId,\n                clientState\n              );\n            }\n          } else {\n            const clientId = this.fromWebStorageClientStateKey(\n              storageEvent.key\n            )!;\n            return this.handleClientStateEvent(clientId, null);\n          }\n        } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const mutationMetadata = this.fromWebStorageMutationMetadata(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (mutationMetadata) {\n              return this.handleMutationBatchEvent(mutationMetadata);\n            }\n          }\n        } else if (this.queryTargetKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(\n              storageEvent.key,\n              storageEvent.newValue\n            );\n            if (queryTargetMetadata) {\n              return this.handleQueryTargetEvent(queryTargetMetadata);\n            }\n          }\n        } else if (storageEvent.key === this.onlineStateKey) {\n          if (storageEvent.newValue !== null) {\n            const onlineState = this.fromWebStorageOnlineState(\n              storageEvent.newValue\n            );\n            if (onlineState) {\n              return this.handleOnlineStateEvent(onlineState);\n            }\n          }\n        } else if (storageEvent.key === this.sequenceNumberKey) {\n          debugAssert(\n            !!this.sequenceNumberHandler,\n            'Missing sequenceNumberHandler'\n          );\n          const sequenceNumber = fromWebStorageSequenceNumber(\n            storageEvent.newValue\n          );\n          if (sequenceNumber !== ListenSequence.INVALID) {\n            this.sequenceNumberHandler!(sequenceNumber);\n          }\n        }\n      });\n    }\n  }\n\n  private get localClientState(): LocalClientState {\n    return this.activeClients.get(this.localClientId) as LocalClientState;\n  }\n\n  private persistClientState(): void {\n    this.setItem(\n      this.localClientStorageKey,\n      this.localClientState.toWebStorageJSON()\n    );\n  }\n\n  private persistMutationState(\n    batchId: BatchId,\n    state: MutationBatchState,\n    error?: FirestoreError\n  ): void {\n    const mutationState = new MutationMetadata(\n      this.currentUser,\n      batchId,\n      state,\n      error\n    );\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  }\n\n  private removeMutationState(batchId: BatchId): void {\n    const mutationKey = createWebStorageMutationBatchKey(\n      this.persistenceKey,\n      this.currentUser,\n      batchId\n    );\n    this.removeItem(mutationKey);\n  }\n\n  private persistOnlineState(onlineState: OnlineState): void {\n    const entry: SharedOnlineStateSchema = {\n      clientId: this.localClientId,\n      onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  }\n\n  private persistQueryTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    const targetKey = createWebStorageQueryTargetMetadataKey(\n      this.persistenceKey,\n      targetId\n    );\n    const targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  }\n\n  /**\n   * Parses a client state key in WebStorage. Returns null if the key does not\n   * match the expected key format.\n   */\n  private fromWebStorageClientStateKey(key: string): ClientId | null {\n    const match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\n   * be parsed.\n   */\n  private fromWebStorageClientState(\n    key: string,\n    value: string\n  ): RemoteClientState | null {\n    const clientId = this.fromWebStorageClientStateKey(key);\n    debugAssert(clientId !== null, `Cannot parse client state key '${key}'`);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  }\n\n  /**\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageMutationMetadata(\n    key: string,\n    value: string\n  ): MutationMetadata | null {\n    const match = this.mutationBatchKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse mutation batch key '${key}'`);\n\n    const batchId = Number(match[1]);\n    const userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(\n      new User(userId),\n      batchId,\n      value\n    );\n  }\n\n  /**\n   * Parses a query target state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageQueryTargetMetadata(\n    key: string,\n    value: string\n  ): QueryTargetMetadata | null {\n    const match = this.queryTargetKeyRe.exec(key);\n    debugAssert(match !== null, `Cannot parse query target key '${key}'`);\n\n    const targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  }\n\n  /**\n   * Parses an online state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  private fromWebStorageOnlineState(value: string): SharedOnlineState | null {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  }\n\n  private async handleMutationBatchEvent(\n    mutationBatch: MutationMetadata\n  ): Promise<void> {\n    if (mutationBatch.user.uid !== this.currentUser.uid) {\n      logDebug(\n        LOG_TAG,\n        `Ignoring mutation for non-active user ${mutationBatch.user.uid}`\n      );\n      return;\n    }\n\n    return this.syncEngine!.applyBatchState(\n      mutationBatch.batchId,\n      mutationBatch.state,\n      mutationBatch.error\n    );\n  }\n\n  private handleQueryTargetEvent(\n    targetMetadata: QueryTargetMetadata\n  ): Promise<void> {\n    return this.syncEngine!.applyTargetState(\n      targetMetadata.targetId,\n      targetMetadata.state,\n      targetMetadata.error\n    );\n  }\n\n  private handleClientStateEvent(\n    clientId: ClientId,\n    clientState: RemoteClientState | null\n  ): Promise<void> {\n    const updatedClients = clientState\n      ? this.activeClients.insert(clientId, clientState)\n      : this.activeClients.remove(clientId);\n\n    const existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    const newTargets = this.extractActiveQueryTargets(updatedClients);\n\n    const addedTargets: TargetId[] = [];\n    const removedTargets: TargetId[] = [];\n\n    newTargets.forEach(targetId => {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n\n    existingTargets.forEach(targetId => {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n\n    return this.syncEngine!.applyActiveTargetsChange(\n      addedTargets,\n      removedTargets\n    ).then(() => {\n      this.activeClients = updatedClients;\n    });\n  }\n\n  private handleOnlineStateEvent(onlineState: SharedOnlineState): void {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler!(onlineState.onlineState);\n    }\n  }\n\n  private extractActiveQueryTargets(\n    clients: SortedMap<string, ClientState>\n  ): SortedSet<TargetId> {\n    let activeTargets = targetIdSet();\n    clients.forEach((kev, value) => {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  }\n}\n\nfunction fromWebStorageSequenceNumber(\n  seqString: string | null\n): ListenSequenceNumber {\n  let sequenceNumber = ListenSequence.INVALID;\n  if (seqString != null) {\n    try {\n      const parsed = JSON.parse(seqString);\n      hardAssert(\n        typeof parsed === 'number',\n        'Found non-numeric sequence number'\n      );\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n  return sequenceNumber;\n}\n\n/**\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\n * clients using memory persistence. The state in this class remains fully\n * isolated and no synchronization is performed.\n */\nexport class MemorySharedClientState implements SharedClientState {\n  private localState = new LocalClientState();\n  private queryState: { [targetId: number]: QueryTargetState } = {};\n\n  syncEngine: SharedClientStateSyncer | null = null;\n  onlineStateHandler: ((onlineState: OnlineState) => void) | null = null;\n  sequenceNumberHandler:\n    | ((sequenceNumber: ListenSequenceNumber) => void)\n    | null = null;\n\n  addPendingMutation(batchId: BatchId): void {\n    // No op.\n  }\n\n  updateMutationState(\n    batchId: BatchId,\n    state: 'acknowledged' | 'rejected',\n    error?: FirestoreError\n  ): void {\n    // No op.\n  }\n\n  addLocalQueryTarget(targetId: TargetId): QueryTargetState {\n    this.localState.addQueryTarget(targetId);\n    return this.queryState[targetId] || 'not-current';\n  }\n\n  updateQueryState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): void {\n    this.queryState[targetId] = state;\n  }\n\n  removeLocalQueryTarget(targetId: TargetId): void {\n    this.localState.removeQueryTarget(targetId);\n  }\n\n  isLocalQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  clearQueryState(targetId: TargetId): void {\n    delete this.queryState[targetId];\n  }\n\n  getAllActiveQueryTargets(): TargetIdSet {\n    return this.localState.activeTargetIds;\n  }\n\n  isActiveQueryTarget(targetId: TargetId): boolean {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n\n  start(): Promise<void> {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  }\n\n  handleUserChange(\n    user: User,\n    removedBatchIds: BatchId[],\n    addedBatchIds: BatchId[]\n  ): void {\n    // No op.\n  }\n\n  setOnlineState(onlineState: OnlineState): void {\n    // No op.\n  }\n\n  shutdown(): void {}\n\n  writeSequenceNumber(sequenceNumber: ListenSequenceNumber): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryResult } from '../local/local_store';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { TargetChange } from '../remote/remote_event';\nimport { debugAssert, fail } from '../util/assert';\n\nimport { Query } from './query';\nimport { OnlineState } from './types';\nimport {\n  ChangeType,\n  DocumentChangeSet,\n  SyncState,\n  ViewSnapshot\n} from './view_snapshot';\n\nexport type LimboDocumentChange = AddedLimboDocument | RemovedLimboDocument;\nexport class AddedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\nexport class RemovedLimboDocument {\n  constructor(public key: DocumentKey) {}\n}\n\n/** The result of applying a set of doc changes to a view. */\nexport interface ViewDocumentChanges {\n  /** The new set of docs that should be in the view. */\n  documentSet: DocumentSet;\n  /** The diff of these docs with the previous set of docs. */\n  changeSet: DocumentChangeSet;\n  /**\n   * Whether the set of documents passed in was not sufficient to calculate the\n   * new state of the view and there needs to be another pass based on the\n   * local cache.\n   */\n  needsRefill: boolean;\n\n  mutatedKeys: DocumentKeySet;\n}\n\nexport interface ViewChange {\n  snapshot?: ViewSnapshot;\n  limboChanges: LimboDocumentChange[];\n}\n\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nexport class View {\n  private syncState: SyncState | null = null;\n  /**\n   * A flag whether the view is current with the backend. A view is considered\n   * current after it has seen the current flag from the backend and did not\n   * lose consistency within the watch stream (e.g. because of an existence\n   * filter mismatch).\n   */\n  private current = false;\n  private documentSet: DocumentSet;\n  /** Documents in the view but not in the remote target */\n  private limboDocuments = documentKeySet();\n  /** Document Keys that have local changes */\n  private mutatedKeys = documentKeySet();\n\n  constructor(\n    private query: Query,\n    /** Documents included in the remote target */\n    private _syncedDocuments: DocumentKeySet\n  ) {\n    this.documentSet = new DocumentSet(query.docComparator.bind(query));\n  }\n\n  /**\n   * The set of remote documents that the server has told us belongs to the target associated with\n   * this view.\n   */\n  get syncedDocuments(): DocumentKeySet {\n    return this._syncedDocuments;\n  }\n\n  /**\n   * Iterates over a set of doc changes, applies the query limit, and computes\n   * what the new results should be, what the changes were, and whether we may\n   * need to go back to the local cache for more results. Does not make any\n   * changes to the view.\n   * @param docChanges The doc changes to apply to this view.\n   * @param previousChanges If this is being called with a refill, then start\n   *        with this set of docs and changes instead of the current view.\n   * @return a new set of docs, changes, and refill flag.\n   */\n  computeDocChanges(\n    docChanges: MaybeDocumentMap,\n    previousChanges?: ViewDocumentChanges\n  ): ViewDocumentChanges {\n    const changeSet = previousChanges\n      ? previousChanges.changeSet\n      : new DocumentChangeSet();\n    const oldDocumentSet = previousChanges\n      ? previousChanges.documentSet\n      : this.documentSet;\n    let newMutatedKeys = previousChanges\n      ? previousChanges.mutatedKeys\n      : this.mutatedKeys;\n    let newDocumentSet = oldDocumentSet;\n    let needsRefill = false;\n\n    // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n    const lastDocInLimit =\n      this.query.hasLimitToFirst() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.last()\n        : null;\n    const firstDocInLimit =\n      this.query.hasLimitToLast() && oldDocumentSet.size === this.query.limit\n        ? oldDocumentSet.first()\n        : null;\n\n    docChanges.inorderTraversal(\n      (key: DocumentKey, newMaybeDoc: MaybeDocument) => {\n        const oldDoc = oldDocumentSet.get(key);\n        let newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;\n        if (newDoc) {\n          debugAssert(\n            key.isEqual(newDoc.key),\n            'Mismatching keys found in document changes: ' +\n              key +\n              ' != ' +\n              newDoc.key\n          );\n          newDoc = this.query.matches(newDoc) ? newDoc : null;\n        }\n\n        const oldDocHadPendingMutations = oldDoc\n          ? this.mutatedKeys.has(oldDoc.key)\n          : false;\n        const newDocHasPendingMutations = newDoc\n          ? newDoc.hasLocalMutations ||\n            // We only consider committed mutations for documents that were\n            // mutated during the lifetime of the view.\n            (this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)\n          : false;\n\n        let changeApplied = false;\n\n        // Calculate change\n        if (oldDoc && newDoc) {\n          const docsEqual = oldDoc.data().isEqual(newDoc.data());\n          if (!docsEqual) {\n            if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n              changeSet.track({\n                type: ChangeType.Modified,\n                doc: newDoc\n              });\n              changeApplied = true;\n\n              if (\n                (lastDocInLimit &&\n                  this.query.docComparator(newDoc, lastDocInLimit) > 0) ||\n                (firstDocInLimit &&\n                  this.query.docComparator(newDoc, firstDocInLimit) < 0)\n              ) {\n                // This doc moved from inside the limit to outside the limit.\n                // That means there may be some other doc in the local cache\n                // that should be included instead.\n                needsRefill = true;\n              }\n            }\n          } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n            changeSet.track({ type: ChangeType.Metadata, doc: newDoc });\n            changeApplied = true;\n          }\n        } else if (!oldDoc && newDoc) {\n          changeSet.track({ type: ChangeType.Added, doc: newDoc });\n          changeApplied = true;\n        } else if (oldDoc && !newDoc) {\n          changeSet.track({ type: ChangeType.Removed, doc: oldDoc });\n          changeApplied = true;\n\n          if (lastDocInLimit || firstDocInLimit) {\n            // A doc was removed from a full limit query. We'll need to\n            // requery from the local cache to see if we know about some other\n            // doc that should be in the results.\n            needsRefill = true;\n          }\n        }\n\n        if (changeApplied) {\n          if (newDoc) {\n            newDocumentSet = newDocumentSet.add(newDoc);\n            if (newDocHasPendingMutations) {\n              newMutatedKeys = newMutatedKeys.add(key);\n            } else {\n              newMutatedKeys = newMutatedKeys.delete(key);\n            }\n          } else {\n            newDocumentSet = newDocumentSet.delete(key);\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        }\n      }\n    );\n\n    // Drop documents out to meet limit/limitToLast requirement.\n    if (this.query.hasLimitToFirst() || this.query.hasLimitToLast()) {\n      while (newDocumentSet.size > this.query.limit!) {\n        const oldDoc = this.query.hasLimitToFirst()\n          ? newDocumentSet.last()\n          : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc!.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc!.key);\n        changeSet.track({ type: ChangeType.Removed, doc: oldDoc! });\n      }\n    }\n\n    debugAssert(\n      !needsRefill || !previousChanges,\n      'View was refilled using docs that themselves needed refilling.'\n    );\n    return {\n      documentSet: newDocumentSet,\n      changeSet,\n      needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  }\n\n  private shouldWaitForSyncedDocument(\n    oldDoc: Document,\n    newDoc: Document\n  ): boolean {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return (\n      oldDoc.hasLocalMutations &&\n      newDoc.hasCommittedMutations &&\n      !newDoc.hasLocalMutations\n    );\n  }\n\n  /**\n   * Updates the view with the given ViewDocumentChanges and optionally updates\n   * limbo docs and sync state from the provided target change.\n   * @param docChanges The set of changes to make to the view's docs.\n   * @param updateLimboDocuments Whether to update limbo documents based on this\n   *        change.\n   * @param targetChange A target change to apply for computing limbo docs and\n   *        sync state.\n   * @return A new ViewChange with the given docs, changes, and sync state.\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n  applyChanges(\n    docChanges: ViewDocumentChanges,\n    updateLimboDocuments: boolean,\n    targetChange?: TargetChange\n  ): ViewChange {\n    debugAssert(\n      !docChanges.needsRefill,\n      'Cannot apply changes that need a refill'\n    );\n    const oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys;\n    // Sort changes based on type and query comparator\n    const changes = docChanges.changeSet.getChanges();\n    changes.sort((c1, c2) => {\n      return (\n        compareChangeType(c1.type, c2.type) ||\n        this.query.docComparator(c1.doc, c2.doc)\n      );\n    });\n\n    this.applyTargetChange(targetChange);\n    const limboChanges = updateLimboDocuments\n      ? this.updateLimboDocuments()\n      : [];\n    const synced = this.limboDocuments.size === 0 && this.current;\n    const newSyncState = synced ? SyncState.Synced : SyncState.Local;\n    const syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return { limboChanges };\n    } else {\n      const snap: ViewSnapshot = new ViewSnapshot(\n        this.query,\n        docChanges.documentSet,\n        oldDocs,\n        changes,\n        docChanges.mutatedKeys,\n        newSyncState === SyncState.Local,\n        syncStateChanged,\n        /* excludesMetadataChanges= */ false\n      );\n      return {\n        snapshot: snap,\n        limboChanges\n      };\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the view, potentially generating a\n   * ViewChange if the view's syncState changes as a result.\n   */\n  applyOnlineStateChange(onlineState: OnlineState): ViewChange {\n    if (this.current && onlineState === OnlineState.Offline) {\n      // If we're offline, set `current` to false and then call applyChanges()\n      // to refresh our syncState and generate a ViewChange as appropriate. We\n      // are guaranteed to get a new TargetChange that sets `current` back to\n      // true once the client is back online.\n      this.current = false;\n      return this.applyChanges(\n        {\n          documentSet: this.documentSet,\n          changeSet: new DocumentChangeSet(),\n          mutatedKeys: this.mutatedKeys,\n          needsRefill: false\n        },\n        /* updateLimboDocuments= */ false\n      );\n    } else {\n      // No effect, just return a no-op ViewChange.\n      return { limboChanges: [] };\n    }\n  }\n\n  /**\n   * Returns whether the doc for the given key should be in limbo.\n   */\n  private shouldBeInLimbo(key: DocumentKey): boolean {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    }\n    // The local store doesn't think it's a result, so it shouldn't be in limbo.\n    if (!this.documentSet.has(key)) {\n      return false;\n    }\n    // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n    if (this.documentSet.get(key)!.hasLocalMutations) {\n      return false;\n    }\n    // Everything else is in limbo.\n    return true;\n  }\n\n  /**\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\n   * Returns the list of changes to which docs are in limbo.\n   */\n  private applyTargetChange(targetChange?: TargetChange): void {\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.add(key))\n      );\n      targetChange.modifiedDocuments.forEach(key => {\n        debugAssert(\n          this._syncedDocuments.has(key),\n          `Modified document ${key} not found in view.`\n        );\n      });\n      targetChange.removedDocuments.forEach(\n        key => (this._syncedDocuments = this._syncedDocuments.delete(key))\n      );\n      this.current = targetChange.current;\n    }\n  }\n\n  private updateLimboDocuments(): LimboDocumentChange[] {\n    // We can only determine limbo documents when we're in-sync with the server.\n    if (!this.current) {\n      return [];\n    }\n\n    // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n    const oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(doc => {\n      if (this.shouldBeInLimbo(doc.key)) {\n        this.limboDocuments = this.limboDocuments.add(doc.key);\n      }\n    });\n\n    // Diff the new limbo docs with the old limbo docs.\n    const changes: LimboDocumentChange[] = [];\n    oldLimboDocuments.forEach(key => {\n      if (!this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(key => {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  }\n\n  /**\n   * Update the in-memory state of the current view with the state read from\n   * persistence.\n   *\n   * We update the query view whenever a client's primary status changes:\n   * - When a client transitions from primary to secondary, it can miss\n   *   LocalStorage updates and its query views may temporarily not be\n   *   synchronized with the state on disk.\n   * - For secondary to primary transitions, the client needs to update the list\n   *   of `syncedDocuments` since secondary clients update their query views\n   *   based purely on synthesized RemoteEvents.\n   *\n   * @param queryResult.documents - The documents that match the query according\n   * to the LocalStore.\n   * @param queryResult.remoteKeys - The keys of the documents that match the\n   * query according to the backend.\n   *\n   * @return The ViewChange that resulted from this synchronization.\n   */\n  // PORTING NOTE: Multi-tab only.\n  synchronizeWithPersistedState(queryResult: QueryResult): ViewChange {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    const docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);\n  }\n\n  /**\n   * Returns a view snapshot as if this query was just listened to. Contains\n   * a document add for every existing document and the `fromCache` and\n   * `hasPendingWrites` status of the already established view.\n   */\n  // PORTING NOTE: Multi-tab only.\n  computeInitialSnapshot(): ViewSnapshot {\n    return ViewSnapshot.fromInitialDocuments(\n      this.query,\n      this.documentSet,\n      this.mutatedKeys,\n      this.syncState === SyncState.Local\n    );\n  }\n}\n\nfunction compareChangeType(c1: ChangeType, c2: ChangeType): number {\n  const order = (change: ChangeType): 0 | 1 | 2 => {\n    switch (change) {\n      case ChangeType.Added:\n        return 1;\n      case ChangeType.Modified:\n        return 2;\n      case ChangeType.Metadata:\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n      case ChangeType.Removed:\n        return 0;\n      default:\n        return fail('Unknown ChangeType: ' + change);\n    }\n  };\n\n  return order(c1) - order(c2);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '../util/promise';\nimport { TimerId, AsyncQueue } from '../util/async_queue';\nimport { ExponentialBackoff } from '../remote/backoff';\nimport { Transaction } from './transaction';\nimport { Datastore } from '../remote/datastore';\nimport { isNullOrUndefined } from '../util/types';\nimport { isPermanentError } from '../remote/rpc_error';\nimport { FirestoreError } from '../util/error';\n\nconst RETRY_COUNT = 5;\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nexport class TransactionRunner<T> {\n  private retries = RETRY_COUNT;\n  private backoff: ExponentialBackoff;\n\n  constructor(\n    private readonly asyncQueue: AsyncQueue,\n    private readonly datastore: Datastore,\n    private readonly updateFunction: (transaction: Transaction) => Promise<T>,\n    private readonly deferred: Deferred<T>\n  ) {\n    this.backoff = new ExponentialBackoff(\n      this.asyncQueue,\n      TimerId.TransactionRetry\n    );\n  }\n\n  /** Runs the transaction and sets the result on deferred. */\n  run(): void {\n    this.runWithBackOff();\n  }\n\n  private runWithBackOff(): void {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = new Transaction(this.datastore);\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise\n          .then(result => {\n            this.asyncQueue.enqueueAndForget(() => {\n              return transaction\n                .commit()\n                .then(() => {\n                  this.deferred.resolve(result);\n                })\n                .catch(commitError => {\n                  this.handleTransactionError(commitError);\n                });\n            });\n          })\n          .catch(userPromiseError => {\n            this.handleTransactionError(userPromiseError);\n          });\n      }\n    });\n  }\n\n  private tryRunUpdateFunction(transaction: Transaction): Promise<T> | null {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (\n        isNullOrUndefined(userPromise) ||\n        !userPromise.catch ||\n        !userPromise.then\n      ) {\n        this.deferred.reject(\n          Error('Transaction callback must return a Promise')\n        );\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n\n  private handleTransactionError(error: Error): void {\n    if (this.retries > 0 && this.isRetryableTransactionError(error)) {\n      this.retries -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n\n  private isRetryableTransactionError(error: Error): boolean {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = (error as FirestoreError).code;\n      return (\n        code === 'aborted' ||\n        code === 'failed-precondition' ||\n        !isPermanentError(code)\n      );\n    }\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport {\n  ignoreIfPrimaryLeaseLoss,\n  LocalStore,\n  MultiTabLocalStore\n} from '../local/local_store';\nimport { LocalViewChanges } from '../local/local_view_changes';\nimport { ReferenceSet } from '../local/reference_set';\nimport { TargetData, TargetPurpose } from '../local/target_data';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { BATCHID_UNKNOWN, MutationBatchResult } from '../model/mutation_batch';\nimport { RemoteEvent, TargetChange } from '../remote/remote_event';\nimport { RemoteStore } from '../remote/remote_store';\nimport { RemoteSyncer } from '../remote/remote_syncer';\nimport { debugAssert, fail, hardAssert } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { primitiveComparator } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Deferred } from '../util/promise';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { ClientId, SharedClientState } from '../local/shared_client_state';\nimport {\n  QueryTargetState,\n  SharedClientStateSyncer\n} from '../local/shared_client_state_syncer';\nimport { SortedSet } from '../util/sorted_set';\nimport { ListenSequence } from './listen_sequence';\nimport { LimitType, Query } from './query';\nimport { SnapshotVersion } from './snapshot_version';\nimport { Target } from './target';\nimport { TargetIdGenerator } from './target_id_generator';\nimport { Transaction } from './transaction';\nimport {\n  BatchId,\n  MutationBatchState,\n  OnlineState,\n  OnlineStateSource,\n  TargetId\n} from './types';\nimport {\n  AddedLimboDocument,\n  LimboDocumentChange,\n  RemovedLimboDocument,\n  View,\n  ViewChange,\n  ViewDocumentChanges\n} from './view';\nimport { ViewSnapshot } from './view_snapshot';\nimport { AsyncQueue, wrapInUserErrorIfRecoverable } from '../util/async_queue';\nimport { TransactionRunner } from './transaction_runner';\nimport { Datastore } from '../remote/datastore';\n\nconst LOG_TAG = 'SyncEngine';\n\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nclass QueryView {\n  constructor(\n    /**\n     * The query itself.\n     */\n    public query: Query,\n    /**\n     * The target number created by the client that is used in the watch\n     * stream to identify this query.\n     */\n    public targetId: TargetId,\n    /**\n     * The view is responsible for computing the final merged truth of what\n     * docs are in the query. It gets notified of local and remote changes,\n     * and applies the query filters and limits to determine the most correct\n     * possible results.\n     */\n    public view: View\n  ) {}\n}\n\n/** Tracks a limbo resolution. */\nclass LimboResolution {\n  constructor(public key: DocumentKey) {}\n\n  /**\n   * Set to true once we've received a document. This is used in\n   * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\n   * decide whether it needs to manufacture a delete event for the target once\n   * the target is CURRENT.\n   */\n  receivedDocument: boolean = false;\n}\n\n/**\n * Interface implemented by EventManager to handle notifications from\n * SyncEngine.\n */\nexport interface SyncEngineListener {\n  /** Handles new view snapshots. */\n  onWatchChange(snapshots: ViewSnapshot[]): void;\n\n  /** Handles the failure of a query. */\n  onWatchError(query: Query, error: Error): void;\n\n  /** Handles a change in online state. */\n  onOnlineStateChange(onlineState: OnlineState): void;\n}\n\n/**\n * SyncEngine is the central controller in the client SDK architecture. It is\n * the glue code between the EventManager, LocalStore, and RemoteStore. Some of\n * SyncEngine's responsibilities include:\n * 1. Coordinating client requests and remote events between the EventManager\n *    and the local and remote data stores.\n * 2. Managing a View object for each query, providing the unified view between\n *    the local and remote data stores.\n * 3. Notifying the RemoteStore when the LocalStore has new mutations in its\n *    queue that need sending to the backend.\n *\n * The SyncEngine’s methods should only ever be called by methods running in the\n * global async queue.\n */\nexport class SyncEngine implements RemoteSyncer {\n  protected syncEngineListener: SyncEngineListener | null = null;\n\n  protected queryViewsByQuery = new ObjectMap<Query, QueryView>(\n    q => q.canonicalId(),\n    (l, r) => l.isEqual(r)\n  );\n  protected queriesByTarget = new Map<TargetId, Query[]>();\n  /**\n   * The keys of documents that are in limbo for which we haven't yet started a\n   * limbo resolution query.\n   */\n  private enqueuedLimboResolutions: DocumentKey[] = [];\n  /**\n   * Keeps track of the target ID for each document that is in limbo with an\n   * active target.\n   */\n  protected activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n    DocumentKey.comparator\n  );\n  /**\n   * Keeps track of the information about an active limbo resolution for each\n   * active target ID that was started for the purpose of limbo resolution.\n   */\n  protected activeLimboResolutionsByTarget = new Map<\n    TargetId,\n    LimboResolution\n  >();\n  protected limboDocumentRefs = new ReferenceSet();\n  /** Stores user completion handlers, indexed by User and BatchId. */\n  private mutationUserCallbacks = {} as {\n    [uidKey: string]: SortedMap<BatchId, Deferred<void>>;\n  };\n  /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n  private pendingWritesCallbacks = new Map<BatchId, Array<Deferred<void>>>();\n  private limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    protected localStore: LocalStore,\n    protected remoteStore: RemoteStore,\n    protected datastore: Datastore,\n    // PORTING NOTE: Manages state synchronization in multi-tab environments.\n    protected sharedClientState: SharedClientState,\n    private currentUser: User,\n    private maxConcurrentLimboResolutions: number\n  ) {}\n\n  get isPrimaryClient(): boolean {\n    return true;\n  }\n\n  /** Subscribes to SyncEngine notifications. Has to be called exactly once. */\n  subscribe(syncEngineListener: SyncEngineListener): void {\n    debugAssert(\n      syncEngineListener !== null,\n      'SyncEngine listener cannot be null'\n    );\n    debugAssert(\n      this.syncEngineListener === null,\n      'SyncEngine already has a subscriber.'\n    );\n\n    this.syncEngineListener = syncEngineListener;\n  }\n\n  /**\n   * Initiates the new listen, resolves promise when listen enqueued to the\n   * server. All the subsequent view snapshots or errors are sent to the\n   * subscribed handlers. Returns the initial snapshot.\n   */\n  async listen(query: Query): Promise<ViewSnapshot> {\n    this.assertSubscribed('listen()');\n\n    let targetId;\n    let viewSnapshot;\n\n    const queryView = this.queryViewsByQuery.get(query);\n    if (queryView) {\n      // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n      // already exists when EventManager calls us for the first time. This\n      // happens when the primary tab is already listening to this query on\n      // behalf of another tab and the user of the primary also starts listening\n      // to the query. EventManager will not have an assigned target ID in this\n      // case and calls `listen` to obtain this ID.\n      targetId = queryView.targetId;\n      this.sharedClientState.addLocalQueryTarget(targetId);\n      viewSnapshot = queryView.view.computeInitialSnapshot();\n    } else {\n      const targetData = await this.localStore.allocateTarget(query.toTarget());\n\n      const status = this.sharedClientState.addLocalQueryTarget(\n        targetData.targetId\n      );\n      targetId = targetData.targetId;\n      viewSnapshot = await this.initializeViewAndComputeSnapshot(\n        query,\n        targetId,\n        status === 'current'\n      );\n      if (this.isPrimaryClient) {\n        this.remoteStore.listen(targetData);\n      }\n    }\n\n    return viewSnapshot;\n  }\n\n  /**\n   * Registers a view for a previously unknown query and computes its initial\n   * snapshot.\n   */\n  protected async initializeViewAndComputeSnapshot(\n    query: Query,\n    targetId: TargetId,\n    current: boolean\n  ): Promise<ViewSnapshot> {\n    const queryResult = await this.localStore.executeQuery(\n      query,\n      /* usePreviousResults= */ true\n    );\n    const view = new View(query, queryResult.remoteKeys);\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\n    const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(\n      targetId,\n      current && this.onlineState !== OnlineState.Offline\n    );\n    const viewChange = view.applyChanges(\n      viewDocChanges,\n      /* updateLimboDocuments= */ this.isPrimaryClient,\n      synthesizedTargetChange\n    );\n    this.updateTrackedLimbos(targetId, viewChange.limboChanges);\n\n    debugAssert(\n      !!viewChange.snapshot,\n      'applyChanges for new view should always return a snapshot'\n    );\n\n    const data = new QueryView(query, targetId, view);\n    this.queryViewsByQuery.set(query, data);\n    if (this.queriesByTarget.has(targetId)) {\n      this.queriesByTarget.get(targetId)!.push(query);\n    } else {\n      this.queriesByTarget.set(targetId, [query]);\n    }\n    return viewChange.snapshot!;\n  }\n\n  /** Stops listening to the query. */\n  async unlisten(query: Query): Promise<void> {\n    this.assertSubscribed('unlisten()');\n\n    const queryView = this.queryViewsByQuery.get(query)!;\n    debugAssert(!!queryView, 'Trying to unlisten on query not found:' + query);\n\n    // Only clean up the query view and target if this is the only query mapped\n    // to the target.\n    const queries = this.queriesByTarget.get(queryView.targetId)!;\n    if (queries.length > 1) {\n      this.queriesByTarget.set(\n        queryView.targetId,\n        queries.filter(q => !q.isEqual(query))\n      );\n      this.queryViewsByQuery.delete(query);\n      return;\n    }\n\n    // No other queries are mapped to the target, clean up the query and the target.\n    if (this.isPrimaryClient) {\n      // We need to remove the local query target first to allow us to verify\n      // whether any other client is still interested in this target.\n      this.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n      const targetRemainsActive = this.sharedClientState.isActiveQueryTarget(\n        queryView.targetId\n      );\n\n      if (!targetRemainsActive) {\n        await this.localStore\n          .releaseTarget(queryView.targetId, /*keepPersistedTargetData=*/ false)\n          .then(() => {\n            this.sharedClientState.clearQueryState(queryView.targetId);\n            this.remoteStore.unlisten(queryView.targetId);\n            this.removeAndCleanupTarget(queryView.targetId);\n          })\n          .catch(ignoreIfPrimaryLeaseLoss);\n      }\n    } else {\n      this.removeAndCleanupTarget(queryView.targetId);\n      await this.localStore.releaseTarget(\n        queryView.targetId,\n        /*keepPersistedTargetData=*/ true\n      );\n    }\n  }\n\n  /**\n   * Initiates the write of local mutation batch which involves adding the\n   * writes to the mutation queue, notifying the remote store about new\n   * mutations and raising events for any changes this write caused.\n   *\n   * The promise returned by this call is resolved when the above steps\n   * have completed, *not* when the write was acked by the backend. The\n   * userCallback is resolved once the write was acked/rejected by the\n   * backend (or failed locally for any other reason).\n   */\n  async write(batch: Mutation[], userCallback: Deferred<void>): Promise<void> {\n    this.assertSubscribed('write()');\n\n    try {\n      const result = await this.localStore.localWrite(batch);\n      this.sharedClientState.addPendingMutation(result.batchId);\n      this.addMutationCallback(result.batchId, userCallback);\n      await this.emitNewSnapsAndNotifyLocalStore(result.changes);\n      await this.remoteStore.fillWritePipeline();\n    } catch (e) {\n      // If we can't persist the mutation, we reject the user callback and\n      // don't send the mutation. The user can then retry the write.\n      const error = wrapInUserErrorIfRecoverable(e, `Failed to persist write`);\n      userCallback.reject(error);\n    }\n  }\n\n  /**\n   * Takes an updateFunction in which a set of reads and writes can be performed\n   * atomically. In the updateFunction, the client can read and write values\n   * using the supplied transaction object. After the updateFunction, all\n   * changes will be committed. If a retryable error occurs (ex: some other\n   * client has changed any of the data referenced), then the updateFunction\n   * will be called again after a backoff. If the updateFunction still fails\n   * after all retries, then the transaction will be rejected.\n   *\n   * The transaction object passed to the updateFunction contains methods for\n   * accessing documents and collections. Unlike other datastore access, data\n   * accessed with the transaction will not reflect local changes that have not\n   * been committed. For this reason, it is required that all reads are\n   * performed before any writes. Transactions must be performed while online.\n   *\n   * The Deferred input is resolved when the transaction is fully committed.\n   */\n  runTransaction<T>(\n    asyncQueue: AsyncQueue,\n    updateFunction: (transaction: Transaction) => Promise<T>,\n    deferred: Deferred<T>\n  ): void {\n    new TransactionRunner<T>(\n      asyncQueue,\n      this.datastore,\n      updateFunction,\n      deferred\n    ).run();\n  }\n\n  async applyRemoteEvent(remoteEvent: RemoteEvent): Promise<void> {\n    this.assertSubscribed('applyRemoteEvent()');\n    try {\n      const changes = await this.localStore.applyRemoteEvent(remoteEvent);\n      // Update `receivedDocument` as appropriate for any limbo targets.\n      remoteEvent.targetChanges.forEach((targetChange, targetId) => {\n        const limboResolution = this.activeLimboResolutionsByTarget.get(\n          targetId\n        );\n        if (limboResolution) {\n          // Since this is a limbo resolution lookup, it's for a single document\n          // and it could be added, modified, or removed, but not a combination.\n          hardAssert(\n            targetChange.addedDocuments.size +\n              targetChange.modifiedDocuments.size +\n              targetChange.removedDocuments.size <=\n              1,\n            'Limbo resolution for single document contains multiple changes.'\n          );\n          if (targetChange.addedDocuments.size > 0) {\n            limboResolution.receivedDocument = true;\n          } else if (targetChange.modifiedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received change for limbo target document without add.'\n            );\n          } else if (targetChange.removedDocuments.size > 0) {\n            hardAssert(\n              limboResolution.receivedDocument,\n              'Received remove for limbo target document without add.'\n            );\n            limboResolution.receivedDocument = false;\n          } else {\n            // This was probably just a CURRENT targetChange or similar.\n          }\n        }\n      });\n      await this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  /**\n   * Applies an OnlineState change to the sync engine and notifies any views of\n   * the change.\n   */\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    this.assertSubscribed('applyOnlineStateChange()');\n    const newViewSnapshots = [] as ViewSnapshot[];\n    this.queryViewsByQuery.forEach((query, queryView) => {\n      const viewChange = queryView.view.applyOnlineStateChange(onlineState);\n      debugAssert(\n        viewChange.limboChanges.length === 0,\n        'OnlineState should not affect limbo documents.'\n      );\n      if (viewChange.snapshot) {\n        newViewSnapshots.push(viewChange.snapshot);\n      }\n    });\n    this.syncEngineListener!.onOnlineStateChange(onlineState);\n    this.syncEngineListener!.onWatchChange(newViewSnapshots);\n    this.onlineState = onlineState;\n  }\n\n  async rejectListen(targetId: TargetId, err: FirestoreError): Promise<void> {\n    this.assertSubscribed('rejectListens()');\n\n    // PORTING NOTE: Multi-tab only.\n    this.sharedClientState.updateQueryState(targetId, 'rejected', err);\n\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    const limboKey = limboResolution && limboResolution.key;\n    if (limboKey) {\n      // TODO(klimt): We really only should do the following on permission\n      // denied errors, but we don't have the cause code here.\n\n      // It's a limbo doc. Create a synthetic event saying it was deleted.\n      // This is kind of a hack. Ideally, we would have a method in the local\n      // store to purge a document. However, it would be tricky to keep all of\n      // the local store's invariants with another method.\n      let documentUpdates = new SortedMap<DocumentKey, MaybeDocument>(\n        DocumentKey.comparator\n      );\n      documentUpdates = documentUpdates.insert(\n        limboKey,\n        new NoDocument(limboKey, SnapshotVersion.min())\n      );\n      const resolvedLimboDocuments = documentKeySet().add(limboKey);\n      const event = new RemoteEvent(\n        SnapshotVersion.min(),\n        /* targetChanges= */ new Map<TargetId, TargetChange>(),\n        /* targetMismatches= */ new SortedSet<TargetId>(primitiveComparator),\n        documentUpdates,\n        resolvedLimboDocuments\n      );\n\n      await this.applyRemoteEvent(event);\n\n      // Since this query failed, we won't want to manually unlisten to it.\n      // We only remove it from bookkeeping after we successfully applied the\n      // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\n      // this query when the RemoteStore restarts the Watch stream, which should\n      // re-trigger the target failure.\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(\n        limboKey\n      );\n      this.activeLimboResolutionsByTarget.delete(targetId);\n      this.pumpEnqueuedLimboResolutions();\n    } else {\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => this.removeAndCleanupTarget(targetId, err))\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n\n  async applySuccessfulWrite(\n    mutationBatchResult: MutationBatchResult\n  ): Promise<void> {\n    this.assertSubscribed('applySuccessfulWrite()');\n\n    const batchId = mutationBatchResult.batch.batchId;\n\n    try {\n      const changes = await this.localStore.acknowledgeBatch(\n        mutationBatchResult\n      );\n\n      // The local store may or may not be able to apply the write result and\n      // raise events immediately (depending on whether the watcher is caught\n      // up), so we raise user callbacks first so that they consistently happen\n      // before listen events.\n      this.processUserCallback(batchId, /*error=*/ null);\n      this.triggerPendingWritesCallbacks(batchId);\n\n      this.sharedClientState.updateMutationState(batchId, 'acknowledged');\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  async rejectFailedWrite(\n    batchId: BatchId,\n    error: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('rejectFailedWrite()');\n\n    try {\n      const changes = await this.localStore.rejectBatch(batchId);\n\n      // The local store may or may not be able to apply the write result and\n      // raise events immediately (depending on whether the watcher is caught up),\n      // so we raise user callbacks first so that they consistently happen before\n      // listen events.\n      this.processUserCallback(batchId, error);\n      this.triggerPendingWritesCallbacks(batchId);\n\n      this.sharedClientState.updateMutationState(batchId, 'rejected', error);\n      await this.emitNewSnapsAndNotifyLocalStore(changes);\n    } catch (error) {\n      await ignoreIfPrimaryLeaseLoss(error);\n    }\n  }\n\n  /**\n   * Registers a user callback that resolves when all pending mutations at the moment of calling\n   * are acknowledged .\n   */\n  async registerPendingWritesCallback(callback: Deferred<void>): Promise<void> {\n    if (!this.remoteStore.canUseNetwork()) {\n      logDebug(\n        LOG_TAG,\n        'The network is disabled. The task returned by ' +\n          \"'awaitPendingWrites()' will not complete until the network is enabled.\"\n      );\n    }\n\n    try {\n      const highestBatchId = await this.localStore.getHighestUnacknowledgedBatchId();\n      if (highestBatchId === BATCHID_UNKNOWN) {\n        // Trigger the callback right away if there is no pending writes at the moment.\n        callback.resolve();\n        return;\n      }\n\n      const callbacks = this.pendingWritesCallbacks.get(highestBatchId) || [];\n      callbacks.push(callback);\n      this.pendingWritesCallbacks.set(highestBatchId, callbacks);\n    } catch (e) {\n      const firestoreError = wrapInUserErrorIfRecoverable(\n        e,\n        'Initialization of waitForPendingWrites() operation failed'\n      );\n      callback.reject(firestoreError);\n    }\n  }\n\n  /**\n   * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\n   * if there are any.\n   */\n  private triggerPendingWritesCallbacks(batchId: BatchId): void {\n    (this.pendingWritesCallbacks.get(batchId) || []).forEach(callback => {\n      callback.resolve();\n    });\n\n    this.pendingWritesCallbacks.delete(batchId);\n  }\n\n  /** Reject all outstanding callbacks waiting for pending writes to complete. */\n  private rejectOutstandingPendingWritesCallbacks(errorMessage: string): void {\n    this.pendingWritesCallbacks.forEach(callbacks => {\n      callbacks.forEach(callback => {\n        callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n      });\n    });\n\n    this.pendingWritesCallbacks.clear();\n  }\n\n  private addMutationCallback(\n    batchId: BatchId,\n    callback: Deferred<void>\n  ): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n    if (!newCallbacks) {\n      newCallbacks = new SortedMap<BatchId, Deferred<void>>(\n        primitiveComparator\n      );\n    }\n    newCallbacks = newCallbacks.insert(batchId, callback);\n    this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n  }\n\n  /**\n   * Resolves or rejects the user callback for the given batch and then discards\n   * it.\n   */\n  protected processUserCallback(batchId: BatchId, error: Error | null): void {\n    let newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];\n\n    // NOTE: Mutations restored from persistence won't have callbacks, so it's\n    // okay for there to be no callback for this ID.\n    if (newCallbacks) {\n      const callback = newCallbacks.get(batchId);\n      if (callback) {\n        debugAssert(\n          batchId === newCallbacks.minKey(),\n          'Mutation callbacks processed out-of-order?'\n        );\n        if (error) {\n          callback.reject(error);\n        } else {\n          callback.resolve();\n        }\n        newCallbacks = newCallbacks.remove(batchId);\n      }\n      this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;\n    }\n  }\n\n  protected removeAndCleanupTarget(\n    targetId: number,\n    error: Error | null = null\n  ): void {\n    this.sharedClientState.removeLocalQueryTarget(targetId);\n\n    debugAssert(\n      this.queriesByTarget.has(targetId) &&\n        this.queriesByTarget.get(targetId)!.length !== 0,\n      `There are no queries mapped to target id ${targetId}`\n    );\n\n    for (const query of this.queriesByTarget.get(targetId)!) {\n      this.queryViewsByQuery.delete(query);\n      if (error) {\n        this.syncEngineListener!.onWatchError(query, error);\n      }\n    }\n\n    this.queriesByTarget.delete(targetId);\n\n    if (this.isPrimaryClient) {\n      const limboKeys = this.limboDocumentRefs.removeReferencesForId(targetId);\n      limboKeys.forEach(limboKey => {\n        const isReferenced = this.limboDocumentRefs.containsKey(limboKey);\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboKey);\n        }\n      });\n    }\n  }\n\n  private removeLimboTarget(key: DocumentKey): void {\n    // It's possible that the target already got removed because the query failed. In that case,\n    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n    const limboTargetId = this.activeLimboTargetsByKey.get(key);\n    if (limboTargetId === null) {\n      // This target already got removed, because the query failed.\n      return;\n    }\n\n    this.remoteStore.unlisten(limboTargetId);\n    this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.remove(key);\n    this.activeLimboResolutionsByTarget.delete(limboTargetId);\n    this.pumpEnqueuedLimboResolutions();\n  }\n\n  protected updateTrackedLimbos(\n    targetId: TargetId,\n    limboChanges: LimboDocumentChange[]\n  ): void {\n    for (const limboChange of limboChanges) {\n      if (limboChange instanceof AddedLimboDocument) {\n        this.limboDocumentRefs.addReference(limboChange.key, targetId);\n        this.trackLimboChange(limboChange);\n      } else if (limboChange instanceof RemovedLimboDocument) {\n        logDebug(LOG_TAG, 'Document no longer in limbo: ' + limboChange.key);\n        this.limboDocumentRefs.removeReference(limboChange.key, targetId);\n        const isReferenced = this.limboDocumentRefs.containsKey(\n          limboChange.key\n        );\n        if (!isReferenced) {\n          // We removed the last reference for this key\n          this.removeLimboTarget(limboChange.key);\n        }\n      } else {\n        fail('Unknown limbo change: ' + JSON.stringify(limboChange));\n      }\n    }\n  }\n\n  private trackLimboChange(limboChange: AddedLimboDocument): void {\n    const key = limboChange.key;\n    if (!this.activeLimboTargetsByKey.get(key)) {\n      logDebug(LOG_TAG, 'New document in limbo: ' + key);\n      this.enqueuedLimboResolutions.push(key);\n      this.pumpEnqueuedLimboResolutions();\n    }\n  }\n\n  /**\n   * Starts listens for documents in limbo that are enqueued for resolution,\n   * subject to a maximum number of concurrent resolutions.\n   *\n   * Without bounding the number of concurrent resolutions, the server can fail\n   * with \"resource exhausted\" errors which can lead to pathological client\n   * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\n   */\n  private pumpEnqueuedLimboResolutions(): void {\n    while (\n      this.enqueuedLimboResolutions.length > 0 &&\n      this.activeLimboTargetsByKey.size < this.maxConcurrentLimboResolutions\n    ) {\n      const key = this.enqueuedLimboResolutions.shift()!;\n      const limboTargetId = this.limboTargetIdGenerator.next();\n      this.activeLimboResolutionsByTarget.set(\n        limboTargetId,\n        new LimboResolution(key)\n      );\n      this.activeLimboTargetsByKey = this.activeLimboTargetsByKey.insert(\n        key,\n        limboTargetId\n      );\n      this.remoteStore.listen(\n        new TargetData(\n          Query.atPath(key.path).toTarget(),\n          limboTargetId,\n          TargetPurpose.LimboResolution,\n          ListenSequence.INVALID\n        )\n      );\n    }\n  }\n\n  // Visible for testing\n  activeLimboDocumentResolutions(): SortedMap<DocumentKey, TargetId> {\n    return this.activeLimboTargetsByKey;\n  }\n\n  // Visible for testing\n  enqueuedLimboDocumentResolutions(): DocumentKey[] {\n    return this.enqueuedLimboResolutions;\n  }\n\n  protected async emitNewSnapsAndNotifyLocalStore(\n    changes: MaybeDocumentMap,\n    remoteEvent?: RemoteEvent\n  ): Promise<void> {\n    const newSnaps: ViewSnapshot[] = [];\n    const docChangesInAllViews: LocalViewChanges[] = [];\n    const queriesProcessed: Array<Promise<void>> = [];\n\n    this.queryViewsByQuery.forEach((_, queryView) => {\n      queriesProcessed.push(\n        Promise.resolve()\n          .then(() => {\n            const viewDocChanges = queryView.view.computeDocChanges(changes);\n            if (!viewDocChanges.needsRefill) {\n              return viewDocChanges;\n            }\n            // The query has a limit and some docs were removed, so we need\n            // to re-run the query against the local store to make sure we\n            // didn't lose any good docs that had been past the limit.\n            return this.localStore\n              .executeQuery(queryView.query, /* usePreviousResults= */ false)\n              .then(({ documents }) => {\n                return queryView.view.computeDocChanges(\n                  documents,\n                  viewDocChanges\n                );\n              });\n          })\n          .then((viewDocChanges: ViewDocumentChanges) => {\n            const targetChange =\n              remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n            const viewChange = queryView.view.applyChanges(\n              viewDocChanges,\n              /* updateLimboDocuments= */ this.isPrimaryClient,\n              targetChange\n            );\n            this.updateTrackedLimbos(\n              queryView.targetId,\n              viewChange.limboChanges\n            );\n            if (viewChange.snapshot) {\n              if (this.isPrimaryClient) {\n                this.sharedClientState.updateQueryState(\n                  queryView.targetId,\n                  viewChange.snapshot.fromCache ? 'not-current' : 'current'\n                );\n              }\n\n              newSnaps.push(viewChange.snapshot);\n              const docChanges = LocalViewChanges.fromSnapshot(\n                queryView.targetId,\n                viewChange.snapshot\n              );\n              docChangesInAllViews.push(docChanges);\n            }\n          })\n      );\n    });\n\n    await Promise.all(queriesProcessed);\n    this.syncEngineListener!.onWatchChange(newSnaps);\n    await this.localStore.notifyLocalViewChanges(docChangesInAllViews);\n  }\n\n  protected assertSubscribed(fnName: string): void {\n    debugAssert(\n      this.syncEngineListener !== null,\n      'Trying to call ' + fnName + ' before calling subscribe().'\n    );\n  }\n\n  async handleCredentialChange(user: User): Promise<void> {\n    const userChanged = !this.currentUser.isEqual(user);\n\n    if (userChanged) {\n      logDebug(LOG_TAG, 'User change. New user:', user.toKey());\n\n      const result = await this.localStore.handleUserChange(user);\n      this.currentUser = user;\n\n      // Fails tasks waiting for pending writes requested by previous user.\n      this.rejectOutstandingPendingWritesCallbacks(\n        \"'waitForPendingWrites' promise is rejected due to a user change.\"\n      );\n      // TODO(b/114226417): Consider calling this only in the primary tab.\n      this.sharedClientState.handleUserChange(\n        user,\n        result.removedBatchIds,\n        result.addedBatchIds\n      );\n      await this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments);\n    }\n  }\n\n  enableNetwork(): Promise<void> {\n    return this.remoteStore.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    return this.remoteStore.disableNetwork();\n  }\n\n  getRemoteKeysForTarget(targetId: TargetId): DocumentKeySet {\n    const limboResolution = this.activeLimboResolutionsByTarget.get(targetId);\n    if (limboResolution && limboResolution.receivedDocument) {\n      return documentKeySet().add(limboResolution.key);\n    } else {\n      let keySet = documentKeySet();\n      const queries = this.queriesByTarget.get(targetId);\n      if (!queries) {\n        return keySet;\n      }\n      for (const query of queries) {\n        const queryView = this.queryViewsByQuery.get(query);\n        debugAssert(!!queryView, `No query view found for ${query}`);\n        keySet = keySet.unionWith(queryView.view.syncedDocuments);\n      }\n      return keySet;\n    }\n  }\n}\n\n/**\n * An impplementation of SyncEngine that implement SharedClientStateSyncer for\n * Multi-Tab synchronization.\n */\n// PORTING NOTE: Web only\nexport class MultiTabSyncEngine extends SyncEngine\n  implements SharedClientStateSyncer {\n  // The primary state is set to `true` or `false` immediately after Firestore\n  // startup. In the interim, a client should only be considered primary if\n  // `isPrimary` is true.\n  private _isPrimaryClient: undefined | boolean = undefined;\n\n  constructor(\n    protected localStore: MultiTabLocalStore,\n    remoteStore: RemoteStore,\n    datastore: Datastore,\n    sharedClientState: SharedClientState,\n    currentUser: User,\n    maxConcurrentLimboResolutions: number\n  ) {\n    super(\n      localStore,\n      remoteStore,\n      datastore,\n      sharedClientState,\n      currentUser,\n      maxConcurrentLimboResolutions\n    );\n  }\n\n  get isPrimaryClient(): boolean {\n    return this._isPrimaryClient === true;\n  }\n\n  enableNetwork(): Promise<void> {\n    this.localStore.setNetworkEnabled(true);\n    return super.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.localStore.setNetworkEnabled(false);\n    return super.disableNetwork();\n  }\n\n  /**\n   * Reconcile the list of synced documents in an existing view with those\n   * from persistence.\n   */\n  private async synchronizeViewAndComputeSnapshot(\n    queryView: QueryView\n  ): Promise<ViewChange> {\n    const queryResult = await this.localStore.executeQuery(\n      queryView.query,\n      /* usePreviousResults= */ true\n    );\n    const viewSnapshot = queryView.view.synchronizeWithPersistedState(\n      queryResult\n    );\n    if (this._isPrimaryClient) {\n      this.updateTrackedLimbos(queryView.targetId, viewSnapshot.limboChanges);\n    }\n    return viewSnapshot;\n  }\n\n  applyOnlineStateChange(\n    onlineState: OnlineState,\n    source: OnlineStateSource\n  ): void {\n    // If we are the primary client, the online state of all clients only\n    // depends on the online state of the local RemoteStore.\n    if (this.isPrimaryClient && source === OnlineStateSource.RemoteStore) {\n      super.applyOnlineStateChange(onlineState, source);\n      this.sharedClientState.setOnlineState(onlineState);\n    }\n\n    // If we are the secondary client, we explicitly ignore the remote store's\n    // online state (the local client may go offline, even though the primary\n    // tab remains online) and only apply the primary tab's online state from\n    // SharedClientState.\n    if (\n      !this.isPrimaryClient &&\n      source === OnlineStateSource.SharedClientState\n    ) {\n      super.applyOnlineStateChange(onlineState, source);\n    }\n  }\n\n  async applyBatchState(\n    batchId: BatchId,\n    batchState: MutationBatchState,\n    error?: FirestoreError\n  ): Promise<void> {\n    this.assertSubscribed('applyBatchState()');\n    const documents = await this.localStore.lookupMutationDocuments(batchId);\n\n    if (documents === null) {\n      // A throttled tab may not have seen the mutation before it was completed\n      // and removed from the mutation queue, in which case we won't have cached\n      // the affected documents. In this case we can safely ignore the update\n      // since that means we didn't apply the mutation locally at all (if we\n      // had, we would have cached the affected documents), and so we will just\n      // see any resulting document changes via normal remote document updates\n      // as applicable.\n      logDebug(LOG_TAG, 'Cannot apply mutation batch with id: ' + batchId);\n      return;\n    }\n\n    if (batchState === 'pending') {\n      // If we are the primary client, we need to send this write to the\n      // backend. Secondary clients will ignore these writes since their remote\n      // connection is disabled.\n      await this.remoteStore.fillWritePipeline();\n    } else if (batchState === 'acknowledged' || batchState === 'rejected') {\n      // NOTE: Both these methods are no-ops for batches that originated from\n      // other clients.\n      this.processUserCallback(batchId, error ? error : null);\n      this.localStore.removeCachedMutationBatchMetadata(batchId);\n    } else {\n      fail(`Unknown batchState: ${batchState}`);\n    }\n\n    await this.emitNewSnapsAndNotifyLocalStore(documents);\n  }\n\n  async applyPrimaryState(isPrimary: boolean): Promise<void> {\n    if (isPrimary === true && this._isPrimaryClient !== true) {\n      // Secondary tabs only maintain Views for their local listeners and the\n      // Views internal state may not be 100% populated (in particular\n      // secondary tabs don't track syncedDocuments, the set of documents the\n      // server considers to be in the target). So when a secondary becomes\n      // primary, we need to need to make sure that all views for all targets\n      // match the state on disk.\n      const activeTargets = this.sharedClientState.getAllActiveQueryTargets();\n      const activeQueries = await this.synchronizeQueryViewsAndRaiseSnapshots(\n        activeTargets.toArray(),\n        /*transitionToPrimary=*/ true\n      );\n      this._isPrimaryClient = true;\n      await this.remoteStore.applyPrimaryState(true);\n      for (const targetData of activeQueries) {\n        this.remoteStore.listen(targetData);\n      }\n    } else if (isPrimary === false && this._isPrimaryClient !== false) {\n      const activeTargets: TargetId[] = [];\n\n      let p = Promise.resolve();\n      this.queriesByTarget.forEach((_, targetId) => {\n        if (this.sharedClientState.isLocalQueryTarget(targetId)) {\n          activeTargets.push(targetId);\n        } else {\n          p = p.then(() => {\n            this.removeAndCleanupTarget(targetId);\n            return this.localStore.releaseTarget(\n              targetId,\n              /*keepPersistedTargetData=*/ true\n            );\n          });\n        }\n        this.remoteStore.unlisten(targetId);\n      });\n      await p;\n\n      await this.synchronizeQueryViewsAndRaiseSnapshots(\n        activeTargets,\n        /*transitionToPrimary=*/ false\n      );\n      this.resetLimboDocuments();\n      this._isPrimaryClient = false;\n      await this.remoteStore.applyPrimaryState(false);\n    }\n  }\n\n  private resetLimboDocuments(): void {\n    this.activeLimboResolutionsByTarget.forEach((_, targetId) => {\n      this.remoteStore.unlisten(targetId);\n    });\n    this.limboDocumentRefs.removeAllReferences();\n    this.activeLimboResolutionsByTarget = new Map<TargetId, LimboResolution>();\n    this.activeLimboTargetsByKey = new SortedMap<DocumentKey, TargetId>(\n      DocumentKey.comparator\n    );\n  }\n\n  /**\n   * Reconcile the query views of the provided query targets with the state from\n   * persistence. Raises snapshots for any changes that affect the local\n   * client and returns the updated state of all target's query data.\n   *\n   * @param targets the list of targets with views that need to be recomputed\n   * @param transitionToPrimary `true` iff the tab transitions from a secondary\n   * tab to a primary tab\n   */\n  private async synchronizeQueryViewsAndRaiseSnapshots(\n    targets: TargetId[],\n    transitionToPrimary: boolean\n  ): Promise<TargetData[]> {\n    const activeQueries: TargetData[] = [];\n    const newViewSnapshots: ViewSnapshot[] = [];\n    for (const targetId of targets) {\n      let targetData: TargetData;\n      const queries = this.queriesByTarget.get(targetId);\n\n      if (queries && queries.length !== 0) {\n        // For queries that have a local View, we fetch their current state\n        // from LocalStore (as the resume token and the snapshot version\n        // might have changed) and reconcile their views with the persisted\n        // state (the list of syncedDocuments may have gotten out of sync).\n        targetData = await this.localStore.allocateTarget(\n          queries[0].toTarget()\n        );\n\n        for (const query of queries) {\n          const queryView = this.queryViewsByQuery.get(query);\n          debugAssert(!!queryView, `No query view found for ${query}`);\n\n          const viewChange = await this.synchronizeViewAndComputeSnapshot(\n            queryView\n          );\n          if (viewChange.snapshot) {\n            newViewSnapshots.push(viewChange.snapshot);\n          }\n        }\n      } else {\n        debugAssert(\n          transitionToPrimary,\n          'A secondary tab should never have an active view without an active target.'\n        );\n        // For queries that never executed on this client, we need to\n        // allocate the target in LocalStore and initialize a new View.\n        const target = await this.localStore.getTarget(targetId);\n        debugAssert(!!target, `Target for id ${targetId} not found`);\n        targetData = await this.localStore.allocateTarget(target);\n        await this.initializeViewAndComputeSnapshot(\n          this.synthesizeTargetToQuery(target!),\n          targetId,\n          /*current=*/ false\n        );\n      }\n\n      activeQueries.push(targetData!);\n    }\n\n    this.syncEngineListener!.onWatchChange(newViewSnapshots);\n    return activeQueries;\n  }\n\n  /**\n   * Creates a `Query` object from the specified `Target`. There is no way to\n   * obtain the original `Query`, so we synthesize a `Query` from the `Target`\n   * object.\n   *\n   * The synthesized result might be different from the original `Query`, but\n   * since the synthesized `Query` should return the same results as the\n   * original one (only the presentation of results might differ), the potential\n   * difference will not cause issues.\n   */\n  private synthesizeTargetToQuery(target: Target): Query {\n    return new Query(\n      target.path,\n      target.collectionGroup,\n      target.orderBy,\n      target.filters,\n      target.limit,\n      LimitType.First,\n      target.startAt,\n      target.endAt\n    );\n  }\n\n  getActiveClients(): Promise<ClientId[]> {\n    return this.localStore.getActiveClients();\n  }\n\n  async applyTargetState(\n    targetId: TargetId,\n    state: QueryTargetState,\n    error?: FirestoreError\n  ): Promise<void> {\n    if (this._isPrimaryClient) {\n      // If we receive a target state notification via WebStorage, we are\n      // either already secondary or another tab has taken the primary lease.\n      logDebug(LOG_TAG, 'Ignoring unexpected query state notification.');\n      return;\n    }\n\n    if (this.queriesByTarget.has(targetId)) {\n      switch (state) {\n        case 'current':\n        case 'not-current': {\n          const changes = await this.localStore.getNewDocumentChanges();\n          const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(\n            targetId,\n            state === 'current'\n          );\n          await this.emitNewSnapsAndNotifyLocalStore(\n            changes,\n            synthesizedRemoteEvent\n          );\n          break;\n        }\n        case 'rejected': {\n          await this.localStore.releaseTarget(\n            targetId,\n            /* keepPersistedTargetData */ true\n          );\n          this.removeAndCleanupTarget(targetId, error);\n          break;\n        }\n        default:\n          fail('Unexpected target state: ' + state);\n      }\n    }\n  }\n\n  async applyActiveTargetsChange(\n    added: TargetId[],\n    removed: TargetId[]\n  ): Promise<void> {\n    if (!this._isPrimaryClient) {\n      return;\n    }\n\n    for (const targetId of added) {\n      if (this.queriesByTarget.has(targetId)) {\n        // A target might have been added in a previous attempt\n        logDebug(LOG_TAG, 'Adding an already active target ' + targetId);\n        continue;\n      }\n\n      const target = await this.localStore.getTarget(targetId);\n      debugAssert(\n        !!target,\n        `Query data for active target ${targetId} not found`\n      );\n      const targetData = await this.localStore.allocateTarget(target);\n      await this.initializeViewAndComputeSnapshot(\n        this.synthesizeTargetToQuery(target),\n        targetData.targetId,\n        /*current=*/ false\n      );\n      this.remoteStore.listen(targetData);\n    }\n\n    for (const targetId of removed) {\n      // Check that the target is still active since the target might have been\n      // removed if it has been rejected by the backend.\n      if (!this.queriesByTarget.has(targetId)) {\n        continue;\n      }\n\n      // Release queries that are still active.\n      await this.localStore\n        .releaseTarget(targetId, /* keepPersistedTargetData */ false)\n        .then(() => {\n          this.remoteStore.unlisten(targetId);\n          this.removeAndCleanupTarget(targetId);\n        })\n        .catch(ignoreIfPrimaryLeaseLoss);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { EventHandler } from '../util/misc';\nimport { ObjectMap } from '../util/obj_map';\nimport { Query } from './query';\nimport { SyncEngine, SyncEngineListener } from './sync_engine';\nimport { OnlineState } from './types';\nimport { ChangeType, DocumentViewChange, ViewSnapshot } from './view_snapshot';\nimport { wrapInUserErrorIfRecoverable } from '../util/async_queue';\n\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nclass QueryListenersInfo {\n  viewSnap: ViewSnapshot | undefined = undefined;\n  listeners: QueryListener[] = [];\n}\n\n/**\n * Interface for handling events from the EventManager.\n */\nexport interface Observer<T> {\n  next: EventHandler<T>;\n  error: EventHandler<Error>;\n}\n\n/**\n * EventManager is responsible for mapping queries to query event emitters.\n * It handles \"fan-out\". -- Identical queries will re-use the same watch on the\n * backend.\n */\nexport class EventManager implements SyncEngineListener {\n  private queries = new ObjectMap<Query, QueryListenersInfo>(\n    q => q.canonicalId(),\n    (l, r) => l.isEqual(r)\n  );\n\n  private onlineState = OnlineState.Unknown;\n\n  private snapshotsInSyncListeners: Set<Observer<void>> = new Set();\n\n  constructor(private syncEngine: SyncEngine) {\n    this.syncEngine.subscribe(this);\n  }\n\n  async listen(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let firstListen = false;\n\n    let queryInfo = this.queries.get(query);\n    if (!queryInfo) {\n      firstListen = true;\n      queryInfo = new QueryListenersInfo();\n    }\n\n    if (firstListen) {\n      try {\n        queryInfo.viewSnap = await this.syncEngine.listen(query);\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Initialization of query '${listener.query}' failed`\n        );\n        listener.onError(firestoreError);\n        return;\n      }\n    }\n\n    this.queries.set(query, queryInfo);\n    queryInfo.listeners.push(listener);\n\n    // Run global snapshot listeners if a consistent snapshot has been emitted.\n    const raisedEvent = listener.applyOnlineStateChange(this.onlineState);\n    debugAssert(\n      !raisedEvent,\n      \"applyOnlineStateChange() shouldn't raise an event for brand-new listeners.\"\n    );\n\n    if (queryInfo.viewSnap) {\n      const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n      if (raisedEvent) {\n        this.raiseSnapshotsInSyncEvent();\n      }\n    }\n  }\n\n  async unlisten(listener: QueryListener): Promise<void> {\n    const query = listener.query;\n    let lastListen = false;\n\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      const i = queryInfo.listeners.indexOf(listener);\n      if (i >= 0) {\n        queryInfo.listeners.splice(i, 1);\n        lastListen = queryInfo.listeners.length === 0;\n      }\n    }\n\n    if (lastListen) {\n      this.queries.delete(query);\n      return this.syncEngine.unlisten(query);\n    }\n  }\n\n  onWatchChange(viewSnaps: ViewSnapshot[]): void {\n    let raisedEvent = false;\n    for (const viewSnap of viewSnaps) {\n      const query = viewSnap.query;\n      const queryInfo = this.queries.get(query);\n      if (queryInfo) {\n        for (const listener of queryInfo.listeners) {\n          if (listener.onViewSnapshot(viewSnap)) {\n            raisedEvent = true;\n          }\n        }\n        queryInfo.viewSnap = viewSnap;\n      }\n    }\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  onWatchError(query: Query, error: Error): void {\n    const queryInfo = this.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        listener.onError(error);\n      }\n    }\n\n    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n    // after an error.\n    this.queries.delete(query);\n  }\n\n  onOnlineStateChange(onlineState: OnlineState): void {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    this.queries.forEach((_, queryInfo) => {\n      for (const listener of queryInfo.listeners) {\n        // Run global snapshot listeners if a consistent snapshot has been emitted.\n        if (listener.applyOnlineStateChange(onlineState)) {\n          raisedEvent = true;\n        }\n      }\n    });\n    if (raisedEvent) {\n      this.raiseSnapshotsInSyncEvent();\n    }\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.add(observer);\n    // Immediately fire an initial event, indicating all existing listeners\n    // are in-sync.\n    observer.next();\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.snapshotsInSyncListeners.delete(observer);\n  }\n\n  // Call all global snapshot listeners that have been set.\n  private raiseSnapshotsInSyncEvent(): void {\n    this.snapshotsInSyncListeners.forEach(observer => {\n      observer.next();\n    });\n  }\n}\n\nexport interface ListenOptions {\n  /** Raise events even when only the metadata changes */\n  readonly includeMetadataChanges?: boolean;\n\n  /**\n   * Wait for a sync with the server when online, but still raise events while\n   * offline.\n   */\n  readonly waitForSyncWhenOnline?: boolean;\n}\n\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nexport class QueryListener {\n  /**\n   * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n   * observer. This flag is set to true once we've actually raised an event.\n   */\n  private raisedInitialEvent = false;\n\n  private options: ListenOptions;\n\n  private snap: ViewSnapshot | null = null;\n\n  private onlineState = OnlineState.Unknown;\n\n  constructor(\n    readonly query: Query,\n    private queryObserver: Observer<ViewSnapshot>,\n    options?: ListenOptions\n  ) {\n    this.options = options || {};\n  }\n\n  /**\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\n   * if applicable (depending on what changed, whether the user has opted into\n   * metadata-only changes, etc.). Returns true if a user-facing event was\n   * indeed raised.\n   */\n  onViewSnapshot(snap: ViewSnapshot): boolean {\n    debugAssert(\n      snap.docChanges.length > 0 || snap.syncStateChanged,\n      'We got a new snapshot with no changes?'\n    );\n\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges: DocumentViewChange[] = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== ChangeType.Metadata) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = new ViewSnapshot(\n        snap.query,\n        snap.docs,\n        snap.oldDocs,\n        docChanges,\n        snap.mutatedKeys,\n        snap.fromCache,\n        snap.syncStateChanged,\n        /* excludesMetadataChanges= */ true\n      );\n    }\n    let raisedEvent = false;\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n\n    this.snap = snap;\n    return raisedEvent;\n  }\n\n  onError(error: Error): void {\n    this.queryObserver.error(error);\n  }\n\n  /** Returns whether a snapshot was raised. */\n  applyOnlineStateChange(onlineState: OnlineState): boolean {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    if (\n      this.snap &&\n      !this.raisedInitialEvent &&\n      this.shouldRaiseInitialEvent(this.snap, onlineState)\n    ) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n    return raisedEvent;\n  }\n\n  private shouldRaiseInitialEvent(\n    snap: ViewSnapshot,\n    onlineState: OnlineState\n  ): boolean {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Determining whether to raise first event but already had first event'\n    );\n\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n\n    // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== OnlineState.Offline;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      debugAssert(\n        snap.fromCache,\n        'Waiting for sync, but snapshot is not from cache'\n      );\n      return false;\n    }\n\n    // Raise data from cache if we have any documents or we are offline\n    return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;\n  }\n\n  private shouldRaiseEvent(snap: ViewSnapshot): boolean {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n\n    const hasPendingWritesChanged =\n      this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    }\n\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n\n  private raiseInitialEvent(snap: ViewSnapshot): void {\n    debugAssert(\n      !this.raisedInitialEvent,\n      'Trying to raise initial events for second time'\n    );\n    snap = ViewSnapshot.fromInitialDocuments(\n      snap.query,\n      snap.docs,\n      snap.mutatedKeys,\n      snap.fromCache\n    );\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryEngine } from './query_engine';\nimport { LocalDocumentsView } from './local_documents_view';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { LimitType, Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { Document } from '../model/document';\nimport { debugAssert } from '../util/assert';\nimport { getLogLevel, LogLevel, logDebug } from '../util/log';\nimport { SortedSet } from '../util/sorted_set';\n\n// TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.\n\n/**\n * A query engine that takes advantage of the target document mapping in the\n * QueryCache. The IndexFreeQueryEngine optimizes query execution by only\n * reading the documents that previously matched a query plus any documents that were\n * edited after the query was last listened to.\n *\n * There are some cases where Index-Free queries are not guaranteed to produce\n * the same results as full collection scans. In these cases, the\n * IndexFreeQueryEngine falls back to full query processing. These cases are:\n *\n * - Limit queries where a document that matched the query previously no longer\n *   matches the query.\n *\n * - Limit queries where a document edit may cause the document to sort below\n *   another document that is in the local cache.\n *\n * - Queries that have never been CURRENT or free of Limbo documents.\n */\nexport class IndexFreeQueryEngine implements QueryEngine {\n  private localDocumentsView: LocalDocumentsView | undefined;\n\n  setLocalDocumentsView(localDocuments: LocalDocumentsView): void {\n    this.localDocumentsView = localDocuments;\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    lastLimboFreeSnapshotVersion: SnapshotVersion,\n    remoteKeys: DocumentKeySet\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      this.localDocumentsView !== undefined,\n      'setLocalDocumentsView() not called'\n    );\n\n    // Queries that match all documents don't benefit from using\n    // IndexFreeQueries. It is more efficient to scan all documents in a\n    // collection, rather than to perform individual lookups.\n    if (query.matchesAllDocuments()) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    return this.localDocumentsView!.getDocuments(transaction, remoteKeys).next(\n      documents => {\n        const previousResults = this.applyQuery(query, documents);\n\n        if (\n          (query.hasLimitToFirst() || query.hasLimitToLast()) &&\n          this.needsRefill(\n            query.limitType,\n            previousResults,\n            remoteKeys,\n            lastLimboFreeSnapshotVersion\n          )\n        ) {\n          return this.executeFullCollectionScan(transaction, query);\n        }\n\n        if (getLogLevel() <= LogLevel.DEBUG) {\n          logDebug(\n            'IndexFreeQueryEngine',\n            'Re-using previous result from %s to execute query: %s',\n            lastLimboFreeSnapshotVersion.toString(),\n            query.toString()\n          );\n        }\n\n        // Retrieve all results for documents that were updated since the last\n        // limbo-document free remote snapshot.\n        return this.localDocumentsView!.getDocumentsMatchingQuery(\n          transaction,\n          query,\n          lastLimboFreeSnapshotVersion\n        ).next(updatedResults => {\n          // We merge `previousResults` into `updateResults`, since\n          // `updateResults` is already a DocumentMap. If a document is\n          // contained in both lists, then its contents are the same.\n          previousResults.forEach(doc => {\n            updatedResults = updatedResults.insert(doc.key, doc);\n          });\n          return updatedResults;\n        });\n      }\n    );\n  }\n\n  /** Applies the query filter and sorting to the provided documents.  */\n  private applyQuery(\n    query: Query,\n    documents: MaybeDocumentMap\n  ): SortedSet<Document> {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    let queryResults = new SortedSet<Document>((d1, d2) =>\n      query.docComparator(d1, d2)\n    );\n    documents.forEach((_, maybeDoc) => {\n      if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  }\n\n  /**\n   * Determines if a limit query needs to be refilled from cache, making it\n   * ineligible for index-free execution.\n   *\n   * @param sortedPreviousResults The documents that matched the query when it\n   * was last synchronized, sorted by the query's comparator.\n   * @param remoteKeys The document keys that matched the query at the last\n   * snapshot.\n   * @param limboFreeSnapshotVersion The version of the snapshot when the query\n   * was last synchronized.\n   */\n  private needsRefill(\n    limitType: LimitType,\n    sortedPreviousResults: SortedSet<Document>,\n    remoteKeys: DocumentKeySet,\n    limboFreeSnapshotVersion: SnapshotVersion\n  ): boolean {\n    // The query needs to be refilled if a previously matching document no\n    // longer matches.\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      return true;\n    }\n\n    // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n    const docAtLimitEdge =\n      limitType === LimitType.First\n        ? sortedPreviousResults.last()\n        : sortedPreviousResults.first();\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n    return (\n      docAtLimitEdge.hasPendingWrites ||\n      docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0\n    );\n  }\n\n  private executeFullCollectionScan(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<DocumentMap> {\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug(\n        'IndexFreeQueryEngine',\n        'Using full collection scan to execute query:',\n        query.toString()\n      );\n    }\n\n    return this.localDocumentsView!.getDocumentsMatchingQuery(\n      transaction,\n      query,\n      SnapshotVersion.min()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from '../api/timestamp';\nimport { Query } from '../core/query';\nimport { BatchId } from '../core/types';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { MutationBatch, BATCHID_UNKNOWN } from '../model/mutation_batch';\nimport { debugAssert, hardAssert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { SortedSet } from '../util/sorted_set';\n\nimport { IndexManager } from './index_manager';\nimport { MutationQueue } from './mutation_queue';\nimport { PersistenceTransaction, ReferenceDelegate } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { DocReference } from './reference_set';\n\nexport class MemoryMutationQueue implements MutationQueue {\n  /**\n   * The set of all mutations that have been sent but not yet been applied to\n   * the backend.\n   */\n  private mutationQueue: MutationBatch[] = [];\n\n  /** Next value to use when assigning sequential IDs to each mutation batch. */\n  private nextBatchId: BatchId = 1;\n\n  /** An ordered mapping between documents and the mutations batch IDs. */\n  private batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly referenceDelegate: ReferenceDelegate\n  ) {}\n\n  checkEmpty(transaction: PersistenceTransaction): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  }\n\n  addMutationBatch(\n    transaction: PersistenceTransaction,\n    localWriteTime: Timestamp,\n    baseMutations: Mutation[],\n    mutations: Mutation[]\n  ): PersistencePromise<MutationBatch> {\n    debugAssert(mutations.length !== 0, 'Mutation batches should not be empty');\n\n    const batchId = this.nextBatchId;\n    this.nextBatchId++;\n\n    if (this.mutationQueue.length > 0) {\n      const prior = this.mutationQueue[this.mutationQueue.length - 1];\n      debugAssert(\n        prior.batchId < batchId,\n        'Mutation batchIDs must be monotonically increasing order'\n      );\n    }\n\n    const batch = new MutationBatch(\n      batchId,\n      localWriteTime,\n      baseMutations,\n      mutations\n    );\n    this.mutationQueue.push(batch);\n\n    // Track references by document key and index collection parents.\n    for (const mutation of mutations) {\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(\n        new DocReference(mutation.key, batchId)\n      );\n\n      this.indexManager.addToCollectionParentIndex(\n        transaction,\n        mutation.key.path.popLast()\n      );\n    }\n\n    return PersistencePromise.resolve(batch);\n  }\n\n  lookupMutationBatch(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  }\n\n  getNextMutationBatchAfterBatchId(\n    transaction: PersistenceTransaction,\n    batchId: BatchId\n  ): PersistencePromise<MutationBatch | null> {\n    const nextBatchId = batchId + 1;\n\n    // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n    const rawIndex = this.indexOfBatchId(nextBatchId);\n    const index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(\n      this.mutationQueue.length > index ? this.mutationQueue[index] : null\n    );\n  }\n\n  getHighestUnacknowledgedBatchId(): PersistencePromise<BatchId> {\n    return PersistencePromise.resolve(\n      this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1\n    );\n  }\n\n  getAllMutationBatches(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<MutationBatch[]> {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n\n  getAllMutationBatchesAffectingDocumentKey(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MutationBatch[]> {\n    const start = new DocReference(documentKey, 0);\n    const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    const result: MutationBatch[] = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n      debugAssert(\n        documentKey.isEqual(ref.key),\n        \"Should only iterate over a single key's batches\"\n      );\n      const batch = this.findMutationBatch(ref.targetOrBatchId);\n      debugAssert(\n        batch !== null,\n        'Batches in the index must exist in the main table'\n      );\n      result.push(batch!);\n    });\n\n    return PersistencePromise.resolve(result);\n  }\n\n  getAllMutationBatchesAffectingDocumentKeys(\n    transaction: PersistenceTransaction,\n    documentKeys: SortedMap<DocumentKey, unknown>\n  ): PersistencePromise<MutationBatch[]> {\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    documentKeys.forEach(documentKey => {\n      const start = new DocReference(documentKey, 0);\n      const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n      this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n        debugAssert(\n          documentKey.isEqual(ref.key),\n          \"For each key, should only iterate over a single key's batches\"\n        );\n\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  getAllMutationBatchesAffectingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<MutationBatch[]> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    const prefix = query.path;\n    const immediateChildrenPathLength = prefix.length + 1;\n\n    // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n    let startPath = prefix;\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n\n    const start = new DocReference(new DocumentKey(startPath), 0);\n\n    // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n    let uniqueBatchIDs = new SortedSet<number>(primitiveComparator);\n\n    this.batchesByDocumentKey.forEachWhile(ref => {\n      const rowKeyPath = ref.key.path;\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n        return true;\n      }\n    }, start);\n\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n\n  private findMutationBatches(batchIDs: SortedSet<number>): MutationBatch[] {\n    // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n    const result: MutationBatch[] = [];\n    batchIDs.forEach(batchId => {\n      const batch = this.findMutationBatch(batchId);\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  }\n\n  removeMutationBatch(\n    transaction: PersistenceTransaction,\n    batch: MutationBatch\n  ): PersistencePromise<void> {\n    // Find the position of the first batch for removal.\n    const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(\n      batchIndex === 0,\n      'Can only remove the first entry of the mutation queue'\n    );\n    this.mutationQueue.shift();\n\n    let references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, (mutation: Mutation) => {\n      const ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return this.referenceDelegate.markPotentiallyOrphaned(\n        transaction,\n        mutation.key\n      );\n    }).next(() => {\n      this.batchesByDocumentKey = references;\n    });\n  }\n\n  removeCachedMutationKeys(batchId: BatchId): void {\n    // No-op since the memory mutation queue does not maintain a separate cache.\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  }\n\n  performConsistencyCheck(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    if (this.mutationQueue.length === 0) {\n      debugAssert(\n        this.batchesByDocumentKey.isEmpty(),\n        'Document leak -- detected dangling mutation references when queue is empty.'\n      );\n    }\n    return PersistencePromise.resolve();\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue and asserts that\n   * the resulting index is within the bounds of the queue.\n   *\n   * @param batchId The batchId to search for\n   * @param action A description of what the caller is doing, phrased in passive\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n   */\n  private indexOfExistingBatchId(batchId: BatchId, action: string): number {\n    const index = this.indexOfBatchId(batchId);\n    debugAssert(\n      index >= 0 && index < this.mutationQueue.length,\n      'Batches must exist to be ' + action\n    );\n    return index;\n  }\n\n  /**\n   * Finds the index of the given batchId in the mutation queue. This operation\n   * is O(1).\n   *\n   * @return The computed index of the batch with the given batchId, based on\n   * the state of the queue. Note this index can be negative if the requested\n   * batchId has already been remvoed from the queue or past the end of the\n   * queue if the batchId is larger than the last added batch.\n   */\n  private indexOfBatchId(batchId: BatchId): number {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    }\n\n    // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n    const firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  }\n\n  /**\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\n   * other functions that uses this code easier to read and more efficent.\n   */\n  private findMutationBatch(batchId: BatchId): MutationBatch | null {\n    const index = this.indexOfBatchId(batchId);\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n\n    const batch = this.mutationQueue[index];\n    debugAssert(batch.batchId === batchId, 'If found batch must match');\n    return batch;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport {\n  DocumentKeySet,\n  DocumentMap,\n  documentMap,\n  DocumentSizeEntry,\n  NullableMaybeDocumentMap,\n  nullableMaybeDocumentMap\n} from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { debugAssert } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nimport { IndexManager } from './index_manager';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { RemoteDocumentChangeBuffer } from './remote_document_change_buffer';\n\nexport type DocumentSizer = (doc: MaybeDocument) => number;\n\n/** Miscellaneous collection types / constants. */\ninterface MemoryRemoteDocumentCacheEntry extends DocumentSizeEntry {\n  readTime: SnapshotVersion;\n}\n\ntype DocumentEntryMap = SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>;\nfunction documentEntryMap(): DocumentEntryMap {\n  return new SortedMap<DocumentKey, MemoryRemoteDocumentCacheEntry>(\n    DocumentKey.comparator\n  );\n}\n\nexport class MemoryRemoteDocumentCache implements RemoteDocumentCache {\n  /** Underlying cache of documents and their read times. */\n  private docs = documentEntryMap();\n\n  /** Size of all cached documents. */\n  private size = 0;\n\n  /**\n   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just\n   * return 0 to avoid unnecessarily doing the work of calculating the size.\n   */\n  constructor(\n    private readonly indexManager: IndexManager,\n    private readonly sizer: DocumentSizer\n  ) {}\n\n  /**\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\n   *\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private addEntry(\n    transaction: PersistenceTransaction,\n    doc: MaybeDocument,\n    readTime: SnapshotVersion\n  ): PersistencePromise<void> {\n    debugAssert(\n      !readTime.isEqual(SnapshotVersion.min()),\n      'Cannot add a document with a read time of zero'\n    );\n\n    const key = doc.key;\n    const entry = this.docs.get(key);\n    const previousSize = entry ? entry.size : 0;\n    const currentSize = this.sizer(doc);\n\n    this.docs = this.docs.insert(key, {\n      maybeDocument: doc,\n      size: currentSize,\n      readTime\n    });\n\n    this.size += currentSize - previousSize;\n\n    return this.indexManager.addToCollectionParentIndex(\n      transaction,\n      key.path.popLast()\n    );\n  }\n\n  /**\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\n   *\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  private removeEntry(documentKey: DocumentKey): void {\n    const entry = this.docs.get(documentKey);\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    const entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.maybeDocument : null);\n  }\n\n  getEntries(\n    transaction: PersistenceTransaction,\n    documentKeys: DocumentKeySet\n  ): PersistencePromise<NullableMaybeDocumentMap> {\n    let results = nullableMaybeDocumentMap();\n    documentKeys.forEach(documentKey => {\n      const entry = this.docs.get(documentKey);\n      results = results.insert(documentKey, entry ? entry.maybeDocument : null);\n    });\n    return PersistencePromise.resolve(results);\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query,\n    sinceReadTime: SnapshotVersion\n  ): PersistencePromise<DocumentMap> {\n    debugAssert(\n      !query.isCollectionGroupQuery(),\n      'CollectionGroup queries should be handled in LocalDocumentsView'\n    );\n    let results = documentMap();\n\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const prefix = new DocumentKey(query.path.child(''));\n    const iterator = this.docs.getIteratorFrom(prefix);\n    while (iterator.hasNext()) {\n      const {\n        key,\n        value: { maybeDocument, readTime }\n      } = iterator.getNext();\n      if (!query.path.isPrefixOf(key.path)) {\n        break;\n      }\n      if (readTime.compareTo(sinceReadTime) <= 0) {\n        continue;\n      }\n      if (maybeDocument instanceof Document && query.matches(maybeDocument)) {\n        results = results.insert(maybeDocument.key, maybeDocument);\n      }\n    }\n    return PersistencePromise.resolve(results);\n  }\n\n  forEachDocumentKey(\n    transaction: PersistenceTransaction,\n    f: (key: DocumentKey) => PersistencePromise<void>\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(this.docs, (key: DocumentKey) => f(key));\n  }\n\n  newChangeBuffer(options?: {\n    trackRemovals: boolean;\n  }): RemoteDocumentChangeBuffer {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentCache.RemoteDocumentChangeBuffer(this);\n  }\n\n  getSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.size);\n  }\n\n  /**\n   * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\n   */\n  private static RemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n    constructor(private readonly documentCache: MemoryRemoteDocumentCache) {\n      super();\n    }\n\n    protected applyChanges(\n      transaction: PersistenceTransaction\n    ): PersistencePromise<void> {\n      const promises: Array<PersistencePromise<void>> = [];\n      this.changes.forEach((key, doc) => {\n        if (doc) {\n          promises.push(\n            this.documentCache.addEntry(transaction, doc, this.readTime)\n          );\n        } else {\n          this.documentCache.removeEntry(key);\n        }\n      });\n      return PersistencePromise.waitFor(promises);\n    }\n\n    protected getFromCache(\n      transaction: PersistenceTransaction,\n      documentKey: DocumentKey\n    ): PersistencePromise<MaybeDocument | null> {\n      return this.documentCache.getEntry(transaction, documentKey);\n    }\n\n    protected getAllFromCache(\n      transaction: PersistenceTransaction,\n      documentKeys: DocumentKeySet\n    ): PersistencePromise<NullableMaybeDocumentMap> {\n      return this.documentCache.getEntries(transaction, documentKeys);\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { TargetIdGenerator } from '../core/target_id_generator';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { DocumentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { debugAssert } from '../util/assert';\nimport { ObjectMap } from '../util/obj_map';\n\nimport { ActiveTargets } from './lru_garbage_collector';\nimport { MemoryPersistence } from './memory_persistence';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetCache } from './target_cache';\nimport { TargetData } from './target_data';\nimport { canonifyTarget, Target, targetEquals } from '../core/target';\n\nexport class MemoryTargetCache implements TargetCache {\n  /**\n   * Maps a target to the data about that target\n   */\n  private targets = new ObjectMap<Target, TargetData>(\n    t => canonifyTarget(t),\n    targetEquals\n  );\n\n  /** The last received snapshot version. */\n  private lastRemoteSnapshotVersion = SnapshotVersion.min();\n  /** The highest numbered target ID encountered. */\n  private highestTargetId: TargetId = 0;\n  /** The highest sequence number encountered. */\n  private highestSequenceNumber: ListenSequenceNumber = 0;\n  /**\n   * A ordered bidirectional mapping between documents and the remote target\n   * IDs.\n   */\n  private references = new ReferenceSet();\n\n  private targetCount = 0;\n\n  private targetIdGenerator = TargetIdGenerator.forTargetCache();\n\n  constructor(private readonly persistence: MemoryPersistence) {}\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    this.targets.forEach((_, targetData) => f(targetData));\n    return PersistencePromise.resolve();\n  }\n\n  getLastRemoteSnapshotVersion(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<SnapshotVersion> {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n\n  getHighestSequenceNumber(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<ListenSequenceNumber> {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  }\n\n  allocateTargetId(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<TargetId> {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  }\n\n  setTargetsMetadata(\n    transaction: PersistenceTransaction,\n    highestListenSequenceNumber: number,\n    lastRemoteSnapshotVersion?: SnapshotVersion\n  ): PersistencePromise<void> {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n    return PersistencePromise.resolve();\n  }\n\n  private saveTargetData(targetData: TargetData): void {\n    this.targets.set(targetData.target, targetData);\n    const targetId = targetData.targetId;\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  }\n\n  addTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      !this.targets.has(targetData.target),\n      'Adding a target that already exists'\n    );\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  }\n\n  updateTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Updating a non-existent target'\n    );\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  }\n\n  removeTargetData(\n    transaction: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    debugAssert(this.targetCount > 0, 'Removing a target from an empty cache');\n    debugAssert(\n      this.targets.has(targetData.target),\n      'Removing a non-existent target from the cache'\n    );\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  }\n\n  removeTargets(\n    transaction: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    let count = 0;\n    const removals: Array<PersistencePromise<void>> = [];\n    this.targets.forEach((key, targetData) => {\n      if (\n        targetData.sequenceNumber <= upperBound &&\n        activeTargetIds.get(targetData.targetId) === null\n      ) {\n        this.targets.delete(key);\n        removals.push(\n          this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\n        );\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(() => count);\n  }\n\n  getTargetCount(\n    transaction: PersistenceTransaction\n  ): PersistencePromise<number> {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n\n  getTargetData(\n    transaction: PersistenceTransaction,\n    target: Target\n  ): PersistencePromise<TargetData | null> {\n    const targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  }\n\n  addMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.addReferences(keys, targetId);\n    return PersistencePromise.resolve();\n  }\n\n  removeMatchingKeys(\n    txn: PersistenceTransaction,\n    keys: DocumentKeySet,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises: Array<PersistencePromise<void>> = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n\n  removeMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<void> {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  }\n\n  getMatchingKeysForTargetId(\n    txn: PersistenceTransaction,\n    targetId: TargetId\n  ): PersistencePromise<DocumentKeySet> {\n    const matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  }\n\n  containsKey(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { logDebug } from '../util/log';\nimport { ObjectMap } from '../util/obj_map';\nimport { encodeResourcePath } from './encoded_resource_path';\nimport {\n  ActiveTargets,\n  LruDelegate,\n  LruGarbageCollector,\n  LruParams\n} from './lru_garbage_collector';\nimport { ListenSequence } from '../core/listen_sequence';\nimport { ListenSequenceNumber, TargetId } from '../core/types';\nimport { estimateByteSize } from '../model/values';\nimport { MemoryIndexManager } from './memory_index_manager';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nimport { MemoryTargetCache } from './memory_target_cache';\nimport { MutationQueue } from './mutation_queue';\nimport {\n  Persistence,\n  PersistenceTransaction,\n  PersistenceTransactionMode,\n  ReferenceDelegate\n} from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { ReferenceSet } from './reference_set';\nimport { TargetData } from './target_data';\n\nconst LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nexport class MemoryPersistence implements Persistence {\n  /**\n   * Note that these are retained here to make it easier to write tests\n   * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n   * can create a new LocalStore wrapping this Persistence instance and this\n   * will make the in-memory persistence layer behave as if it were actually\n   * persisting values.\n   */\n  private readonly indexManager: MemoryIndexManager;\n  private mutationQueues: { [user: string]: MemoryMutationQueue } = {};\n  private readonly remoteDocumentCache: MemoryRemoteDocumentCache;\n  private readonly targetCache: MemoryTargetCache;\n  private readonly listenSequence = new ListenSequence(0);\n\n  private _started = false;\n\n  readonly referenceDelegate: MemoryReferenceDelegate;\n\n  /**\n   * The constructor accepts a factory for creating a reference delegate. This\n   * allows both the delegate and this instance to have strong references to\n   * each other without having nullable fields that would then need to be\n   * checked or asserted on every access.\n   */\n  constructor(\n    referenceDelegateFactory: (p: MemoryPersistence) => MemoryReferenceDelegate\n  ) {\n    this._started = true;\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n    const sizer = (doc: MaybeDocument): number =>\n      this.referenceDelegate.documentSize(doc);\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = new MemoryRemoteDocumentCache(\n      this.indexManager,\n      sizer\n    );\n  }\n\n  start(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  shutdown(): Promise<void> {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  }\n\n  get started(): boolean {\n    return this._started;\n  }\n\n  setDatabaseDeletedListener(): void {\n    // No op.\n  }\n\n  getIndexManager(): MemoryIndexManager {\n    return this.indexManager;\n  }\n\n  getMutationQueue(user: User): MutationQueue {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue(\n        this.indexManager,\n        this.referenceDelegate\n      );\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n\n  getTargetCache(): MemoryTargetCache {\n    return this.targetCache;\n  }\n\n  getRemoteDocumentCache(): MemoryRemoteDocumentCache {\n    return this.remoteDocumentCache;\n  }\n\n  runTransaction<T>(\n    action: string,\n    mode: PersistenceTransactionMode,\n    transactionOperation: (\n      transaction: PersistenceTransaction\n    ) => PersistencePromise<T>\n  ): Promise<T> {\n    logDebug(LOG_TAG, 'Starting transaction:', action);\n    const txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn)\n      .next(result => {\n        return this.referenceDelegate\n          .onTransactionCommitted(txn)\n          .next(() => result);\n      })\n      .toPromise()\n      .then(result => {\n        txn.raiseOnCommittedEvent();\n        return result;\n      });\n  }\n\n  mutationQueuesContainKey(\n    transaction: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or(\n      Object.values(this.mutationQueues).map(queue => () =>\n        queue.containsKey(transaction, key)\n      )\n    );\n  }\n}\n\n/**\n * Memory persistence is not actually transactional, but future implementations\n * may have transaction-scoped state.\n */\nexport class MemoryTransaction extends PersistenceTransaction {\n  constructor(readonly currentSequenceNumber: ListenSequenceNumber) {\n    super();\n  }\n}\n\nexport interface MemoryReferenceDelegate extends ReferenceDelegate {\n  documentSize(doc: MaybeDocument): number;\n  onTransactionStarted(): void;\n  onTransactionCommitted(txn: PersistenceTransaction): PersistencePromise<void>;\n}\n\nexport class MemoryEagerDelegate implements MemoryReferenceDelegate {\n  /** Tracks all documents that are active in Query views. */\n  private localViewReferences: ReferenceSet = new ReferenceSet();\n  /** The list of documents that are potentially GCed after each transaction. */\n  private _orphanedDocuments: Set<DocumentKey> | null = null;\n\n  private constructor(private readonly persistence: MemoryPersistence) {}\n\n  static factory(persistence: MemoryPersistence): MemoryEagerDelegate {\n    return new MemoryEagerDelegate(persistence);\n  }\n\n  private get orphanedDocuments(): Set<DocumentKey> {\n    if (!this._orphanedDocuments) {\n      throw fail('orphanedDocuments is only valid during a transaction.');\n    } else {\n      return this._orphanedDocuments;\n    }\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.localViewReferences.addReference(key, targetId);\n    this.orphanedDocuments.delete(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.localViewReferences.removeReference(key, targetId);\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedDocuments.add(key);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const orphaned = this.localViewReferences.removeReferencesForId(\n      targetData.targetId\n    );\n    orphaned.forEach(key => this.orphanedDocuments.add(key));\n    const cache = this.persistence.getTargetCache();\n    return cache\n      .getMatchingKeysForTargetId(txn, targetData.targetId)\n      .next(keys => {\n        keys.forEach(key => this.orphanedDocuments.add(key));\n      })\n      .next(() => cache.removeTargetData(txn, targetData));\n  }\n\n  onTransactionStarted(): void {\n    this._orphanedDocuments = new Set<DocumentKey>();\n  }\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    // Remove newly orphaned documents.\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(\n      this.orphanedDocuments,\n      (key: DocumentKey) => {\n        return this.isReferenced(txn, key).next(isReferenced => {\n          if (!isReferenced) {\n            changeBuffer.removeEntry(key);\n          }\n        });\n      }\n    ).next(() => {\n      this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    return this.isReferenced(txn, key).next(isReferenced => {\n      if (isReferenced) {\n        this.orphanedDocuments.delete(key);\n      } else {\n        this.orphanedDocuments.add(key);\n      }\n    });\n  }\n\n  documentSize(doc: MaybeDocument): number {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  }\n\n  private isReferenced(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () =>\n        PersistencePromise.resolve(this.localViewReferences.containsKey(key)),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => this.persistence.mutationQueuesContainKey(txn, key)\n    ]);\n  }\n}\n\nexport class MemoryLruDelegate implements ReferenceDelegate, LruDelegate {\n  private orphanedSequenceNumbers: ObjectMap<\n    DocumentKey,\n    ListenSequenceNumber\n  > = new ObjectMap(\n    k => encodeResourcePath(k.path),\n    (l, r) => l.isEqual(r)\n  );\n\n  readonly garbageCollector: LruGarbageCollector;\n\n  constructor(\n    private readonly persistence: MemoryPersistence,\n    lruParams: LruParams\n  ) {\n    this.garbageCollector = new LruGarbageCollector(this, lruParams);\n  }\n\n  // No-ops, present so memory persistence doesn't have to care which delegate\n  // it has.\n  onTransactionStarted(): void {}\n\n  onTransactionCommitted(\n    txn: PersistenceTransaction\n  ): PersistencePromise<void> {\n    return PersistencePromise.resolve();\n  }\n\n  forEachTarget(\n    txn: PersistenceTransaction,\n    f: (q: TargetData) => void\n  ): PersistencePromise<void> {\n    return this.persistence.getTargetCache().forEachTarget(txn, f);\n  }\n\n  getSequenceNumberCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.persistence\n      .getTargetCache()\n      .getTargetCount(txn);\n    return targetCountPromise.next(targetCount =>\n      docCountPromise.next(docCount => targetCount + docCount)\n    );\n  }\n\n  private orphanedDocumentCount(\n    txn: PersistenceTransaction\n  ): PersistencePromise<number> {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n\n  forEachOrphanedDocumentSequenceNumber(\n    txn: PersistenceTransaction,\n    f: (sequenceNumber: ListenSequenceNumber) => void\n  ): PersistencePromise<void> {\n    return PersistencePromise.forEach(\n      this.orphanedSequenceNumbers,\n      (key, sequenceNumber) => {\n        // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\n        // being too recent.\n        return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\n          if (!isPinned) {\n            return f(sequenceNumber);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        });\n      }\n    );\n  }\n\n  removeTargets(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber,\n    activeTargetIds: ActiveTargets\n  ): PersistencePromise<number> {\n    return this.persistence\n      .getTargetCache()\n      .removeTargets(txn, upperBound, activeTargetIds);\n  }\n\n  removeOrphanedDocuments(\n    txn: PersistenceTransaction,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<number> {\n    let count = 0;\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    const p = cache.forEachDocumentKey(txn, key => {\n      return this.isPinned(txn, key, upperBound).next(isPinned => {\n        if (!isPinned) {\n          count++;\n          changeBuffer.removeEntry(key);\n        }\n      });\n    });\n    return p.next(() => changeBuffer.apply(txn)).next(() => count);\n  }\n\n  markPotentiallyOrphaned(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeTarget(\n    txn: PersistenceTransaction,\n    targetData: TargetData\n  ): PersistencePromise<void> {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(txn, updated);\n  }\n\n  addReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  removeReference(\n    txn: PersistenceTransaction,\n    targetId: TargetId,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  updateLimboDocument(\n    txn: PersistenceTransaction,\n    key: DocumentKey\n  ): PersistencePromise<void> {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n\n  documentSize(maybeDoc: MaybeDocument): number {\n    let documentSize = maybeDoc.key.toString().length;\n    if (maybeDoc instanceof Document) {\n      documentSize += estimateByteSize(maybeDoc.toProto());\n    }\n    return documentSize;\n  }\n\n  private isPinned(\n    txn: PersistenceTransaction,\n    key: DocumentKey,\n    upperBound: ListenSequenceNumber\n  ): PersistencePromise<boolean> {\n    return PersistencePromise.or([\n      () => this.persistence.mutationQueuesContainKey(txn, key),\n      () => this.persistence.getTargetCache().containsKey(txn, key),\n      () => {\n        const orphanedAt = this.orphanedSequenceNumbers.get(key);\n        return PersistencePromise.resolve(\n          orphanedAt !== undefined && orphanedAt > upperBound\n        );\n      }\n    ]);\n  }\n\n  getCacheSize(txn: PersistenceTransaction): PersistencePromise<number> {\n    return this.persistence.getRemoteDocumentCache().getSize(txn);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\n\nimport { Stream } from './connection';\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nexport class StreamBridge<I, O> implements Stream<I, O> {\n  private wrappedOnOpen: (() => void) | undefined;\n  private wrappedOnClose: ((err?: FirestoreError) => void) | undefined;\n  private wrappedOnMessage: ((msg: O) => void) | undefined;\n\n  private sendFn: (msg: I) => void;\n  private closeFn: () => void;\n\n  constructor(args: { sendFn: (msg: I) => void; closeFn: () => void }) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  onOpen(callback: () => void): void {\n    debugAssert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  }\n\n  onClose(callback: (err?: FirestoreError) => void): void {\n    debugAssert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  }\n\n  onMessage(callback: (msg: O) => void): void {\n    debugAssert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  }\n\n  close(): void {\n    this.closeFn();\n  }\n\n  send(msg: I): void {\n    this.sendFn(msg);\n  }\n\n  callOnOpen(): void {\n    debugAssert(\n      this.wrappedOnOpen !== undefined,\n      'Cannot call onOpen because no callback was set'\n    );\n    this.wrappedOnOpen();\n  }\n\n  callOnClose(err?: FirestoreError): void {\n    debugAssert(\n      this.wrappedOnClose !== undefined,\n      'Cannot call onClose because no callback was set'\n    );\n    this.wrappedOnClose(err);\n  }\n\n  callOnMessage(msg: O): void {\n    debugAssert(\n      this.wrappedOnMessage !== undefined,\n      'Cannot call onMessage because no callback was set'\n    );\n    this.wrappedOnMessage(msg);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createWebChannelTransport,\n  ErrorCode,\n  EventType,\n  WebChannel,\n  WebChannelError,\n  WebChannelOptions,\n  XhrIo\n} from '@firebase/webchannel-wrapper';\n\nimport {\n  isBrowserExtension,\n  isElectron,\n  isIE,\n  isMobileCordova,\n  isReactNative,\n  isUWP\n} from '@firebase/util';\n\nimport { Token } from '../../api/credentials';\nimport { DatabaseId, DatabaseInfo } from '../../core/database_info';\nimport { SDK_VERSION } from '../../core/version';\nimport { Connection, Stream } from '../../remote/connection';\nimport {\n  mapCodeFromRpcStatus,\n  mapCodeFromHttpResponseErrorStatus\n} from '../../remote/rpc_error';\nimport { StreamBridge } from '../../remote/stream_bridge';\nimport { debugAssert, fail, hardAssert } from '../../util/assert';\nimport { Code, FirestoreError } from '../../util/error';\nimport { logDebug, logWarn } from '../../util/log';\nimport { Indexable } from '../../util/misc';\nimport { Rejecter, Resolver } from '../../util/promise';\nimport { StringMap } from '../../util/types';\n\nconst LOG_TAG = 'Connection';\n\nconst RPC_STREAM_SERVICE = 'google.firestore.v1.Firestore';\nconst RPC_URL_VERSION = 'v1';\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n * Uses Object Literal notation to avoid renaming.\n */\nconst RPC_NAME_REST_MAPPING: { [key: string]: string } = {};\nRPC_NAME_REST_MAPPING['BatchGetDocuments'] = 'batchGet';\nRPC_NAME_REST_MAPPING['Commit'] = 'commit';\n\n// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because\n// we are doing out-of-band releases. Once we release as part of Firebase, we\n// should use the Firebase version instead.\nconst X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;\n\nconst XHR_TIMEOUT_SECS = 15;\n\nexport class WebChannelConnection implements Connection {\n  private readonly databaseId: DatabaseId;\n  private readonly baseUrl: string;\n  private readonly forceLongPolling: boolean;\n\n  constructor(info: DatabaseInfo) {\n    this.databaseId = info.databaseId;\n    const proto = info.ssl ? 'https' : 'http';\n    this.baseUrl = proto + '://' + info.host;\n    this.forceLongPolling = info.forceLongPolling;\n  }\n\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  private modifyHeadersForRequest(\n    headers: StringMap,\n    token: Token | null\n  ): void {\n    if (token) {\n      for (const header in token.authHeaders) {\n        if (token.authHeaders.hasOwnProperty(header)) {\n          headers[header] = token.authHeaders[header];\n        }\n      }\n    }\n    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;\n  }\n\n  invokeRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp> {\n    const url = this.makeUrl(rpcName);\n\n    return new Promise((resolve: Resolver<Resp>, reject: Rejecter) => {\n      const xhr = new XhrIo();\n      xhr.listenOnce(EventType.COMPLETE, () => {\n        try {\n          switch (xhr.getLastErrorCode()) {\n            case ErrorCode.NO_ERROR:\n              const json = xhr.getResponseJson() as Resp;\n              logDebug(LOG_TAG, 'XHR received:', JSON.stringify(json));\n              resolve(json);\n              break;\n            case ErrorCode.TIMEOUT:\n              logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" timed out');\n              reject(\n                new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out')\n              );\n              break;\n            case ErrorCode.HTTP_ERROR:\n              const status = xhr.getStatus();\n              logDebug(\n                LOG_TAG,\n                'RPC \"' + rpcName + '\" failed with status:',\n                status,\n                'response text:',\n                xhr.getResponseText()\n              );\n              if (status > 0) {\n                const responseError = (xhr.getResponseJson() as WebChannelError)\n                  .error;\n                if (\n                  !!responseError &&\n                  !!responseError.status &&\n                  !!responseError.message\n                ) {\n                  const firestoreErrorCode = mapCodeFromHttpResponseErrorStatus(\n                    responseError.status\n                  );\n                  reject(\n                    new FirestoreError(\n                      firestoreErrorCode,\n                      responseError.message\n                    )\n                  );\n                } else {\n                  reject(\n                    new FirestoreError(\n                      Code.UNKNOWN,\n                      'Server responded with status ' + xhr.getStatus()\n                    )\n                  );\n                }\n              } else {\n                // If we received an HTTP_ERROR but there's no status code,\n                // it's most probably a connection issue\n                logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" failed');\n                reject(\n                  new FirestoreError(Code.UNAVAILABLE, 'Connection failed.')\n                );\n              }\n              break;\n            default:\n              fail(\n                'RPC \"' +\n                  rpcName +\n                  '\" failed with unanticipated ' +\n                  'webchannel error ' +\n                  xhr.getLastErrorCode() +\n                  ': ' +\n                  xhr.getLastError() +\n                  ', giving up.'\n              );\n          }\n        } finally {\n          logDebug(LOG_TAG, 'RPC \"' + rpcName + '\" completed.');\n        }\n      });\n\n      // The database field is already encoded in URL. Specifying it again in\n      // the body is not necessary in production, and will cause duplicate field\n      // errors in the Firestore Emulator. Let's remove it.\n      const jsonObj = ({ ...request } as unknown) as Indexable;\n      delete jsonObj.database;\n\n      const requestString = JSON.stringify(jsonObj);\n      logDebug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);\n      // Content-Type: text/plain will avoid preflight requests which might\n      // mess with CORS and redirects by proxies. If we add custom headers\n      // we will need to change this code to potentially use the\n      // $httpOverwrite parameter supported by ESF to avoid\n      // triggering preflight requests.\n      const headers: StringMap = { 'Content-Type': 'text/plain' };\n\n      this.modifyHeadersForRequest(headers, token);\n\n      xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);\n    });\n  }\n\n  invokeStreamingRPC<Req, Resp>(\n    rpcName: string,\n    request: Req,\n    token: Token | null\n  ): Promise<Resp[]> {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.invokeRPC<Req, Resp[]>(rpcName, request, token);\n  }\n\n  openStream<Req, Resp>(\n    rpcName: string,\n    token: Token | null\n  ): Stream<Req, Resp> {\n    const urlParts = [\n      this.baseUrl,\n      '/',\n      RPC_STREAM_SERVICE,\n      '/',\n      rpcName,\n      '/channel'\n    ];\n    const webchannelTransport = createWebChannelTransport();\n    const request: WebChannelOptions = {\n      // Required for backend stickiness, routing behavior is based on this\n      // parameter.\n      httpSessionIdParam: 'gsessionid',\n      initMessageHeaders: {},\n      messageUrlParams: {\n        // This param is used to improve routing and project isolation by the\n        // backend and must be included in every request.\n        database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`\n      },\n      sendRawJson: true,\n      supportsCrossDomainXhr: true,\n      internalChannelParams: {\n        // Override the default timeout (randomized between 10-20 seconds) since\n        // a large write batch on a slow internet connection may take a long\n        // time to send to the backend. Rather than have WebChannel impose a\n        // tight timeout which could lead to infinite timeouts and retries, we\n        // set it very large (5-10 minutes) and rely on the browser's builtin\n        // timeouts to kick in if the request isn't working.\n        forwardChannelRequestTimeoutMs: 10 * 60 * 1000\n      },\n      forceLongPolling: this.forceLongPolling\n    };\n\n    this.modifyHeadersForRequest(request.initMessageHeaders!, token);\n\n    // Sending the custom headers we just added to request.initMessageHeaders\n    // (Authorization, etc.) will trigger the browser to make a CORS preflight\n    // request because the XHR will no longer meet the criteria for a \"simple\"\n    // CORS request:\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\n    //\n    // Therefore to avoid the CORS preflight request (an extra network\n    // roundtrip), we use the httpHeadersOverwriteParam option to specify that\n    // the headers should instead be encoded into a special \"$httpHeaders\" query\n    // parameter, which is recognized by the webchannel backend. This is\n    // formally defined here:\n    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32\n    //\n    // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request\n    // doesn't have an Origin header. So we have to exclude a few browser environments that are\n    // known to (sometimes) not include an Origin. See\n    // https://github.com/firebase/firebase-js-sdk/issues/1491.\n    if (\n      !isMobileCordova() &&\n      !isReactNative() &&\n      !isElectron() &&\n      !isIE() &&\n      !isUWP() &&\n      !isBrowserExtension()\n    ) {\n      request.httpHeadersOverwriteParam = '$httpHeaders';\n    }\n\n    const url = urlParts.join('');\n    logDebug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);\n    const channel = webchannelTransport.createWebChannel(url, request);\n\n    // WebChannel supports sending the first message with the handshake - saving\n    // a network round trip. However, it will have to call send in the same\n    // JS event loop as open. In order to enforce this, we delay actually\n    // opening the WebChannel until send is called. Whether we have called\n    // open is tracked with this variable.\n    let opened = false;\n\n    // A flag to determine whether the stream was closed (by us or through an\n    // error/close event) to avoid delivering multiple close events or sending\n    // on a closed stream\n    let closed = false;\n\n    const streamBridge = new StreamBridge<Req, Resp>({\n      sendFn: (msg: Req) => {\n        if (!closed) {\n          if (!opened) {\n            logDebug(LOG_TAG, 'Opening WebChannel transport.');\n            channel.open();\n            opened = true;\n          }\n          logDebug(LOG_TAG, 'WebChannel sending:', msg);\n          channel.send(msg);\n        } else {\n          logDebug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);\n        }\n      },\n      closeFn: () => channel.close()\n    });\n\n    // Closure events are guarded and exceptions are swallowed, so catch any\n    // exception and rethrow using a setTimeout so they become visible again.\n    // Note that eventually this function could go away if we are confident\n    // enough the code is exception free.\n    const unguardedEventListen = <T>(\n      type: string,\n      fn: (param?: T) => void\n    ): void => {\n      // TODO(dimond): closure typing seems broken because WebChannel does\n      // not implement goog.events.Listenable\n      channel.listen(type, (param: unknown) => {\n        try {\n          fn(param as T);\n        } catch (e) {\n          setTimeout(() => {\n            throw e;\n          }, 0);\n        }\n      });\n    };\n\n    unguardedEventListen(WebChannel.EventType.OPEN, () => {\n      if (!closed) {\n        logDebug(LOG_TAG, 'WebChannel transport opened.');\n      }\n    });\n\n    unguardedEventListen(WebChannel.EventType.CLOSE, () => {\n      if (!closed) {\n        closed = true;\n        logDebug(LOG_TAG, 'WebChannel transport closed');\n        streamBridge.callOnClose();\n      }\n    });\n\n    unguardedEventListen<Error>(WebChannel.EventType.ERROR, err => {\n      if (!closed) {\n        closed = true;\n        logWarn(LOG_TAG, 'WebChannel transport errored:', err);\n        streamBridge.callOnClose(\n          new FirestoreError(\n            Code.UNAVAILABLE,\n            'The operation could not be completed'\n          )\n        );\n      }\n    });\n\n    // WebChannel delivers message events as array. If batching is not enabled\n    // (it's off by default) each message will be delivered alone, resulting in\n    // a single element array.\n    interface WebChannelResponse {\n      data: Resp[];\n    }\n\n    unguardedEventListen<WebChannelResponse>(\n      WebChannel.EventType.MESSAGE,\n      msg => {\n        if (!closed) {\n          const msgData = msg!.data[0];\n          hardAssert(!!msgData, 'Got a webchannel message without data.');\n          // TODO(b/35143891): There is a bug in One Platform that caused errors\n          // (and only errors) to be wrapped in an extra array. To be forward\n          // compatible with the bug we need to check either condition. The latter\n          // can be removed once the fix has been rolled out.\n          // Use any because msgData.error is not typed.\n          const msgDataOrError: WebChannelError | object = msgData;\n          const error =\n            msgDataOrError.error ||\n            (msgDataOrError as WebChannelError[])[0]?.error;\n          if (error) {\n            logDebug(LOG_TAG, 'WebChannel received error:', error);\n            // error.status will be a string like 'OK' or 'NOT_FOUND'.\n            const status: string = error.status;\n            let code = mapCodeFromRpcStatus(status);\n            let message = error.message;\n            if (code === undefined) {\n              code = Code.INTERNAL;\n              message =\n                'Unknown error status: ' +\n                status +\n                ' with message ' +\n                error.message;\n            }\n            // Mark closed so no further events are propagated\n            closed = true;\n            streamBridge.callOnClose(new FirestoreError(code, message));\n            channel.close();\n          } else {\n            logDebug(LOG_TAG, 'WebChannel received:', msgData);\n            streamBridge.callOnMessage(msgData);\n          }\n        }\n      }\n    );\n\n    setTimeout(() => {\n      // Technically we could/should wait for the WebChannel opened event,\n      // but because we want to send the first message with the WebChannel\n      // handshake we pretend the channel opened here (asynchronously), and\n      // then delay the actual open until the first message is sent.\n      streamBridge.callOnOpen();\n    }, 0);\n    return streamBridge;\n  }\n\n  // visible for testing\n  makeUrl(rpcName: string): string {\n    const urlRpcName = RPC_NAME_REST_MAPPING[rpcName];\n    debugAssert(\n      urlRpcName !== undefined,\n      'Unknown REST mapping for: ' + rpcName\n    );\n    return (\n      this.baseUrl +\n      '/' +\n      RPC_URL_VERSION +\n      '/projects/' +\n      this.databaseId.projectId +\n      '/databases/' +\n      this.databaseId.database +\n      '/documents:' +\n      urlRpcName\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { logDebug } from '../../util/log';\nimport {\n  ConnectivityMonitor,\n  ConnectivityMonitorCallback,\n  NetworkStatus\n} from '../../remote/connectivity_monitor';\n\n// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()\n/* eslint-disable no-restricted-globals */\n\nconst LOG_TAG = 'ConnectivityMonitor';\n\n/**\n * Browser implementation of ConnectivityMonitor.\n */\nexport class BrowserConnectivityMonitor implements ConnectivityMonitor {\n  private readonly networkAvailableListener = (): void =>\n    this.onNetworkAvailable();\n  private readonly networkUnavailableListener = (): void =>\n    this.onNetworkUnavailable();\n  private callbacks: ConnectivityMonitorCallback[] = [];\n\n  constructor() {\n    this.configureNetworkMonitoring();\n  }\n\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    this.callbacks.push(callback);\n  }\n\n  shutdown(): void {\n    window.removeEventListener('online', this.networkAvailableListener);\n    window.removeEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private configureNetworkMonitoring(): void {\n    window.addEventListener('online', this.networkAvailableListener);\n    window.addEventListener('offline', this.networkUnavailableListener);\n  }\n\n  private onNetworkAvailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: AVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.AVAILABLE);\n    }\n  }\n\n  private onNetworkUnavailable(): void {\n    logDebug(LOG_TAG, 'Network connectivity changed: UNAVAILABLE');\n    for (const callback of this.callbacks) {\n      callback(NetworkStatus.UNAVAILABLE);\n    }\n  }\n\n  // TODO(chenbrian): Consider passing in window either into this component or\n  // here for testing via FakeWindow.\n  /** Checks that all used attributes of window are available. */\n  static isAvailable(): boolean {\n    return (\n      typeof window !== 'undefined' &&\n      window.addEventListener !== undefined &&\n      window.removeEventListener !== undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectivityMonitor, NetworkStatus } from './connectivity_monitor';\n\nexport class NoopConnectivityMonitor implements ConnectivityMonitor {\n  addCallback(callback: (status: NetworkStatus) => void): void {\n    // No-op.\n  }\n\n  shutdown(): void {\n    // No-op.\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ClientId,\n  MemorySharedClientState,\n  SharedClientState,\n  WebStorageSharedClientState\n} from '../local/shared_client_state';\nimport { LocalStore, MultiTabLocalStore } from '../local/local_store';\nimport { MultiTabSyncEngine, SyncEngine } from './sync_engine';\nimport { RemoteStore } from '../remote/remote_store';\nimport { EventManager } from './event_manager';\nimport { AsyncQueue } from '../util/async_queue';\nimport { DatabaseInfo } from './database_info';\nimport { Datastore } from '../remote/datastore';\nimport { User } from '../auth/user';\nimport { PersistenceSettings } from './firestore_client';\nimport { debugAssert } from '../util/assert';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Code, FirestoreError } from '../util/error';\nimport { OnlineStateSource } from './types';\nimport { LruParams, LruScheduler } from '../local/lru_garbage_collector';\nimport { IndexFreeQueryEngine } from '../local/index_free_query_engine';\nimport { IndexedDbPersistence } from '../local/indexeddb_persistence';\nimport {\n  MemoryEagerDelegate,\n  MemoryPersistence\n} from '../local/memory_persistence';\nimport { newConnectivityMonitor } from '../platform/connection';\nimport { newSerializer } from '../platform/serializer';\nimport { getDocument, getWindow } from '../platform/dom';\n\nconst MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE =\n  'You are using the memory-only build of Firestore. Persistence support is ' +\n  'only available via the @firebase/firestore bundle or the ' +\n  'firebase-firestore.js build.';\n\nexport interface ComponentConfiguration {\n  asyncQueue: AsyncQueue;\n  databaseInfo: DatabaseInfo;\n  datastore: Datastore;\n  clientId: ClientId;\n  initialUser: User;\n  maxConcurrentLimboResolutions: number;\n  persistenceSettings: PersistenceSettings;\n}\n\n/**\n * Initializes and wires up all core components for Firestore. Implementations\n * override `initialize()` to provide all components.\n */\nexport interface ComponentProvider {\n  persistence: Persistence;\n  sharedClientState: SharedClientState;\n  localStore: LocalStore;\n  syncEngine: SyncEngine;\n  gcScheduler: GarbageCollectionScheduler | null;\n  remoteStore: RemoteStore;\n  eventManager: EventManager;\n\n  initialize(cfg: ComponentConfiguration): Promise<void>;\n\n  clearPersistence(databaseId: DatabaseInfo): Promise<void>;\n}\n\n/**\n * Provides all components needed for Firestore with in-memory persistence.\n * Uses EagerGC garbage collection.\n */\nexport class MemoryComponentProvider implements ComponentProvider {\n  persistence!: Persistence;\n  sharedClientState!: SharedClientState;\n  localStore!: LocalStore;\n  syncEngine!: SyncEngine;\n  gcScheduler!: GarbageCollectionScheduler | null;\n  remoteStore!: RemoteStore;\n  eventManager!: EventManager;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    this.sharedClientState = this.createSharedClientState(cfg);\n    this.persistence = this.createPersistence(cfg);\n    await this.persistence.start();\n    this.gcScheduler = this.createGarbageCollectionScheduler(cfg);\n    this.localStore = this.createLocalStore(cfg);\n    this.remoteStore = this.createRemoteStore(cfg);\n    this.syncEngine = this.createSyncEngine(cfg);\n    this.eventManager = this.createEventManager(cfg);\n\n    this.sharedClientState.onlineStateHandler = onlineState =>\n      this.syncEngine.applyOnlineStateChange(\n        onlineState,\n        OnlineStateSource.SharedClientState\n      );\n    this.remoteStore.syncEngine = this.syncEngine;\n\n    await this.localStore.start();\n    await this.sharedClientState.start();\n    await this.remoteStore.start();\n\n    await this.remoteStore.applyPrimaryState(this.syncEngine.isPrimaryClient);\n  }\n\n  createEventManager(cfg: ComponentConfiguration): EventManager {\n    return new EventManager(this.syncEngine);\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    return null;\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return new LocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    if (cfg.persistenceSettings.durable) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n      );\n    }\n    return new MemoryPersistence(MemoryEagerDelegate.factory);\n  }\n\n  createRemoteStore(cfg: ComponentConfiguration): RemoteStore {\n    return new RemoteStore(\n      this.localStore,\n      cfg.datastore,\n      cfg.asyncQueue,\n      onlineState =>\n        this.syncEngine.applyOnlineStateChange(\n          onlineState,\n          OnlineStateSource.RemoteStore\n        ),\n      newConnectivityMonitor()\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    return new MemorySharedClientState();\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    return new SyncEngine(\n      this.localStore,\n      this.remoteStore,\n      cfg.datastore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions\n    );\n  }\n\n  clearPersistence(databaseInfo: DatabaseInfo): Promise<void> {\n    throw new FirestoreError(\n      Code.FAILED_PRECONDITION,\n      MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE\n    );\n  }\n}\n\n/**\n * Provides all components needed for Firestore with IndexedDB persistence.\n */\nexport class IndexedDbComponentProvider extends MemoryComponentProvider {\n  persistence!: IndexedDbPersistence;\n\n  // TODO(tree-shaking): Create an IndexedDbComponentProvider and a\n  // MultiTabComponentProvider. The IndexedDbComponentProvider should depend\n  // on LocalStore and SyncEngine.\n  localStore!: MultiTabLocalStore;\n  syncEngine!: MultiTabSyncEngine;\n\n  async initialize(cfg: ComponentConfiguration): Promise<void> {\n    await super.initialize(cfg);\n\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(async isPrimary => {\n      await (this.syncEngine as MultiTabSyncEngine).applyPrimaryState(\n        isPrimary\n      );\n      if (this.gcScheduler) {\n        if (isPrimary && !this.gcScheduler.started) {\n          this.gcScheduler.start(this.localStore);\n        } else if (!isPrimary) {\n          this.gcScheduler.stop();\n        }\n      }\n    });\n  }\n\n  createLocalStore(cfg: ComponentConfiguration): LocalStore {\n    return new MultiTabLocalStore(\n      this.persistence,\n      new IndexFreeQueryEngine(),\n      cfg.initialUser\n    );\n  }\n\n  createSyncEngine(cfg: ComponentConfiguration): SyncEngine {\n    const syncEngine = new MultiTabSyncEngine(\n      this.localStore,\n      this.remoteStore,\n      cfg.datastore,\n      this.sharedClientState,\n      cfg.initialUser,\n      cfg.maxConcurrentLimboResolutions\n    );\n    if (this.sharedClientState instanceof WebStorageSharedClientState) {\n      this.sharedClientState.syncEngine = syncEngine;\n    }\n    return syncEngine;\n  }\n\n  createGarbageCollectionScheduler(\n    cfg: ComponentConfiguration\n  ): GarbageCollectionScheduler | null {\n    const garbageCollector = this.persistence.referenceDelegate\n      .garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue);\n  }\n\n  createPersistence(cfg: ComponentConfiguration): Persistence {\n    debugAssert(\n      cfg.persistenceSettings.durable,\n      'Can only start durable persistence'\n    );\n\n    const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n      cfg.databaseInfo\n    );\n    const serializer = newSerializer(cfg.databaseInfo.databaseId);\n    return new IndexedDbPersistence(\n      cfg.persistenceSettings.synchronizeTabs,\n      persistenceKey,\n      cfg.clientId,\n      LruParams.withCacheSize(cfg.persistenceSettings.cacheSizeBytes),\n      cfg.asyncQueue,\n      getWindow(),\n      getDocument(),\n      serializer,\n      this.sharedClientState,\n      cfg.persistenceSettings.forceOwningTab\n    );\n  }\n\n  createSharedClientState(cfg: ComponentConfiguration): SharedClientState {\n    if (\n      cfg.persistenceSettings.durable &&\n      cfg.persistenceSettings.synchronizeTabs\n    ) {\n      const window = getWindow();\n      if (!WebStorageSharedClientState.isAvailable(window)) {\n        throw new FirestoreError(\n          Code.UNIMPLEMENTED,\n          'IndexedDB persistence is only available on platforms that support LocalStorage.'\n        );\n      }\n      const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n        cfg.databaseInfo\n      );\n      return new WebStorageSharedClientState(\n        window,\n        cfg.asyncQueue,\n        persistenceKey,\n        cfg.clientId,\n        cfg.initialUser\n      );\n    }\n    return new MemorySharedClientState();\n  }\n\n  clearPersistence(databaseInfo: DatabaseInfo): Promise<void> {\n    const persistenceKey = IndexedDbPersistence.buildStoragePrefix(\n      databaseInfo\n    );\n    return IndexedDbPersistence.clearPersistence(persistenceKey);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebChannelConnection } from './webchannel_connection';\nimport { DatabaseInfo } from '../../core/database_info';\nimport { Connection } from '../../remote/connection';\nimport { ConnectivityMonitor } from '../../remote/connectivity_monitor';\nimport { BrowserConnectivityMonitor } from './connectivity_monitor';\nimport { NoopConnectivityMonitor } from '../../remote/connectivity_monitor_noop';\n\n/** Initializes the WebChannelConnection for the browser. */\nexport function newConnection(databaseInfo: DatabaseInfo): Promise<Connection> {\n  return Promise.resolve(new WebChannelConnection(databaseInfo));\n}\n\n/** Return the Platform-specific connectivity monitor. */\nexport function newConnectivityMonitor(): ConnectivityMonitor {\n  if (BrowserConnectivityMonitor.isAvailable()) {\n    return new BrowserConnectivityMonitor();\n  } else {\n    return new NoopConnectivityMonitor();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CredentialsProvider } from '../api/credentials';\nimport { User } from '../auth/user';\nimport { LocalStore } from '../local/local_store';\nimport { GarbageCollectionScheduler, Persistence } from '../local/persistence';\nimport { Document, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { Mutation } from '../model/mutation';\nimport { newDatastore } from '../remote/datastore';\nimport { RemoteStore } from '../remote/remote_store';\nimport { AsyncQueue, wrapInUserErrorIfRecoverable } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport { logDebug } from '../util/log';\nimport { Deferred } from '../util/promise';\nimport {\n  EventManager,\n  ListenOptions,\n  Observer,\n  QueryListener\n} from './event_manager';\nimport { SyncEngine } from './sync_engine';\nimport { View } from './view';\n\nimport { SharedClientState } from '../local/shared_client_state';\nimport { AutoId } from '../util/misc';\nimport { DatabaseId, DatabaseInfo } from './database_info';\nimport { Query } from './query';\nimport { Transaction } from './transaction';\nimport { ViewSnapshot } from './view_snapshot';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from './component_provider';\nimport { newConnection } from '../platform/connection';\nimport { newSerializer } from '../platform/serializer';\n\nconst LOG_TAG = 'FirestoreClient';\nconst MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n\n/** DOMException error code constants. */\nconst DOM_EXCEPTION_INVALID_STATE = 11;\nconst DOM_EXCEPTION_ABORTED = 20;\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n\nexport type PersistenceSettings =\n  | {\n      readonly durable: false;\n    }\n  | {\n      readonly durable: true;\n      readonly cacheSizeBytes: number;\n      readonly synchronizeTabs: boolean;\n      readonly forceOwningTab: boolean;\n    };\n\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the\n * pieces of the client SDK architecture. It is responsible for creating the\n * async queue that is shared by all of the other components in the system.\n */\nexport class FirestoreClient {\n  // NOTE: These should technically have '|undefined' in the types, since\n  // they're initialized asynchronously rather than in the constructor, but\n  // given that all work is done on the async queue and we assert that\n  // initialization completes before any other work is queued, we're cheating\n  // with the types rather than littering the code with '!' or unnecessary\n  // undefined checks.\n  private eventMgr!: EventManager;\n  private persistence!: Persistence;\n  private localStore!: LocalStore;\n  private remoteStore!: RemoteStore;\n  private syncEngine!: SyncEngine;\n  private gcScheduler!: GarbageCollectionScheduler | null;\n\n  // PORTING NOTE: SharedClientState is only used for multi-tab web.\n  private sharedClientState!: SharedClientState;\n\n  private readonly clientId = AutoId.newId();\n\n  constructor(\n    private databaseInfo: DatabaseInfo,\n    private credentials: CredentialsProvider,\n    /**\n     * Asynchronous queue responsible for all of our internal processing. When\n     * we get incoming work from the user (via public API) or the network\n     * (incoming GRPC messages), we should always schedule onto this queue.\n     * This ensures all of our work is properly serialized (e.g. we don't\n     * start processing a new operation while the previous one is waiting for\n     * an async I/O to complete).\n     */\n    private asyncQueue: AsyncQueue\n  ) {}\n\n  /**\n   * Starts up the FirestoreClient, returning only whether or not enabling\n   * persistence succeeded.\n   *\n   * The intent here is to \"do the right thing\" as far as users are concerned.\n   * Namely, in cases where offline persistence is requested and possible,\n   * enable it, but otherwise fall back to persistence disabled. For the most\n   * part we expect this to succeed one way or the other so we don't expect our\n   * users to actually wait on the firestore.enablePersistence Promise since\n   * they generally won't care.\n   *\n   * Of course some users actually do care about whether or not persistence\n   * was successfully enabled, so the Promise returned from this method\n   * indicates this outcome.\n   *\n   * This presents a problem though: even before enablePersistence resolves or\n   * rejects, users may have made calls to e.g. firestore.collection() which\n   * means that the FirestoreClient in there will be available and will be\n   * enqueuing actions on the async queue.\n   *\n   * Meanwhile any failure of an operation on the async queue causes it to\n   * panic and reject any further work, on the premise that unhandled errors\n   * are fatal.\n   *\n   * Consequently the fallback is handled internally here in start, and if the\n   * fallback succeeds we signal success to the async queue even though the\n   * start() itself signals failure.\n   *\n   * @param componentProvider Provider that returns all core components.\n   * @param persistenceSettings Settings object to configure offline\n   *     persistence.\n   * @returns A deferred result indicating the user-visible result of enabling\n   *     offline persistence. This method will reject this if IndexedDB fails to\n   *     start for any reason. If usePersistence is false this is\n   *     unconditionally resolved.\n   */\n  start(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    this.verifyNotTerminated();\n    // We defer our initialization until we get the current user from\n    // setChangeListener(). We block the async queue until we got the initial\n    // user and the initialization is completed. This will prevent any scheduled\n    // work from happening before initialization is completed.\n    //\n    // If initializationDone resolved then the FirestoreClient is in a usable\n    // state.\n    const initializationDone = new Deferred<void>();\n\n    // If usePersistence is true, certain classes of errors while starting are\n    // recoverable but only by falling back to persistence disabled.\n    //\n    // If there's an error in the first case but not in recovery we cannot\n    // reject the promise blocking the async queue because this will cause the\n    // async queue to panic.\n    const persistenceResult = new Deferred<void>();\n\n    let initialized = false;\n    this.credentials.setChangeListener(user => {\n      if (!initialized) {\n        initialized = true;\n\n        logDebug(LOG_TAG, 'Initializing. user=', user.uid);\n\n        return this.initializeComponents(\n          componentProvider,\n          persistenceSettings,\n          user,\n          persistenceResult\n        ).then(initializationDone.resolve, initializationDone.reject);\n      } else {\n        this.asyncQueue.enqueueRetryable(() =>\n          this.remoteStore.handleCredentialChange(user)\n        );\n      }\n    });\n\n    // Block the async queue until initialization is done\n    this.asyncQueue.enqueueAndForget(() => {\n      return initializationDone.promise;\n    });\n\n    // Return only the result of enabling persistence. Note that this does not\n    // need to await the completion of initializationDone because the result of\n    // this method should not reflect any other kind of failure to start.\n    return persistenceResult.promise;\n  }\n\n  /** Enables the network connection and requeues all pending operations. */\n  enableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      return this.syncEngine.enableNetwork();\n    });\n  }\n\n  /**\n   * Initializes persistent storage, attempting to use IndexedDB if\n   * usePersistence is true or memory-only if false.\n   *\n   * If IndexedDB fails because it's already open in another tab or because the\n   * platform can't possibly support our implementation then this method rejects\n   * the persistenceResult and falls back on memory-only persistence.\n   *\n   * @param componentProvider The provider that provides all core componennts\n   *     for IndexedDB or memory-backed persistence\n   * @param persistenceSettings Settings object to configure offline persistence\n   * @param user The initial user\n   * @param persistenceResult A deferred result indicating the user-visible\n   *     result of enabling offline persistence. This method will reject this if\n   *     IndexedDB fails to start for any reason. If usePersistence is false\n   *     this is unconditionally resolved.\n   * @returns a Promise indicating whether or not initialization should\n   *     continue, i.e. that one of the persistence implementations actually\n   *     succeeded.\n   */\n  private async initializeComponents(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings,\n    user: User,\n    persistenceResult: Deferred<void>\n  ): Promise<void> {\n    try {\n      // TODO(mrschmidt): Ideally, ComponentProvider would also initialize\n      // Datastore (without duplicating the initializing logic once per\n      // provider).\n\n      const connection = await newConnection(this.databaseInfo);\n      const serializer = newSerializer(this.databaseInfo.databaseId);\n      const datastore = newDatastore(connection, this.credentials, serializer);\n\n      await componentProvider.initialize({\n        asyncQueue: this.asyncQueue,\n        databaseInfo: this.databaseInfo,\n        datastore,\n        clientId: this.clientId,\n        initialUser: user,\n        maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS,\n        persistenceSettings\n      });\n\n      this.persistence = componentProvider.persistence;\n      this.sharedClientState = componentProvider.sharedClientState;\n      this.localStore = componentProvider.localStore;\n      this.remoteStore = componentProvider.remoteStore;\n      this.syncEngine = componentProvider.syncEngine;\n      this.gcScheduler = componentProvider.gcScheduler;\n      this.eventMgr = componentProvider.eventManager;\n\n      // When a user calls clearPersistence() in one client, all other clients\n      // need to be terminated to allow the delete to succeed.\n      this.persistence.setDatabaseDeletedListener(async () => {\n        await this.terminate();\n      });\n\n      persistenceResult.resolve();\n    } catch (error) {\n      // Regardless of whether or not the retry succeeds, from an user\n      // perspective, offline persistence has failed.\n      persistenceResult.reject(error);\n\n      // An unknown failure on the first stage shuts everything down.\n      if (!this.canFallback(error)) {\n        throw error;\n      }\n      console.warn(\n        'Error enabling offline persistence. Falling back to' +\n          ' persistence disabled: ' +\n          error\n      );\n      return this.initializeComponents(\n        new MemoryComponentProvider(),\n        { durable: false },\n        user,\n        persistenceResult\n      );\n    }\n  }\n\n  /**\n   * Decides whether the provided error allows us to gracefully disable\n   * persistence (as opposed to crashing the client).\n   */\n  private canFallback(error: FirestoreError | DOMException): boolean {\n    if (error.name === 'FirebaseError') {\n      return (\n        error.code === Code.FAILED_PRECONDITION ||\n        error.code === Code.UNIMPLEMENTED\n      );\n    } else if (\n      typeof DOMException !== 'undefined' &&\n      error instanceof DOMException\n    ) {\n      // There are a few known circumstances where we can open IndexedDb but\n      // trying to read/write will fail (e.g. quota exceeded). For\n      // well-understood cases, we attempt to detect these and then gracefully\n      // fall back to memory persistence.\n      // NOTE: Rather than continue to add to this list, we could decide to\n      // always fall back, with the risk that we might accidentally hide errors\n      // representing actual SDK bugs.\n      return (\n        // When the browser is out of quota we could get either quota exceeded\n        // or an aborted error depending on whether the error happened during\n        // schema migration.\n        error.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||\n        error.code === DOM_EXCEPTION_ABORTED ||\n        // Firefox Private Browsing mode disables IndexedDb and returns\n        // INVALID_STATE for any usage.\n        error.code === DOM_EXCEPTION_INVALID_STATE\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks that the client has not been terminated. Ensures that other methods on\n   * this class cannot be called after the client is terminated.\n   */\n  private verifyNotTerminated(): void {\n    if (this.asyncQueue.isShuttingDown) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'The client has already been terminated.'\n      );\n    }\n  }\n\n  /** Disables the network connection. Pending operations will not complete. */\n  disableNetwork(): Promise<void> {\n    this.verifyNotTerminated();\n    return this.asyncQueue.enqueue(() => {\n      return this.syncEngine.disableNetwork();\n    });\n  }\n\n  terminate(): Promise<void> {\n    return this.asyncQueue.enqueueAndInitiateShutdown(async () => {\n      // PORTING NOTE: LocalStore does not need an explicit shutdown on web.\n      if (this.gcScheduler) {\n        this.gcScheduler.stop();\n      }\n\n      await this.remoteStore.shutdown();\n      await this.sharedClientState.shutdown();\n      await this.persistence.shutdown();\n\n      // `removeChangeListener` must be called after shutting down the\n      // RemoteStore as it will prevent the RemoteStore from retrieving\n      // auth tokens.\n      this.credentials.removeChangeListener();\n    });\n  }\n\n  /**\n   * Returns a Promise that resolves when all writes that were pending at the time this\n   * method was called received server acknowledgement. An acknowledgement can be either acceptance\n   * or rejection.\n   */\n  waitForPendingWrites(): Promise<void> {\n    this.verifyNotTerminated();\n\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.syncEngine.registerPendingWritesCallback(deferred);\n    });\n    return deferred.promise;\n  }\n\n  listen(\n    query: Query,\n    observer: Observer<ViewSnapshot>,\n    options: ListenOptions\n  ): QueryListener {\n    this.verifyNotTerminated();\n    const listener = new QueryListener(query, observer, options);\n    this.asyncQueue.enqueueAndForget(() => this.eventMgr.listen(listener));\n    return listener;\n  }\n\n  unlisten(listener: QueryListener): void {\n    // Checks for termination but does not raise error, allowing unlisten after\n    // termination to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.asyncQueue.enqueueAndForget(() => {\n      return this.eventMgr.unlisten(listener);\n    });\n  }\n\n  async getDocumentFromLocalCache(\n    docKey: DocumentKey\n  ): Promise<Document | null> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<Document | null>();\n    await this.asyncQueue.enqueue(async () => {\n      try {\n        const maybeDoc = await this.localStore.readDocument(docKey);\n        if (maybeDoc instanceof Document) {\n          deferred.resolve(maybeDoc);\n        } else if (maybeDoc instanceof NoDocument) {\n          deferred.resolve(null);\n        } else {\n          deferred.reject(\n            new FirestoreError(\n              Code.UNAVAILABLE,\n              'Failed to get document from cache. (However, this document may ' +\n                \"exist on the server. Run again without setting 'source' in \" +\n                'the GetOptions to attempt to retrieve the document from the ' +\n                'server.)'\n            )\n          );\n        }\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Failed to get document '${docKey} from cache`\n        );\n        deferred.reject(firestoreError);\n      }\n    });\n\n    return deferred.promise;\n  }\n\n  async getDocumentsFromLocalCache(query: Query): Promise<ViewSnapshot> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<ViewSnapshot>();\n    await this.asyncQueue.enqueue(async () => {\n      try {\n        const queryResult = await this.localStore.executeQuery(\n          query,\n          /* usePreviousResults= */ true\n        );\n        const view = new View(query, queryResult.remoteKeys);\n        const viewDocChanges = view.computeDocChanges(queryResult.documents);\n        const viewChange = view.applyChanges(\n          viewDocChanges,\n          /* updateLimboDocuments= */ false\n        );\n        deferred.resolve(viewChange.snapshot!);\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(\n          e,\n          `Failed to execute query '${query} against cache`\n        );\n        deferred.reject(firestoreError);\n      }\n    });\n    return deferred.promise;\n  }\n\n  write(mutations: Mutation[]): Promise<void> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<void>();\n    this.asyncQueue.enqueueAndForget(() =>\n      this.syncEngine.write(mutations, deferred)\n    );\n    return deferred.promise;\n  }\n\n  databaseId(): DatabaseId {\n    return this.databaseInfo.databaseId;\n  }\n\n  addSnapshotsInSyncListener(observer: Observer<void>): void {\n    this.verifyNotTerminated();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.eventMgr.addSnapshotsInSyncListener(observer);\n      return Promise.resolve();\n    });\n  }\n\n  removeSnapshotsInSyncListener(observer: Observer<void>): void {\n    // Checks for shutdown but does not raise error, allowing remove after\n    // shutdown to be a no-op.\n    if (this.clientTerminated) {\n      return;\n    }\n    this.asyncQueue.enqueueAndForget(() => {\n      this.eventMgr.removeSnapshotsInSyncListener(observer);\n      return Promise.resolve();\n    });\n  }\n\n  get clientTerminated(): boolean {\n    // Technically, the asyncQueue is still running, but only accepting operations\n    // related to termination or supposed to be run after termination. It is effectively\n    // terminated to the eyes of users.\n    return this.asyncQueue.isShuttingDown;\n  }\n\n  transaction<T>(\n    updateFunction: (transaction: Transaction) => Promise<T>\n  ): Promise<T> {\n    this.verifyNotTerminated();\n    const deferred = new Deferred<T>();\n    this.asyncQueue.enqueueAndForget(() => {\n      this.syncEngine.runTransaction(this.asyncQueue, updateFunction, deferred);\n      return Promise.resolve();\n    });\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observer } from '../core/event_manager';\nimport { EventHandler } from './misc';\n\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nexport class AsyncObserver<T> implements Observer<T> {\n  /**\n   * When set to true, will not raise future events. Necessary to deal with\n   * async detachment of listener.\n   */\n  private muted = false;\n\n  constructor(private observer: Observer<T>) {}\n\n  next(value: T): void {\n    this.scheduleEvent(this.observer.next, value);\n  }\n\n  error(error: Error): void {\n    this.scheduleEvent(this.observer.error, error);\n  }\n\n  mute(): void {\n    this.muted = true;\n  }\n\n  private scheduleEvent<E>(eventHandler: EventHandler<E>, event: E): void {\n    if (!this.muted) {\n      setTimeout(() => {\n        if (!this.muted) {\n          eventHandler(event);\n        }\n      }, 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '../model/object_value';\n\n/**\n * Observer/Subscribe interfaces.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\n// Allow for any of the Observer methods to be undefined.\nexport interface PartialObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport interface Unsubscribe {\n  (): void;\n}\n\nexport function isPartialObserver(obj: unknown): boolean {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj: unknown, methods: string[]): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const object = obj as JsonObject<unknown>;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { DocumentKeyReference } from './user_data_reader';\nimport { Blob } from './blob';\nimport { GeoPoint } from './geo_point';\nimport { Timestamp } from './timestamp';\nimport { DatabaseId } from '../core/database_info';\nimport { DocumentKey } from '../model/document_key';\nimport {\n  normalizeByteString,\n  normalizeNumber,\n  normalizeTimestamp,\n  typeOrder\n} from '../model/values';\nimport {\n  getLocalWriteTime,\n  getPreviousValue\n} from '../model/server_timestamps';\nimport { fail, hardAssert } from '../util/assert';\nimport { forEach } from '../util/obj';\nimport { TypeOrder } from '../model/object_value';\nimport { ResourcePath } from '../model/path';\nimport { isValidResourceName } from '../remote/serializer';\nimport { logError } from '../util/log';\n\nexport type ServerTimestampBehavior = 'estimate' | 'previous' | 'none';\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n */\nexport class UserDataWriter {\n  constructor(\n    private readonly databaseId: DatabaseId,\n    private readonly timestampsInSnapshots: boolean,\n    private readonly serverTimestampBehavior: ServerTimestampBehavior,\n    private readonly referenceFactory: (\n      key: DocumentKey\n    ) => DocumentKeyReference<firestore.DocumentData>\n  ) {}\n\n  convertValue(value: api.Value): unknown {\n    switch (typeOrder(value)) {\n      case TypeOrder.NullValue:\n        return null;\n      case TypeOrder.BooleanValue:\n        return value.booleanValue!;\n      case TypeOrder.NumberValue:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case TypeOrder.TimestampValue:\n        return this.convertTimestamp(value.timestampValue!);\n      case TypeOrder.ServerTimestampValue:\n        return this.convertServerTimestamp(value);\n      case TypeOrder.StringValue:\n        return value.stringValue!;\n      case TypeOrder.BlobValue:\n        return new Blob(normalizeByteString(value.bytesValue!));\n      case TypeOrder.RefValue:\n        return this.convertReference(value.referenceValue!);\n      case TypeOrder.GeoPointValue:\n        return this.convertGeoPoint(value.geoPointValue!);\n      case TypeOrder.ArrayValue:\n        return this.convertArray(value.arrayValue!);\n      case TypeOrder.ObjectValue:\n        return this.convertObject(value.mapValue!);\n      default:\n        throw fail('Invalid value type: ' + JSON.stringify(value));\n    }\n  }\n\n  private convertObject(mapValue: api.MapValue): firestore.DocumentData {\n    const result: firestore.DocumentData = {};\n    forEach(mapValue.fields || {}, (key, value) => {\n      result[key] = this.convertValue(value);\n    });\n    return result;\n  }\n\n  private convertGeoPoint(value: api.LatLng): GeoPoint {\n    return new GeoPoint(\n      normalizeNumber(value.latitude),\n      normalizeNumber(value.longitude)\n    );\n  }\n\n  private convertArray(arrayValue: api.ArrayValue): unknown[] {\n    return (arrayValue.values || []).map(value => this.convertValue(value));\n  }\n\n  private convertServerTimestamp(value: api.Value): unknown {\n    switch (this.serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n\n  private convertTimestamp(value: api.Timestamp): Timestamp | Date {\n    const normalizedValue = normalizeTimestamp(value);\n    const timestamp = new Timestamp(\n      normalizedValue.seconds,\n      normalizedValue.nanos\n    );\n    if (this.timestampsInSnapshots) {\n      return timestamp;\n    } else {\n      return timestamp.toDate();\n    }\n  }\n\n  private convertReference(\n    name: string\n  ): DocumentKeyReference<firestore.DocumentData> {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(\n      isValidResourceName(resourcePath),\n      'ReferenceValue is not valid ' + name\n    );\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(this.databaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\n        `Document ${key} contains a document ` +\n          `reference within a different database (` +\n          `${databaseId.projectId}/${databaseId.database}) which is not ` +\n          `supported. It will be treated as a reference in the current ` +\n          `database (${this.databaseId.projectId}/${this.databaseId.database}) ` +\n          `instead.`\n      );\n    }\n\n    return this.referenceFactory(key);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from '@firebase/firestore-types';\n\nimport * as api from '../protos/firestore_proto_api';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { _FirebaseApp, FirebaseService } from '@firebase/app-types/private';\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { ListenOptions } from '../core/event_manager';\nimport {\n  ComponentProvider,\n  MemoryComponentProvider\n} from '../core/component_provider';\nimport { FirestoreClient, PersistenceSettings } from '../core/firestore_client';\nimport {\n  Bound,\n  Direction,\n  FieldFilter,\n  Filter,\n  Operator,\n  OrderBy,\n  Query as InternalQuery\n} from '../core/query';\nimport { Transaction as InternalTransaction } from '../core/transaction';\nimport { ChangeType, ViewSnapshot } from '../core/view_snapshot';\nimport { LruParams } from '../local/lru_garbage_collector';\nimport { Document, MaybeDocument, NoDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DeleteMutation, Mutation, Precondition } from '../model/mutation';\nimport { FieldPath, ResourcePath } from '../model/path';\nimport { isServerTimestamp } from '../model/server_timestamps';\nimport { refValue } from '../model/values';\nimport { debugAssert, fail } from '../util/assert';\nimport { AsyncObserver } from '../util/async_observer';\nimport { AsyncQueue } from '../util/async_queue';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateAtLeastNumberOfArgs,\n  validateBetweenNumberOfArgs,\n  validateDefined,\n  validateExactNumberOfArgs,\n  validateNamedOptionalPropertyEquals,\n  validateNamedOptionalType,\n  validateNamedType,\n  validateOptionalArgType,\n  validateOptionalArrayElements,\n  validateOptionNames,\n  validatePositiveNumber,\n  validateStringEnum,\n  valueDescription\n} from '../util/input_validation';\nimport { getLogLevel, logError, LogLevel, setLogLevel } from '../util/log';\nimport { AutoId } from '../util/misc';\nimport { Deferred, Rejecter, Resolver } from '../util/promise';\nimport { FieldPath as ExternalFieldPath } from './field_path';\n\nimport {\n  CredentialsProvider,\n  CredentialsSettings,\n  EmptyCredentialsProvider,\n  FirebaseCredentialsProvider,\n  makeCredentialsProvider\n} from './credentials';\nimport {\n  CompleteFn,\n  ErrorFn,\n  isPartialObserver,\n  NextFn,\n  PartialObserver,\n  Unsubscribe\n} from './observer';\nimport {\n  DocumentKeyReference,\n  fieldPathFromArgument,\n  UntypedFirestoreDataConverter,\n  UserDataReader\n} from './user_data_reader';\nimport { UserDataWriter } from './user_data_writer';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\nconst DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;\nconst DEFAULT_FORCE_LONG_POLLING = false;\nconst DEFAULT_IGNORE_UNDEFINED_PROPERTIES = false;\n\n/**\n * Constant used to indicate the LRU garbage collection should be disabled.\n * Set this value as the `cacheSizeBytes` on the settings passed to the\n * `Firestore` instance.\n */\nexport const CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED;\n\n// enablePersistence() defaults:\nconst DEFAULT_SYNCHRONIZE_TABS = false;\n\n/** Undocumented, private additional settings not exposed in our public API. */\ninterface PrivateSettings extends firestore.Settings {\n  // Can be a google-auth-library or gapi client.\n  credentials?: CredentialsSettings;\n}\n\n/**\n * Options that can be provided in the Firestore constructor when not using\n * Firebase (aka standalone mode).\n */\nexport interface FirestoreDatabase {\n  projectId: string;\n  database?: string;\n}\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied firestore.Settings object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettings {\n  /** The hostname to connect to. */\n  readonly host: string;\n\n  /** Whether to use SSL when connecting. */\n  readonly ssl: boolean;\n\n  readonly timestampsInSnapshots: boolean;\n\n  readonly cacheSizeBytes: number;\n\n  readonly forceLongPolling: boolean;\n\n  readonly ignoreUndefinedProperties: boolean;\n\n  // Can be a google-auth-library or gapi client.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  credentials?: any;\n\n  constructor(settings: PrivateSettings) {\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"Can't provide ssl option if host option is not set\"\n        );\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      validateNamedType('settings', 'non-empty string', 'host', settings.host);\n      this.host = settings.host;\n\n      validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);\n      this.ssl = settings.ssl ?? DEFAULT_SSL;\n    }\n    validateOptionNames('settings', settings, [\n      'host',\n      'ssl',\n      'credentials',\n      'timestampsInSnapshots',\n      'cacheSizeBytes',\n      'experimentalForceLongPolling',\n      'ignoreUndefinedProperties'\n    ]);\n\n    validateNamedOptionalType(\n      'settings',\n      'object',\n      'credentials',\n      settings.credentials\n    );\n    this.credentials = settings.credentials;\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'timestampsInSnapshots',\n      settings.timestampsInSnapshots\n    );\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'ignoreUndefinedProperties',\n      settings.ignoreUndefinedProperties\n    );\n\n    // Nobody should set timestampsInSnapshots anymore, but the error depends on\n    // whether they set it to true or false...\n    if (settings.timestampsInSnapshots === true) {\n      logError(\n        \"The setting 'timestampsInSnapshots: true' is no longer required \" +\n          'and should be removed.'\n      );\n    } else if (settings.timestampsInSnapshots === false) {\n      logError(\n        \"Support for 'timestampsInSnapshots: false' will be removed soon. \" +\n          'You must update your code to handle Timestamp objects.'\n      );\n    }\n    this.timestampsInSnapshots =\n      settings.timestampsInSnapshots ?? DEFAULT_TIMESTAMPS_IN_SNAPSHOTS;\n    this.ignoreUndefinedProperties =\n      settings.ignoreUndefinedProperties ?? DEFAULT_IGNORE_UNDEFINED_PROPERTIES;\n\n    validateNamedOptionalType(\n      'settings',\n      'number',\n      'cacheSizeBytes',\n      settings.cacheSizeBytes\n    );\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (\n        settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `cacheSizeBytes must be at least ${LruParams.MINIMUM_CACHE_SIZE_BYTES}`\n        );\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    validateNamedOptionalType(\n      'settings',\n      'boolean',\n      'experimentalForceLongPolling',\n      settings.experimentalForceLongPolling\n    );\n    this.forceLongPolling =\n      settings.experimentalForceLongPolling ?? DEFAULT_FORCE_LONG_POLLING;\n  }\n\n  isEqual(other: FirestoreSettings): boolean {\n    return (\n      this.host === other.host &&\n      this.ssl === other.ssl &&\n      this.timestampsInSnapshots === other.timestampsInSnapshots &&\n      this.credentials === other.credentials &&\n      this.cacheSizeBytes === other.cacheSizeBytes &&\n      this.forceLongPolling === other.forceLongPolling &&\n      this.ignoreUndefinedProperties === other.ignoreUndefinedProperties\n    );\n  }\n}\n\n/**\n * The root reference to the database.\n */\nexport class Firestore implements firestore.FirebaseFirestore, FirebaseService {\n  // The objects that are a part of this API are exposed to third-parties as\n  // compiled javascript so we want to flag our private members with a leading\n  // underscore to discourage their use.\n  readonly _databaseId: DatabaseId;\n  private readonly _persistenceKey: string;\n  private readonly _componentProvider: ComponentProvider;\n  private _credentials: CredentialsProvider;\n  private readonly _firebaseApp: FirebaseApp | null = null;\n  private _settings: FirestoreSettings;\n\n  // The firestore client instance. This will be available as soon as\n  // configureClient is called, but any calls against it will block until\n  // setup has completed.\n  //\n  // Operations on the _firestoreClient don't block on _firestoreReady. Those\n  // are already set to synchronize on the async queue.\n  private _firestoreClient: FirestoreClient | undefined;\n\n  // Public for use in tests.\n  // TODO(mikelehen): Use modularized initialization instead.\n  readonly _queue = new AsyncQueue();\n\n  _userDataReader: UserDataReader | undefined;\n\n  // Note: We are using `MemoryComponentProvider` as a default\n  // ComponentProvider to ensure backwards compatibility with the format\n  // expected by the console build.\n  constructor(\n    databaseIdOrApp: FirestoreDatabase | FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    componentProvider: ComponentProvider = new MemoryComponentProvider()\n  ) {\n    if (typeof (databaseIdOrApp as FirebaseApp).options === 'object') {\n      // This is very likely a Firebase app object\n      // TODO(b/34177605): Can we somehow use instanceof?\n      const app = databaseIdOrApp as FirebaseApp;\n      this._firebaseApp = app;\n      this._databaseId = Firestore.databaseIdFromApp(app);\n      this._persistenceKey = app.name;\n      this._credentials = new FirebaseCredentialsProvider(authProvider);\n    } else {\n      const external = databaseIdOrApp as FirestoreDatabase;\n      if (!external.projectId) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Must provide projectId'\n        );\n      }\n\n      this._databaseId = new DatabaseId(external.projectId, external.database);\n      // Use a default persistenceKey that lines up with FirebaseApp.\n      this._persistenceKey = '[DEFAULT]';\n      this._credentials = new EmptyCredentialsProvider();\n    }\n\n    this._componentProvider = componentProvider;\n    this._settings = new FirestoreSettings({});\n  }\n\n  get _dataReader(): UserDataReader {\n    debugAssert(\n      !!this._firestoreClient,\n      'Cannot obtain UserDataReader before instance is intitialized'\n    );\n    if (!this._userDataReader) {\n      // Lazy initialize UserDataReader once the settings are frozen\n      this._userDataReader = new UserDataReader(\n        this._databaseId,\n        this._settings.ignoreUndefinedProperties\n      );\n    }\n    return this._userDataReader;\n  }\n\n  settings(settingsLiteral: firestore.Settings): void {\n    validateExactNumberOfArgs('Firestore.settings', arguments, 1);\n    validateArgType('Firestore.settings', 'object', 1, settingsLiteral);\n\n    const newSettings = new FirestoreSettings(settingsLiteral);\n    if (this._firestoreClient && !this._settings.isEqual(newSettings)) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and its settings can no longer ' +\n          'be changed. You can only call settings() before calling any other ' +\n          'methods on a Firestore object.'\n      );\n    }\n\n    this._settings = newSettings;\n    if (newSettings.credentials !== undefined) {\n      this._credentials = makeCredentialsProvider(newSettings.credentials);\n    }\n  }\n\n  enableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.enableNetwork();\n  }\n\n  disableNetwork(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.disableNetwork();\n  }\n\n  enablePersistence(settings?: firestore.PersistenceSettings): Promise<void> {\n    if (this._firestoreClient) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Firestore has already been started and persistence can no longer ' +\n          'be enabled. You can only call enablePersistence() before calling ' +\n          'any other methods on a Firestore object.'\n      );\n    }\n\n    let synchronizeTabs = false;\n    let experimentalForceOwningTab = false;\n\n    if (settings) {\n      if (settings.experimentalTabSynchronization !== undefined) {\n        logError(\n          \"The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead.\"\n        );\n      }\n      synchronizeTabs =\n        settings.synchronizeTabs ??\n        settings.experimentalTabSynchronization ??\n        DEFAULT_SYNCHRONIZE_TABS;\n\n      experimentalForceOwningTab = settings.experimentalForceOwningTab\n        ? settings.experimentalForceOwningTab\n        : false;\n\n      if (synchronizeTabs && experimentalForceOwningTab) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          \"The 'experimentalForceOwningTab' setting cannot be used with 'synchronizeTabs'.\"\n        );\n      }\n    }\n\n    return this.configureClient(this._componentProvider, {\n      durable: true,\n      cacheSizeBytes: this._settings.cacheSizeBytes,\n      synchronizeTabs,\n      forceOwningTab: experimentalForceOwningTab\n    });\n  }\n\n  async clearPersistence(): Promise<void> {\n    if (\n      this._firestoreClient !== undefined &&\n      !this._firestoreClient.clientTerminated\n    ) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'Persistence cannot be cleared after this Firestore instance is initialized.'\n      );\n    }\n\n    const deferred = new Deferred<void>();\n    this._queue.enqueueAndForgetEvenAfterShutdown(async () => {\n      try {\n        const databaseInfo = this.makeDatabaseInfo();\n        await this._componentProvider.clearPersistence(databaseInfo);\n        deferred.resolve();\n      } catch (e) {\n        deferred.reject(e);\n      }\n    });\n    return deferred.promise;\n  }\n\n  terminate(): Promise<void> {\n    (this.app as _FirebaseApp)._removeServiceInstance('firestore');\n    return this.INTERNAL.delete();\n  }\n\n  get _isTerminated(): boolean {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.clientTerminated;\n  }\n\n  waitForPendingWrites(): Promise<void> {\n    this.ensureClientConfigured();\n    return this._firestoreClient!.waitForPendingWrites();\n  }\n\n  onSnapshotsInSync(observer: PartialObserver<void>): Unsubscribe;\n  onSnapshotsInSync(onSync: () => void): Unsubscribe;\n  onSnapshotsInSync(arg: unknown): Unsubscribe {\n    this.ensureClientConfigured();\n\n    if (isPartialObserver(arg)) {\n      return this.onSnapshotsInSyncInternal(arg as PartialObserver<void>);\n    } else {\n      validateArgType('Firestore.onSnapshotsInSync', 'function', 1, arg);\n      const observer: PartialObserver<void> = {\n        next: arg as () => void\n      };\n      return this.onSnapshotsInSyncInternal(observer);\n    }\n  }\n\n  private onSnapshotsInSyncInternal(\n    observer: PartialObserver<void>\n  ): Unsubscribe {\n    const errHandler = (err: Error): void => {\n      throw fail('Uncaught Error in onSnapshotsInSync');\n    };\n    const asyncObserver = new AsyncObserver<void>({\n      next: () => {\n        if (observer.next) {\n          observer.next();\n        }\n      },\n      error: errHandler\n    });\n    this._firestoreClient!.addSnapshotsInSyncListener(asyncObserver);\n    return () => {\n      asyncObserver.mute();\n      this._firestoreClient!.removeSnapshotsInSyncListener(asyncObserver);\n    };\n  }\n\n  ensureClientConfigured(): FirestoreClient {\n    if (!this._firestoreClient) {\n      // Kick off starting the client but don't actually wait for it.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.configureClient(new MemoryComponentProvider(), {\n        durable: false\n      });\n    }\n    return this._firestoreClient as FirestoreClient;\n  }\n\n  private makeDatabaseInfo(): DatabaseInfo {\n    return new DatabaseInfo(\n      this._databaseId,\n      this._persistenceKey,\n      this._settings.host,\n      this._settings.ssl,\n      this._settings.forceLongPolling\n    );\n  }\n\n  private configureClient(\n    componentProvider: ComponentProvider,\n    persistenceSettings: PersistenceSettings\n  ): Promise<void> {\n    debugAssert(!!this._settings.host, 'FirestoreSettings.host is not set');\n\n    debugAssert(\n      !this._firestoreClient,\n      'configureClient() called multiple times'\n    );\n\n    const databaseInfo = this.makeDatabaseInfo();\n\n    this._firestoreClient = new FirestoreClient(\n      databaseInfo,\n      this._credentials,\n      this._queue\n    );\n\n    return this._firestoreClient.start(componentProvider, persistenceSettings);\n  }\n\n  private static databaseIdFromApp(app: FirebaseApp): DatabaseId {\n    if (!contains(app.options, 'projectId')) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        '\"projectId\" not provided in firebase.initializeApp.'\n      );\n    }\n\n    const projectId = app.options.projectId;\n    if (!projectId || typeof projectId !== 'string') {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'projectId must be a string in FirebaseApp.options'\n      );\n    }\n    return new DatabaseId(projectId);\n  }\n\n  get app(): FirebaseApp {\n    if (!this._firebaseApp) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\n          'not available'\n      );\n    }\n    return this._firebaseApp;\n  }\n\n  INTERNAL = {\n    delete: async (): Promise<void> => {\n      // The client must be initalized to ensure that all subsequent API usage\n      // throws an exception.\n      this.ensureClientConfigured();\n      await this._firestoreClient!.terminate();\n    }\n  };\n\n  collection(pathString: string): firestore.CollectionReference {\n    validateExactNumberOfArgs('Firestore.collection', arguments, 1);\n    validateArgType('Firestore.collection', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return new CollectionReference(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  doc(pathString: string): firestore.DocumentReference {\n    validateExactNumberOfArgs('Firestore.doc', arguments, 1);\n    validateArgType('Firestore.doc', 'non-empty string', 1, pathString);\n    this.ensureClientConfigured();\n    return DocumentReference.forPath(\n      ResourcePath.fromString(pathString),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  collectionGroup(collectionId: string): firestore.Query {\n    validateExactNumberOfArgs('Firestore.collectionGroup', arguments, 1);\n    validateArgType(\n      'Firestore.collectionGroup',\n      'non-empty string',\n      1,\n      collectionId\n    );\n    if (collectionId.indexOf('/') >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid collection ID '${collectionId}' passed to function ` +\n          `Firestore.collectionGroup(). Collection IDs must not contain '/'.`\n      );\n    }\n    this.ensureClientConfigured();\n    return new Query(\n      new InternalQuery(ResourcePath.EMPTY_PATH, collectionId),\n      this,\n      /* converter= */ null\n    );\n  }\n\n  runTransaction<T>(\n    updateFunction: (transaction: firestore.Transaction) => Promise<T>\n  ): Promise<T> {\n    validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);\n    validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);\n    return this.ensureClientConfigured().transaction(\n      (transaction: InternalTransaction) => {\n        return updateFunction(new Transaction(this, transaction));\n      }\n    );\n  }\n\n  batch(): firestore.WriteBatch {\n    this.ensureClientConfigured();\n\n    return new WriteBatch(this);\n  }\n\n  static get logLevel(): firestore.LogLevel {\n    switch (getLogLevel()) {\n      case LogLevel.DEBUG:\n        return 'debug';\n      case LogLevel.ERROR:\n        return 'error';\n      case LogLevel.SILENT:\n        return 'silent';\n      case LogLevel.WARN:\n        return 'warn';\n      case LogLevel.INFO:\n        return 'info';\n      case LogLevel.VERBOSE:\n        return 'verbose';\n      default:\n        // The default log level is error\n        return 'error';\n    }\n  }\n\n  static setLogLevel(level: firestore.LogLevel): void {\n    validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);\n    validateStringEnum(\n      'setLogLevel',\n      ['debug', 'error', 'silent', 'warn', 'info', 'verbose'],\n      1,\n      level\n    );\n    setLogLevel(level);\n  }\n\n  // Note: this is not a property because the minifier can't work correctly with\n  // the way TypeScript compiler outputs properties.\n  _areTimestampsInSnapshotsEnabled(): boolean {\n    return this._settings.timestampsInSnapshots;\n  }\n}\n\n/**\n * A reference to a transaction.\n */\nexport class Transaction implements firestore.Transaction {\n  constructor(\n    private _firestore: Firestore,\n    private _transaction: InternalTransaction\n  ) {}\n\n  get<T>(\n    documentRef: firestore.DocumentReference<T>\n  ): Promise<firestore.DocumentSnapshot<T>> {\n    validateExactNumberOfArgs('Transaction.get', arguments, 1);\n    const ref = validateReference(\n      'Transaction.get',\n      documentRef,\n      this._firestore\n    );\n    return this._transaction\n      .lookup([ref._key])\n      .then((docs: MaybeDocument[]) => {\n        if (!docs || docs.length !== 1) {\n          return fail('Mismatch in docs returned from document lookup.');\n        }\n        const doc = docs[0];\n        if (doc instanceof NoDocument) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            null,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else if (doc instanceof Document) {\n          return new DocumentSnapshot<T>(\n            this._firestore,\n            ref._key,\n            doc,\n            /* fromCache= */ false,\n            /* hasPendingWrites= */ false,\n            ref._converter\n          );\n        } else {\n          throw fail(\n            `BatchGetDocumentsRequest returned unexpected document type: ${doc.constructor.name}`\n          );\n        }\n      });\n  }\n\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): Transaction {\n    validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);\n    const ref = validateReference(\n      'Transaction.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('Transaction.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      'Transaction.set'\n    );\n    const parsed = this._firestore._dataReader.parseSetData(\n      functionName,\n      convertedValue,\n      options\n    );\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Transaction {\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateVarargs(\n        'Transaction.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('Transaction.update', arguments, 2);\n      ref = validateReference(\n        'Transaction.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateData(\n        'Transaction.update',\n        fieldOrUpdateData\n      );\n    }\n\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): Transaction {\n    validateExactNumberOfArgs('Transaction.delete', arguments, 1);\n    const ref = validateReference(\n      'Transaction.delete',\n      documentRef,\n      this._firestore\n    );\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\nexport class WriteBatch implements firestore.WriteBatch {\n  private _mutations = [] as Mutation[];\n  private _committed = false;\n\n  constructor(private _firestore: Firestore) {}\n\n  set<T>(\n    documentRef: firestore.DocumentReference<T>,\n    value: T,\n    options?: firestore.SetOptions\n  ): WriteBatch {\n    validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.set',\n      documentRef,\n      this._firestore\n    );\n    options = validateSetOptions('WriteBatch.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      ref._converter,\n      value,\n      'WriteBatch.set'\n    );\n    const parsed = this._firestore._dataReader.parseSetData(\n      functionName,\n      convertedValue,\n      options\n    );\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    value: firestore.UpdateData\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch;\n  update(\n    documentRef: firestore.DocumentReference<unknown>,\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): WriteBatch {\n    this.verifyNotCommitted();\n\n    let ref;\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateVarargs(\n        'WriteBatch.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('WriteBatch.update', arguments, 2);\n      ref = validateReference(\n        'WriteBatch.update',\n        documentRef,\n        this._firestore\n      );\n      parsed = this._firestore._dataReader.parseUpdateData(\n        'WriteBatch.update',\n        fieldOrUpdateData\n      );\n    }\n\n    this._mutations = this._mutations.concat(\n      parsed.toMutations(ref._key, Precondition.exists(true))\n    );\n    return this;\n  }\n\n  delete(documentRef: firestore.DocumentReference<unknown>): WriteBatch {\n    validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);\n    this.verifyNotCommitted();\n    const ref = validateReference(\n      'WriteBatch.delete',\n      documentRef,\n      this._firestore\n    );\n    this._mutations = this._mutations.concat(\n      new DeleteMutation(ref._key, Precondition.none())\n    );\n    return this;\n  }\n\n  commit(): Promise<void> {\n    this.verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._firestore.ensureClientConfigured().write(this._mutations);\n    }\n\n    return Promise.resolve();\n  }\n\n  private verifyNotCommitted(): void {\n    if (this._committed) {\n      throw new FirestoreError(\n        Code.FAILED_PRECONDITION,\n        'A write batch can no longer be used after commit() ' +\n          'has been called.'\n      );\n    }\n  }\n}\n\n/**\n * A reference to a particular document in a collection in the database.\n */\nexport class DocumentReference<T = firestore.DocumentData>\n  extends DocumentKeyReference<T>\n  implements firestore.DocumentReference<T> {\n  private _firestoreClient: FirestoreClient;\n\n  constructor(\n    public _key: DocumentKey,\n    readonly firestore: Firestore,\n    readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(firestore._databaseId, _key, _converter);\n    this._firestoreClient = this.firestore.ensureClientConfigured();\n  }\n\n  static forPath<U>(\n    path: ResourcePath,\n    firestore: Firestore,\n    converter: firestore.FirestoreDataConverter<U> | null\n  ): DocumentReference<U> {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid document reference. Document ' +\n          'references must have an even number of segments, but ' +\n          `${path.canonicalString()} has ${path.length}`\n      );\n    }\n    return new DocumentReference(new DocumentKey(path), firestore, converter);\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get parent(): firestore.CollectionReference<T> {\n    return new CollectionReference(\n      this._key.path.popLast(),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  get path(): string {\n    return this._key.path.canonicalString();\n  }\n\n  collection(\n    pathString: string\n  ): firestore.CollectionReference<firestore.DocumentData> {\n    validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);\n    validateArgType(\n      'DocumentReference.collection',\n      'non-empty string',\n      1,\n      pathString\n    );\n    if (!pathString) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Must provide a non-empty collection name to collection()'\n      );\n    }\n    const path = ResourcePath.fromString(pathString);\n    return new CollectionReference(\n      this._key.path.child(path),\n      this.firestore,\n      /* converter= */ null\n    );\n  }\n\n  isEqual(other: firestore.DocumentReference<T>): boolean {\n    if (!(other instanceof DocumentReference)) {\n      throw invalidClassError('isEqual', 'DocumentReference', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._key.isEqual(other._key) &&\n      this._converter === other._converter\n    );\n  }\n\n  set(\n    value: firestore.DocumentData,\n    options?: firestore.SetOptions\n  ): Promise<void>;\n  set(value: T, options?: firestore.SetOptions): Promise<void> {\n    validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);\n    options = validateSetOptions('DocumentReference.set', options);\n    const [convertedValue, functionName] = applyFirestoreDataConverter(\n      this._converter,\n      value,\n      'DocumentReference.set'\n    );\n    const parsed = this.firestore._dataReader.parseSetData(\n      functionName,\n      convertedValue,\n      options\n    );\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.none())\n    );\n  }\n\n  update(value: firestore.UpdateData): Promise<void>;\n  update(\n    field: string | ExternalFieldPath,\n    value: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void>;\n  update(\n    fieldOrUpdateData: string | ExternalFieldPath | firestore.UpdateData,\n    value?: unknown,\n    ...moreFieldsAndValues: unknown[]\n  ): Promise<void> {\n    let parsed;\n\n    if (\n      typeof fieldOrUpdateData === 'string' ||\n      fieldOrUpdateData instanceof ExternalFieldPath\n    ) {\n      validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);\n      parsed = this.firestore._dataReader.parseUpdateVarargs(\n        'DocumentReference.update',\n        fieldOrUpdateData,\n        value,\n        moreFieldsAndValues\n      );\n    } else {\n      validateExactNumberOfArgs('DocumentReference.update', arguments, 1);\n      parsed = this.firestore._dataReader.parseUpdateData(\n        'DocumentReference.update',\n        fieldOrUpdateData\n      );\n    }\n\n    return this._firestoreClient.write(\n      parsed.toMutations(this._key, Precondition.exists(true))\n    );\n  }\n\n  delete(): Promise<void> {\n    validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);\n    return this._firestoreClient.write([\n      new DeleteMutation(this._key, Precondition.none())\n    ]);\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.DocumentSnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs(\n      'DocumentReference.onSnapshot',\n      arguments,\n      1,\n      4\n    );\n    let options: firestore.SnapshotListenOptions = {\n      includeMetadataChanges: false\n    };\n    let observer: PartialObserver<firestore.DocumentSnapshot<T>>;\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('DocumentReference.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'DocumentReference.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    const internalOptions = {\n      includeMetadataChanges: options.includeMetadataChanges\n    };\n\n    if (isPartialObserver(args[currArg])) {\n      observer = args[currArg] as PartialObserver<\n        firestore.DocumentSnapshot<T>\n      >;\n    } else {\n      validateArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg,\n        args[currArg]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'DocumentReference.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n      observer = {\n        next: args[currArg] as NextFn<firestore.DocumentSnapshot<T>>,\n        error: args[currArg + 1] as ErrorFn,\n        complete: args[currArg + 2] as CompleteFn\n      };\n    }\n    return this.onSnapshotInternal(internalOptions, observer);\n  }\n\n  private onSnapshotInternal(\n    options: ListenOptions,\n    observer: PartialObserver<firestore.DocumentSnapshot<T>>\n  ): Unsubscribe {\n    let errHandler = (err: Error): void => {\n      console.error('Uncaught Error in onSnapshot:', err);\n    };\n    if (observer.error) {\n      errHandler = observer.error.bind(observer);\n    }\n\n    const asyncObserver = new AsyncObserver<ViewSnapshot>({\n      next: snapshot => {\n        if (observer.next) {\n          debugAssert(\n            snapshot.docs.size <= 1,\n            'Too many documents returned on a document query'\n          );\n          const doc = snapshot.docs.get(this._key);\n\n          observer.next(\n            new DocumentSnapshot(\n              this.firestore,\n              this._key,\n              doc,\n              snapshot.fromCache,\n              snapshot.hasPendingWrites,\n              this._converter\n            )\n          );\n        }\n      },\n      error: errHandler\n    });\n    const internalListener = this._firestoreClient.listen(\n      InternalQuery.atPath(this._key.path),\n      asyncObserver,\n      options\n    );\n\n    return () => {\n      asyncObserver.mute();\n      this._firestoreClient.unlisten(internalListener);\n    };\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.DocumentSnapshot<T>> {\n    validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);\n    validateGetOptions('DocumentReference.get', options);\n    return new Promise(\n      (resolve: Resolver<firestore.DocumentSnapshot<T>>, reject: Rejecter) => {\n        if (options && options.source === 'cache') {\n          this.firestore\n            .ensureClientConfigured()\n            .getDocumentFromLocalCache(this._key)\n            .then(doc => {\n              resolve(\n                new DocumentSnapshot(\n                  this.firestore,\n                  this._key,\n                  doc,\n                  /*fromCache=*/ true,\n                  doc instanceof Document ? doc.hasLocalMutations : false,\n                  this._converter\n                )\n              );\n            }, reject);\n        } else {\n          this.getViaSnapshotListener(resolve, reject, options);\n        }\n      }\n    );\n  }\n\n  private getViaSnapshotListener(\n    resolve: Resolver<firestore.DocumentSnapshot<T>>,\n    reject: Rejecter,\n    options?: firestore.GetOptions\n  ): void {\n    const unlisten = this.onSnapshotInternal(\n      {\n        includeMetadataChanges: true,\n        waitForSyncWhenOnline: true\n      },\n      {\n        next: (snap: firestore.DocumentSnapshot<T>) => {\n          // Remove query first before passing event to user to avoid\n          // user actions affecting the now stale query.\n          unlisten();\n\n          if (!snap.exists && snap.metadata.fromCache) {\n            // TODO(dimond): If we're online and the document doesn't\n            // exist then we resolve with a doc.exists set to false. If\n            // we're offline however, we reject the Promise in this\n            // case. Two options: 1) Cache the negative response from\n            // the server so we can deliver that even when you're\n            // offline 2) Actually reject the Promise in the online case\n            // if the document doesn't exist.\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get document because the client is ' + 'offline.'\n              )\n            );\n          } else if (\n            snap.exists &&\n            snap.metadata.fromCache &&\n            options &&\n            options.source === 'server'\n          ) {\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get document from server. (However, this ' +\n                  'document does exist in the local cache. Run again ' +\n                  'without setting source to \"server\" to ' +\n                  'retrieve the cached document.)'\n              )\n            );\n          } else {\n            resolve(snap);\n          }\n        },\n        error: reject\n      }\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.DocumentReference<U> {\n    return new DocumentReference<U>(this._key, this.firestore, converter);\n  }\n}\n\nclass SnapshotMetadata implements firestore.SnapshotMetadata {\n  constructor(\n    readonly hasPendingWrites: boolean,\n    readonly fromCache: boolean\n  ) {}\n\n  isEqual(other: firestore.SnapshotMetadata): boolean {\n    return (\n      this.hasPendingWrites === other.hasPendingWrites &&\n      this.fromCache === other.fromCache\n    );\n  }\n}\n\n/**\n * Options interface that can be provided to configure the deserialization of\n * DocumentSnapshots.\n */\nexport interface SnapshotOptions extends firestore.SnapshotOptions {}\n\nexport class DocumentSnapshot<T = firestore.DocumentData>\n  implements firestore.DocumentSnapshot<T> {\n  constructor(\n    private _firestore: Firestore,\n    private _key: DocumentKey,\n    public _document: Document | null,\n    private _fromCache: boolean,\n    private _hasPendingWrites: boolean,\n    private readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {}\n\n  data(options?: firestore.SnapshotOptions): T | undefined {\n    validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);\n    options = validateSnapshotOptions('DocumentSnapshot.data', options);\n    if (!this._document) {\n      return undefined;\n    } else {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      if (this._converter) {\n        const snapshot = new QueryDocumentSnapshot(\n          this._firestore,\n          this._key,\n          this._document,\n          this._fromCache,\n          this._hasPendingWrites,\n          /* converter= */ null\n        );\n        return this._converter.fromFirestore(snapshot, options);\n      } else {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps || 'none',\n          key =>\n            new DocumentReference(key, this._firestore, /* converter= */ null)\n        );\n        return userDataWriter.convertValue(this._document.toProto()) as T;\n      }\n    }\n  }\n\n  get(\n    fieldPath: string | ExternalFieldPath,\n    options?: firestore.SnapshotOptions\n  ): unknown {\n    validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);\n    options = validateSnapshotOptions('DocumentSnapshot.get', options);\n    if (this._document) {\n      const value = this._document\n        .data()\n        .field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        const userDataWriter = new UserDataWriter(\n          this._firestore._databaseId,\n          this._firestore._areTimestampsInSnapshotsEnabled(),\n          options.serverTimestamps || 'none',\n          key => new DocumentReference(key, this._firestore, this._converter)\n        );\n        return userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n\n  get id(): string {\n    return this._key.path.lastSegment();\n  }\n\n  get ref(): firestore.DocumentReference<T> {\n    return new DocumentReference<T>(\n      this._key,\n      this._firestore,\n      this._converter\n    );\n  }\n\n  get exists(): boolean {\n    return this._document !== null;\n  }\n\n  get metadata(): firestore.SnapshotMetadata {\n    return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);\n  }\n\n  isEqual(other: firestore.DocumentSnapshot<T>): boolean {\n    if (!(other instanceof DocumentSnapshot)) {\n      throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);\n    }\n    return (\n      this._firestore === other._firestore &&\n      this._fromCache === other._fromCache &&\n      this._key.isEqual(other._key) &&\n      (this._document === null\n        ? other._document === null\n        : this._document.isEqual(other._document)) &&\n      this._converter === other._converter\n    );\n  }\n}\n\nexport class QueryDocumentSnapshot<T = firestore.DocumentData>\n  extends DocumentSnapshot<T>\n  implements firestore.QueryDocumentSnapshot<T> {\n  data(options?: SnapshotOptions): T {\n    const data = super.data(options);\n    debugAssert(\n      data !== undefined,\n      'Document in a QueryDocumentSnapshot should exist'\n    );\n    return data;\n  }\n}\n\n/** The query class that is shared between the full, lite and legacy SDK. */\nexport class BaseQuery {\n  constructor(\n    protected _databaseId: DatabaseId,\n    protected _dataReader: UserDataReader,\n    protected _query: InternalQuery\n  ) {}\n\n  protected createFilter(\n    fieldPath: FieldPath,\n    op: Operator,\n    value: unknown\n  ): FieldFilter {\n    let fieldValue: api.Value;\n    if (fieldPath.isKeyField()) {\n      if (\n        op === Operator.ARRAY_CONTAINS ||\n        op === Operator.ARRAY_CONTAINS_ANY\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid Query. You can't perform '${op}' ` +\n            'queries on FieldPath.documentId().'\n        );\n      } else if (op === Operator.IN) {\n        this.validateDisjunctiveFilterElements(value, op);\n        const referenceList: api.Value[] = [];\n        for (const arrayValue of value as api.Value[]) {\n          referenceList.push(this.parseDocumentIdValue(arrayValue));\n        }\n        fieldValue = { arrayValue: { values: referenceList } };\n      } else {\n        fieldValue = this.parseDocumentIdValue(value);\n      }\n    } else {\n      if (op === Operator.IN || op === Operator.ARRAY_CONTAINS_ANY) {\n        this.validateDisjunctiveFilterElements(value, op);\n      }\n      fieldValue = this._dataReader.parseQueryValue(\n        'Query.where',\n        value,\n        // We only allow nested arrays for IN queries.\n        /** allowArrays = */ op === Operator.IN\n      );\n    }\n    const filter = FieldFilter.create(fieldPath, op, fieldValue);\n    this.validateNewFilter(filter);\n    return filter;\n  }\n\n  protected createOrderBy(fieldPath: FieldPath, direction: Direction): OrderBy {\n    if (this._query.startAt !== null) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You must not call Query.startAt() or ' +\n          'Query.startAfter() before calling Query.orderBy().'\n      );\n    }\n    if (this._query.endAt !== null) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid query. You must not call Query.endAt() or ' +\n          'Query.endBefore() before calling Query.orderBy().'\n      );\n    }\n    const orderBy = new OrderBy(fieldPath, direction);\n    this.validateNewOrderBy(orderBy);\n    return orderBy;\n  }\n\n  /**\n   * Create a Bound from a query and a document.\n   *\n   * Note that the Bound will always include the key of the document\n   * and so only the provided document will compare equal to the returned\n   * position.\n   *\n   * Will throw if the document does not contain all fields of the order by\n   * of the query or if any of the fields in the order by are an uncommitted\n   * server timestamp.\n   */\n  protected boundFromDocument(\n    methodName: string,\n    doc: Document | null,\n    before: boolean\n  ): Bound {\n    if (!doc) {\n      throw new FirestoreError(\n        Code.NOT_FOUND,\n        `Can't use a DocumentSnapshot that doesn't exist for ` +\n          `${methodName}().`\n      );\n    }\n\n    const components: api.Value[] = [];\n\n    // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n    for (const orderBy of this._query.orderBy) {\n      if (orderBy.field.isKeyField()) {\n        components.push(refValue(this._databaseId, doc.key));\n      } else {\n        const value = doc.field(orderBy.field);\n        if (isServerTimestamp(value)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. You are trying to start or end a query using a ' +\n              'document for which the field \"' +\n              orderBy.field +\n              '\" is an uncommitted server timestamp. (Since the value of ' +\n              'this field is unknown, you cannot start/end a query with it.)'\n          );\n        } else if (value !== null) {\n          components.push(value);\n        } else {\n          const field = orderBy.field.canonicalString();\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. You are trying to start or end a query using a ` +\n              `document for which the field '${field}' (used as the ` +\n              `orderBy) does not exist.`\n          );\n        }\n      }\n    }\n    return new Bound(components, before);\n  }\n\n  /**\n   * Converts a list of field values to a Bound for the given query.\n   */\n  protected boundFromFields(\n    methodName: string,\n    values: unknown[],\n    before: boolean\n  ): Bound {\n    // Use explicit order by's because it has to match the query the user made\n    const orderBy = this._query.explicitOrderBy;\n    if (values.length > orderBy.length) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Too many arguments provided to ${methodName}(). ` +\n          `The number of arguments must be less than or equal to the ` +\n          `number of Query.orderBy() clauses`\n      );\n    }\n\n    const components: api.Value[] = [];\n    for (let i = 0; i < values.length; i++) {\n      const rawValue = values[i];\n      const orderByComponent = orderBy[i];\n      if (orderByComponent.field.isKeyField()) {\n        if (typeof rawValue !== 'string') {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. Expected a string for document ID in ` +\n              `${methodName}(), but got a ${typeof rawValue}`\n          );\n        }\n        if (\n          !this._query.isCollectionGroupQuery() &&\n          rawValue.indexOf('/') !== -1\n        ) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. When querying a collection and ordering by FieldPath.documentId(), ` +\n              `the value passed to ${methodName}() must be a plain document ID, but ` +\n              `'${rawValue}' contains a slash.`\n          );\n        }\n        const path = this._query.path.child(ResourcePath.fromString(rawValue));\n        if (!DocumentKey.isDocumentKey(path)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            `Invalid query. When querying a collection group and ordering by ` +\n              `FieldPath.documentId(), the value passed to ${methodName}() must result in a ` +\n              `valid document path, but '${path}' is not because it contains an odd number ` +\n              `of segments.`\n          );\n        }\n        const key = new DocumentKey(path);\n        components.push(refValue(this._databaseId, key));\n      } else {\n        const wrapped = this._dataReader.parseQueryValue(methodName, rawValue);\n        components.push(wrapped);\n      }\n    }\n\n    return new Bound(components, before);\n  }\n\n  protected validateHasExplicitOrderByForLimitToLast(\n    query: InternalQuery\n  ): void {\n    if (query.hasLimitToLast() && query.explicitOrderBy.length === 0) {\n      throw new FirestoreError(\n        Code.UNIMPLEMENTED,\n        'limitToLast() queries require specifying at least one orderBy() clause'\n      );\n    }\n  }\n\n  /**\n   * Parses the given documentIdValue into a ReferenceValue, throwing\n   * appropriate errors if the value is anything other than a DocumentReference\n   * or String, or if the string is malformed.\n   */\n  private parseDocumentIdValue(documentIdValue: unknown): api.Value {\n    if (typeof documentIdValue === 'string') {\n      if (documentIdValue === '') {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          'Invalid query. When querying with FieldPath.documentId(), you ' +\n            'must provide a valid document ID, but it was an empty string.'\n        );\n      }\n      if (\n        !this._query.isCollectionGroupQuery() &&\n        documentIdValue.indexOf('/') !== -1\n      ) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection by ` +\n            `FieldPath.documentId(), you must provide a plain document ID, but ` +\n            `'${documentIdValue}' contains a '/' character.`\n        );\n      }\n      const path = this._query.path.child(\n        ResourcePath.fromString(documentIdValue)\n      );\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid query. When querying a collection group by ` +\n            `FieldPath.documentId(), the value provided must result in a valid document path, ` +\n            `but '${path}' is not because it has an odd number of segments (${path.length}).`\n        );\n      }\n      return refValue(this._databaseId, new DocumentKey(path));\n    } else if (documentIdValue instanceof DocumentKeyReference) {\n      return refValue(this._databaseId, documentIdValue._key);\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. When querying with FieldPath.documentId(), you must provide a valid ` +\n          `string or a DocumentReference, but it was: ` +\n          `${valueDescription(documentIdValue)}.`\n      );\n    }\n  }\n\n  /**\n   * Validates that the value passed into a disjunctrive filter satisfies all\n   * array requirements.\n   */\n  private validateDisjunctiveFilterElements(\n    value: unknown,\n    operator: Operator\n  ): void {\n    if (!Array.isArray(value) || value.length === 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid Query. A non-empty array is required for ' +\n          `'${operator.toString()}' filters.`\n      );\n    }\n    if (value.length > 10) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters support a ` +\n          'maximum of 10 elements in the value array.'\n      );\n    }\n    if (value.indexOf(null) >= 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'null' ` +\n          'in the value array.'\n      );\n    }\n    if (value.filter(element => Number.isNaN(element)).length > 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid Query. '${operator.toString()}' filters cannot contain 'NaN' ` +\n          'in the value array.'\n      );\n    }\n  }\n\n  private validateNewFilter(filter: Filter): void {\n    if (filter instanceof FieldFilter) {\n      const arrayOps = [Operator.ARRAY_CONTAINS, Operator.ARRAY_CONTAINS_ANY];\n      const disjunctiveOps = [Operator.IN, Operator.ARRAY_CONTAINS_ANY];\n      const isArrayOp = arrayOps.indexOf(filter.op) >= 0;\n      const isDisjunctiveOp = disjunctiveOps.indexOf(filter.op) >= 0;\n\n      if (filter.isInequality()) {\n        const existingField = this._query.getInequalityFilterField();\n        if (existingField !== null && !existingField.isEqual(filter.field)) {\n          throw new FirestoreError(\n            Code.INVALID_ARGUMENT,\n            'Invalid query. All where filters with an inequality' +\n              ' (<, <=, >, or >=) must be on the same field. But you have' +\n              ` inequality filters on '${existingField.toString()}'` +\n              ` and '${filter.field.toString()}'`\n          );\n        }\n\n        const firstOrderByField = this._query.getFirstOrderByField();\n        if (firstOrderByField !== null) {\n          this.validateOrderByAndInequalityMatch(\n            filter.field,\n            firstOrderByField\n          );\n        }\n      } else if (isDisjunctiveOp || isArrayOp) {\n        // You can have at most 1 disjunctive filter and 1 array filter. Check if\n        // the new filter conflicts with an existing one.\n        let conflictingOp: Operator | null = null;\n        if (isDisjunctiveOp) {\n          conflictingOp = this._query.findFilterOperator(disjunctiveOps);\n        }\n        if (conflictingOp === null && isArrayOp) {\n          conflictingOp = this._query.findFilterOperator(arrayOps);\n        }\n        if (conflictingOp != null) {\n          // We special case when it's a duplicate op to give a slightly clearer error message.\n          if (conflictingOp === filter.op) {\n            throw new FirestoreError(\n              Code.INVALID_ARGUMENT,\n              'Invalid query. You cannot use more than one ' +\n                `'${filter.op.toString()}' filter.`\n            );\n          } else {\n            throw new FirestoreError(\n              Code.INVALID_ARGUMENT,\n              `Invalid query. You cannot use '${filter.op.toString()}' filters ` +\n                `with '${conflictingOp.toString()}' filters.`\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private validateNewOrderBy(orderBy: OrderBy): void {\n    if (this._query.getFirstOrderByField() === null) {\n      // This is the first order by. It must match any inequality.\n      const inequalityField = this._query.getInequalityFilterField();\n      if (inequalityField !== null) {\n        this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);\n      }\n    }\n  }\n\n  private validateOrderByAndInequalityMatch(\n    inequality: FieldPath,\n    orderBy: FieldPath\n  ): void {\n    if (!orderBy.isEqual(inequality)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Invalid query. You have a where filter with an inequality ` +\n          `(<, <=, >, or >=) on field '${inequality.toString()}' ` +\n          `and so you must also use '${inequality.toString()}' ` +\n          `as your first Query.orderBy(), but your first Query.orderBy() ` +\n          `is on field '${orderBy.toString()}' instead.`\n      );\n    }\n  }\n}\n\nexport class Query<T = firestore.DocumentData> extends BaseQuery\n  implements firestore.Query<T> {\n  constructor(\n    public _query: InternalQuery,\n    readonly firestore: Firestore,\n    protected readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(firestore._databaseId, firestore._dataReader, _query);\n  }\n\n  where(\n    field: string | ExternalFieldPath,\n    opStr: firestore.WhereFilterOp,\n    value: unknown\n  ): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.where', arguments, 3);\n    validateDefined('Query.where', 3, value);\n\n    // Enumerated from the WhereFilterOp type in index.d.ts.\n    const whereFilterOpEnums = [\n      Operator.LESS_THAN,\n      Operator.LESS_THAN_OR_EQUAL,\n      Operator.EQUAL,\n      Operator.GREATER_THAN_OR_EQUAL,\n      Operator.GREATER_THAN,\n      Operator.ARRAY_CONTAINS,\n      Operator.IN,\n      Operator.ARRAY_CONTAINS_ANY\n    ];\n    const op = validateStringEnum('Query.where', whereFilterOpEnums, 2, opStr);\n    const fieldPath = fieldPathFromArgument('Query.where', field);\n    const filter = this.createFilter(fieldPath, op, value);\n    return new Query(\n      this._query.addFilter(filter),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  orderBy(\n    field: string | ExternalFieldPath,\n    directionStr?: firestore.OrderByDirection\n  ): firestore.Query<T> {\n    validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);\n    validateOptionalArgType(\n      'Query.orderBy',\n      'non-empty string',\n      2,\n      directionStr\n    );\n    let direction: Direction;\n    if (directionStr === undefined || directionStr === 'asc') {\n      direction = Direction.ASCENDING;\n    } else if (directionStr === 'desc') {\n      direction = Direction.DESCENDING;\n    } else {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Function Query.orderBy() has unknown direction '${directionStr}', ` +\n          `expected 'asc' or 'desc'.`\n      );\n    }\n    const fieldPath = fieldPathFromArgument('Query.orderBy', field);\n    const orderBy = this.createOrderBy(fieldPath, direction);\n    return new Query(\n      this._query.addOrderBy(orderBy),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limit(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limit', arguments, 1);\n    validateArgType('Query.limit', 'number', 1, n);\n    validatePositiveNumber('Query.limit', 1, n);\n    return new Query(\n      this._query.withLimitToFirst(n),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  limitToLast(n: number): firestore.Query<T> {\n    validateExactNumberOfArgs('Query.limitToLast', arguments, 1);\n    validateArgType('Query.limitToLast', 'number', 1, n);\n    validatePositiveNumber('Query.limitToLast', 1, n);\n    return new Query(\n      this._query.withLimitToLast(n),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAt',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      this._query.withStartAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  startAfter(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.startAfter',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      this._query.withStartAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endBefore(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endBefore',\n      docOrField,\n      fields,\n      /*before=*/ true\n    );\n    return new Query(\n      this._query.withEndAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  endAt(\n    docOrField: unknown | firestore.DocumentSnapshot<unknown>,\n    ...fields: unknown[]\n  ): firestore.Query<T> {\n    validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);\n    const bound = this.boundFromDocOrFields(\n      'Query.endAt',\n      docOrField,\n      fields,\n      /*before=*/ false\n    );\n    return new Query(\n      this._query.withEndAt(bound),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  isEqual(other: firestore.Query<T>): boolean {\n    if (!(other instanceof Query)) {\n      throw invalidClassError('isEqual', 'Query', 1, other);\n    }\n    return (\n      this.firestore === other.firestore &&\n      this._query.isEqual(other._query) &&\n      this._converter === other._converter\n    );\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.Query<U> {\n    return new Query<U>(this._query, this.firestore, converter);\n  }\n\n  /** Helper function to create a bound from a document or fields */\n  private boundFromDocOrFields(\n    methodName: string,\n    docOrField: unknown | firestore.DocumentSnapshot<T>,\n    fields: unknown[],\n    before: boolean\n  ): Bound {\n    validateDefined(methodName, 1, docOrField);\n    if (docOrField instanceof DocumentSnapshot) {\n      validateExactNumberOfArgs(methodName, [docOrField, ...fields], 1);\n      return this.boundFromDocument(methodName, docOrField._document, before);\n    } else {\n      const allFields = [docOrField].concat(fields);\n      return this.boundFromFields(methodName, allFields, before);\n    }\n  }\n\n  onSnapshot(\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe;\n  onSnapshot(\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n  onSnapshot(\n    options: firestore.SnapshotListenOptions,\n    onNext: NextFn<firestore.QuerySnapshot<T>>,\n    onError?: ErrorFn,\n    onCompletion?: CompleteFn\n  ): Unsubscribe;\n\n  onSnapshot(...args: unknown[]): Unsubscribe {\n    validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);\n    let options: firestore.SnapshotListenOptions = {};\n    let observer: PartialObserver<firestore.QuerySnapshot<T>>;\n    let currArg = 0;\n    if (\n      typeof args[currArg] === 'object' &&\n      !isPartialObserver(args[currArg])\n    ) {\n      options = args[currArg] as firestore.SnapshotListenOptions;\n      validateOptionNames('Query.onSnapshot', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'Query.onSnapshot',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n      currArg++;\n    }\n\n    if (isPartialObserver(args[currArg])) {\n      observer = args[currArg] as PartialObserver<firestore.QuerySnapshot<T>>;\n    } else {\n      validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 1,\n        args[currArg + 1]\n      );\n      validateOptionalArgType(\n        'Query.onSnapshot',\n        'function',\n        currArg + 2,\n        args[currArg + 2]\n      );\n      observer = {\n        next: args[currArg] as NextFn<firestore.QuerySnapshot<T>>,\n        error: args[currArg + 1] as ErrorFn,\n        complete: args[currArg + 2] as CompleteFn\n      };\n    }\n    this.validateHasExplicitOrderByForLimitToLast(this._query);\n    return this.onSnapshotInternal(options, observer);\n  }\n\n  private onSnapshotInternal(\n    options: ListenOptions,\n    observer: PartialObserver<firestore.QuerySnapshot<T>>\n  ): Unsubscribe {\n    let errHandler = (err: Error): void => {\n      console.error('Uncaught Error in onSnapshot:', err);\n    };\n    if (observer.error) {\n      errHandler = observer.error.bind(observer);\n    }\n\n    const asyncObserver = new AsyncObserver<ViewSnapshot>({\n      next: (result: ViewSnapshot): void => {\n        if (observer.next) {\n          observer.next(\n            new QuerySnapshot(\n              this.firestore,\n              this._query,\n              result,\n              this._converter\n            )\n          );\n        }\n      },\n      error: errHandler\n    });\n\n    const firestoreClient = this.firestore.ensureClientConfigured();\n    const internalListener = firestoreClient.listen(\n      this._query,\n      asyncObserver,\n      options\n    );\n    return (): void => {\n      asyncObserver.mute();\n      firestoreClient.unlisten(internalListener);\n    };\n  }\n\n  get(options?: firestore.GetOptions): Promise<firestore.QuerySnapshot<T>> {\n    validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);\n    validateGetOptions('Query.get', options);\n    this.validateHasExplicitOrderByForLimitToLast(this._query);\n    return new Promise(\n      (resolve: Resolver<firestore.QuerySnapshot<T>>, reject: Rejecter) => {\n        if (options && options.source === 'cache') {\n          this.firestore\n            .ensureClientConfigured()\n            .getDocumentsFromLocalCache(this._query)\n            .then((viewSnap: ViewSnapshot) => {\n              resolve(\n                new QuerySnapshot(\n                  this.firestore,\n                  this._query,\n                  viewSnap,\n                  this._converter\n                )\n              );\n            }, reject);\n        } else {\n          this.getViaSnapshotListener(resolve, reject, options);\n        }\n      }\n    );\n  }\n\n  private getViaSnapshotListener(\n    resolve: Resolver<firestore.QuerySnapshot<T>>,\n    reject: Rejecter,\n    options?: firestore.GetOptions\n  ): void {\n    const unlisten = this.onSnapshotInternal(\n      {\n        includeMetadataChanges: true,\n        waitForSyncWhenOnline: true\n      },\n      {\n        next: (result: firestore.QuerySnapshot<T>) => {\n          // Remove query first before passing event to user to avoid\n          // user actions affecting the now stale query.\n          unlisten();\n\n          if (\n            result.metadata.fromCache &&\n            options &&\n            options.source === 'server'\n          ) {\n            reject(\n              new FirestoreError(\n                Code.UNAVAILABLE,\n                'Failed to get documents from server. (However, these ' +\n                  'documents may exist in the local cache. Run again ' +\n                  'without setting source to \"server\" to ' +\n                  'retrieve the cached documents.)'\n              )\n            );\n          } else {\n            resolve(result);\n          }\n        },\n        error: reject\n      }\n    );\n  }\n}\n\nexport class QuerySnapshot<T = firestore.DocumentData>\n  implements firestore.QuerySnapshot<T> {\n  private _cachedChanges: Array<firestore.DocumentChange<T>> | null = null;\n  private _cachedChangesIncludeMetadataChanges: boolean | null = null;\n\n  readonly metadata: firestore.SnapshotMetadata;\n\n  constructor(\n    private readonly _firestore: Firestore,\n    private readonly _originalQuery: InternalQuery,\n    private readonly _snapshot: ViewSnapshot,\n    private readonly _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    this.metadata = new SnapshotMetadata(\n      _snapshot.hasPendingWrites,\n      _snapshot.fromCache\n    );\n  }\n\n  get docs(): Array<firestore.QueryDocumentSnapshot<T>> {\n    const result: Array<firestore.QueryDocumentSnapshot<T>> = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n\n  get empty(): boolean {\n    return this._snapshot.docs.isEmpty();\n  }\n\n  get size(): number {\n    return this._snapshot.docs.size;\n  }\n\n  forEach(\n    callback: (result: firestore.QueryDocumentSnapshot<T>) => void,\n    thisArg?: unknown\n  ): void {\n    validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);\n    validateArgType('QuerySnapshot.forEach', 'function', 1, callback);\n    this._snapshot.docs.forEach(doc => {\n      callback.call(thisArg, this.convertToDocumentImpl(doc));\n    });\n  }\n\n  get query(): firestore.Query<T> {\n    return new Query(this._originalQuery, this._firestore, this._converter);\n  }\n\n  docChanges(\n    options?: firestore.SnapshotListenOptions\n  ): Array<firestore.DocumentChange<T>> {\n    if (options) {\n      validateOptionNames('QuerySnapshot.docChanges', options, [\n        'includeMetadataChanges'\n      ]);\n      validateNamedOptionalType(\n        'QuerySnapshot.docChanges',\n        'boolean',\n        'includeMetadataChanges',\n        options.includeMetadataChanges\n      );\n    }\n\n    const includeMetadataChanges = !!(\n      options && options.includeMetadataChanges\n    );\n\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'To include metadata changes with your document changes, you must ' +\n          'also pass { includeMetadataChanges:true } to onSnapshot().'\n      );\n    }\n\n    if (\n      !this._cachedChanges ||\n      this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges\n    ) {\n      this._cachedChanges = changesFromSnapshot<T>(\n        this._firestore,\n        includeMetadataChanges,\n        this._snapshot,\n        this._converter\n      );\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n\n    return this._cachedChanges;\n  }\n\n  /** Check the equality. The call can be very expensive. */\n  isEqual(other: firestore.QuerySnapshot<T>): boolean {\n    if (!(other instanceof QuerySnapshot)) {\n      throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);\n    }\n\n    return (\n      this._firestore === other._firestore &&\n      this._originalQuery.isEqual(other._originalQuery) &&\n      this._snapshot.isEqual(other._snapshot) &&\n      this._converter === other._converter\n    );\n  }\n\n  private convertToDocumentImpl(doc: Document): QueryDocumentSnapshot<T> {\n    return new QueryDocumentSnapshot(\n      this._firestore,\n      doc.key,\n      doc,\n      this.metadata.fromCache,\n      this._snapshot.mutatedKeys.has(doc.key),\n      this._converter\n    );\n  }\n}\n\nexport class CollectionReference<T = firestore.DocumentData> extends Query<T>\n  implements firestore.CollectionReference<T> {\n  constructor(\n    readonly _path: ResourcePath,\n    firestore: Firestore,\n    _converter: firestore.FirestoreDataConverter<T> | null\n  ) {\n    super(InternalQuery.atPath(_path), firestore, _converter);\n    if (_path.length % 2 !== 1) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Invalid collection reference. Collection ' +\n          'references must have an odd number of segments, but ' +\n          `${_path.canonicalString()} has ${_path.length}`\n      );\n    }\n  }\n\n  get id(): string {\n    return this._query.path.lastSegment();\n  }\n\n  get parent(): firestore.DocumentReference<firestore.DocumentData> | null {\n    const parentPath = this._query.path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference<firestore.DocumentData>(\n        new DocumentKey(parentPath),\n        this.firestore,\n        /* converter= */ null\n      );\n    }\n  }\n\n  get path(): string {\n    return this._query.path.canonicalString();\n  }\n\n  doc(pathString?: string): firestore.DocumentReference<T> {\n    validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    if (arguments.length === 0) {\n      pathString = AutoId.newId();\n    }\n    validateArgType(\n      'CollectionReference.doc',\n      'non-empty string',\n      1,\n      pathString\n    );\n    const path = ResourcePath.fromString(pathString!);\n    return DocumentReference.forPath<T>(\n      this._query.path.child(path),\n      this.firestore,\n      this._converter\n    );\n  }\n\n  add(value: T): Promise<firestore.DocumentReference<T>> {\n    validateExactNumberOfArgs('CollectionReference.add', arguments, 1);\n    const convertedValue = this._converter\n      ? this._converter.toFirestore(value)\n      : value;\n    validateArgType('CollectionReference.add', 'object', 1, convertedValue);\n    const docRef = this.doc();\n    return docRef.set(value).then(() => docRef);\n  }\n\n  withConverter<U>(\n    converter: firestore.FirestoreDataConverter<U>\n  ): firestore.CollectionReference<U> {\n    return new CollectionReference<U>(this._path, this.firestore, converter);\n  }\n}\n\nfunction validateSetOptions(\n  methodName: string,\n  options: firestore.SetOptions | undefined\n): firestore.SetOptions {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  validateOptionNames(methodName, options, ['merge', 'mergeFields']);\n  validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);\n  validateOptionalArrayElements(\n    methodName,\n    'mergeFields',\n    'a string or a FieldPath',\n    options.mergeFields,\n    element =>\n      typeof element === 'string' || element instanceof ExternalFieldPath\n  );\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid options passed to function ${methodName}(): You cannot specify both \"merge\" ` +\n        `and \"mergeFields\".`\n    );\n  }\n\n  return options;\n}\n\nfunction validateSnapshotOptions(\n  methodName: string,\n  options: firestore.SnapshotOptions | undefined\n): firestore.SnapshotOptions {\n  if (options === undefined) {\n    return {};\n  }\n\n  validateOptionNames(methodName, options, ['serverTimestamps']);\n  validateNamedOptionalPropertyEquals(\n    methodName,\n    'options',\n    'serverTimestamps',\n    options.serverTimestamps,\n    ['estimate', 'previous', 'none']\n  );\n  return options;\n}\n\nfunction validateGetOptions(\n  methodName: string,\n  options: firestore.GetOptions | undefined\n): void {\n  validateOptionalArgType(methodName, 'object', 1, options);\n  if (options) {\n    validateOptionNames(methodName, options, ['source']);\n    validateNamedOptionalPropertyEquals(\n      methodName,\n      'options',\n      'source',\n      options.source,\n      ['default', 'server', 'cache']\n    );\n  }\n}\n\nfunction validateReference<T>(\n  methodName: string,\n  documentRef: firestore.DocumentReference<T>,\n  firestore: Firestore\n): DocumentKeyReference<T> {\n  if (!(documentRef instanceof DocumentKeyReference)) {\n    throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);\n  } else if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      'Provided document reference is from a different Firestore instance.'\n    );\n  } else {\n    return documentRef;\n  }\n}\n\n/**\n * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.\n *\n * Exported for testing.\n */\nexport function changesFromSnapshot<T>(\n  firestore: Firestore,\n  includeMetadataChanges: boolean,\n  snapshot: ViewSnapshot,\n  converter: firestore.FirestoreDataConverter<T> | null\n): Array<firestore.DocumentChange<T>> {\n  if (snapshot.oldDocs.isEmpty()) {\n    // Special case the first snapshot because index calculation is easy and\n    // fast\n    let lastDoc: Document;\n    let index = 0;\n    return snapshot.docChanges.map(change => {\n      const doc = new QueryDocumentSnapshot<T>(\n        firestore,\n        change.doc.key,\n        change.doc,\n        snapshot.fromCache,\n        snapshot.mutatedKeys.has(change.doc.key),\n        converter\n      );\n      debugAssert(\n        change.type === ChangeType.Added,\n        'Invalid event type for first snapshot'\n      );\n      debugAssert(\n        !lastDoc || snapshot.query.docComparator(lastDoc, change.doc) < 0,\n        'Got added events in wrong order'\n      );\n      lastDoc = change.doc;\n      return {\n        type: 'added' as firestore.DocumentChangeType,\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A DocumentSet that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = snapshot.oldDocs;\n    return snapshot.docChanges\n      .filter(\n        change => includeMetadataChanges || change.type !== ChangeType.Metadata\n      )\n      .map(change => {\n        const doc = new QueryDocumentSnapshot<T>(\n          firestore,\n          change.doc.key,\n          change.doc,\n          snapshot.fromCache,\n          snapshot.mutatedKeys.has(change.doc.key),\n          converter\n        );\n        let oldIndex = -1;\n        let newIndex = -1;\n        if (change.type !== ChangeType.Added) {\n          oldIndex = indexTracker.indexOf(change.doc.key);\n          debugAssert(oldIndex >= 0, 'Index for document not found');\n          indexTracker = indexTracker.delete(change.doc.key);\n        }\n        if (change.type !== ChangeType.Removed) {\n          indexTracker = indexTracker.add(change.doc);\n          newIndex = indexTracker.indexOf(change.doc.key);\n        }\n        return { type: resultChangeType(change.type), doc, oldIndex, newIndex };\n      });\n  }\n}\n\nfunction resultChangeType(type: ChangeType): firestore.DocumentChangeType {\n  switch (type) {\n    case ChangeType.Added:\n      return 'added';\n    case ChangeType.Modified:\n    case ChangeType.Metadata:\n      return 'modified';\n    case ChangeType.Removed:\n      return 'removed';\n    default:\n      return fail('Unknown change type: ' + type);\n  }\n}\n\n/**\n * Converts custom model object of type T into DocumentData by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to DocumentData\n * because we want to provide the user with a more specific error message if\n * their set() or fails due to invalid data originating from a toFirestore()\n * call.\n */\nexport function applyFirestoreDataConverter<T>(\n  converter: UntypedFirestoreDataConverter<T> | null,\n  value: T,\n  functionName: string\n): [firestore.DocumentData, string] {\n  let convertedValue;\n  if (converter) {\n    convertedValue = converter.toFirestore(value);\n    functionName = 'toFirestore() in ' + functionName;\n  } else {\n    convertedValue = value as firestore.DocumentData;\n  }\n  return [convertedValue, functionName];\n}\n\nfunction contains(obj: object, key: string): obj is { key: unknown } {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from './error';\n\n/** List of JavaScript builtins that cannot be reassigned. */\nconst RESERVED_READONLY_PROPS = ['length', 'name'];\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate<T extends Function>(\n  cls: T,\n  optionalMessage?: string\n): T {\n  function PublicConstructor(): never {\n    let error = 'This constructor is private.';\n    if (optionalMessage) {\n      error += ' ';\n      error += optionalMessage;\n    }\n    throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n  }\n\n  // Copy static members and prototype\n  for (const staticProp of Object.getOwnPropertyNames(cls)) {\n    if (RESERVED_READONLY_PROPS.indexOf(staticProp) === -1) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (PublicConstructor as any)[staticProp] = (cls as any)[staticProp];\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return PublicConstructor as any;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType, Provider } from '@firebase/component';\nimport {\n  CACHE_SIZE_UNLIMITED,\n  Firestore,\n  DocumentReference,\n  DocumentSnapshot,\n  QueryDocumentSnapshot,\n  Query,\n  QuerySnapshot,\n  CollectionReference,\n  Transaction,\n  WriteBatch\n} from './api/database';\nimport { Blob } from './api/blob';\nimport { FieldPath } from './api/field_path';\nimport { GeoPoint } from './api/geo_point';\nimport { Timestamp } from './api/timestamp';\nimport { makeConstructorPrivate } from './util/api';\nimport { FieldValue } from './api/field_value';\n\n// Public instance that disallows construction at runtime. Note that this still\n// allows instanceof checks.\nexport const PublicFirestore = makeConstructorPrivate(\n  Firestore,\n  'Use firebase.firestore() instead.'\n);\nexport const PublicTransaction = makeConstructorPrivate(\n  Transaction,\n  'Use firebase.firestore().runTransaction() instead.'\n);\nexport const PublicWriteBatch = makeConstructorPrivate(\n  WriteBatch,\n  'Use firebase.firestore().batch() instead.'\n);\nexport const PublicDocumentReference = makeConstructorPrivate(\n  DocumentReference,\n  'Use firebase.firestore().doc() instead.'\n);\nexport const PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);\nexport const PublicQueryDocumentSnapshot = makeConstructorPrivate(\n  QueryDocumentSnapshot\n);\nexport const PublicQuery = makeConstructorPrivate(Query);\nexport const PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);\nexport const PublicCollectionReference = makeConstructorPrivate(\n  CollectionReference,\n  'Use firebase.firestore().collection() instead.'\n);\nexport const PublicFieldValue = makeConstructorPrivate(\n  FieldValue,\n  'Use FieldValue.<field>() instead.'\n);\nexport const PublicBlob = makeConstructorPrivate(\n  Blob,\n  'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.'\n);\n\nconst firestoreNamespace = {\n  Firestore: PublicFirestore,\n  GeoPoint,\n  Timestamp,\n  Blob: PublicBlob,\n  Transaction: PublicTransaction,\n  WriteBatch: PublicWriteBatch,\n  DocumentReference: PublicDocumentReference,\n  DocumentSnapshot: PublicDocumentSnapshot,\n  Query: PublicQuery,\n  QueryDocumentSnapshot: PublicQueryDocumentSnapshot,\n  QuerySnapshot: PublicQuerySnapshot,\n  CollectionReference: PublicCollectionReference,\n  FieldPath,\n  FieldValue: PublicFieldValue,\n  setLogLevel: Firestore.setLogLevel,\n  CACHE_SIZE_UNLIMITED\n};\n\n/**\n * Configures Firestore as part of the Firebase SDK by calling registerService.\n *\n * @param firebase The FirebaseNamespace to register Firestore with\n * @param firestoreFactory A factory function that returns a new Firestore\n *    instance.\n */\nexport function configureForFirebase(\n  firebase: FirebaseNamespace,\n  firestoreFactory: (\n    app: FirebaseApp,\n    auth: Provider<FirebaseAuthInternalName>\n  ) => Firestore\n): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'firestore',\n      container => {\n        const app = container.getProvider('app').getImmediate()!;\n        return firestoreFactory(app, container.getProvider('auth-internal'));\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({ ...firestoreNamespace })\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\n\nimport { Firestore } from './src/api/database';\nimport { IndexedDbComponentProvider } from './src/core/component_provider';\nimport { configureForFirebase } from './src/config';\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Registers the main Firestore build with the components framework.\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\n */\nexport function registerFirestore(instance: FirebaseNamespace): void {\n  configureForFirebase(\n    instance,\n    (app, auth) => new Firestore(app, auth, new IndexedDbComponentProvider())\n  );\n  instance.registerVersion(name, version);\n}\n\nregisterFirestore(firebase);\n"],"names":["SDK_VERSION","firebase","__PRIVATE_logClient","Logger","__PRIVATE_getLogLevel","logLevel","__PRIVATE_logDebug","msg","LogLevel","DEBUG","args","obj","map","__PRIVATE_argToString","debug","__PRIVATE_logError","ERROR","error","value","JSON","stringify","e","fail","__PRIVATE_failure","message","Error","__PRIVATE_hardAssert","assertion","__PRIVATE_debugCast","constructor","__PRIVATE_randomBytes","__PRIVATE_nBytes","crypto","self","msCrypto","bytes","Uint8Array","getRandomValues","__PRIVATE_i","Math","floor","random","[object Object]","__PRIVATE_chars","__PRIVATE_maxMultiple","length","__PRIVATE_autoId","charAt","__PRIVATE_primitiveComparator","left","right","__PRIVATE_arrayEquals","__PRIVATE_comparator","every","index","__PRIVATE_immediateSuccessor","s","__PRIVATE_databaseId","persistenceKey","host","ssl","forceLongPolling","this","projectId","database","i","other","__PRIVATE_DatabaseId","__PRIVATE_objectSize","count","key","Object","prototype","hasOwnProperty","call","forEach","fn","__PRIVATE_isEmpty","__PRIVATE_mapKeyFn","__PRIVATE_equalsFn","id","matches","__PRIVATE_inner","__PRIVATE_otherKey","get","push","splice","__PRIVATE__","entries","k","v","Code","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","code","super","toString","name","seconds","nanoseconds","FirestoreError","Timestamp","fromMillis","Date","now","date","getTime","milliseconds","toMillis","__PRIVATE_adjustedSeconds","String","padStart","timestamp","__PRIVATE_SnapshotVersion","__PRIVATE__compareTo","isEqual","segments","offset","__PRIVATE_len","__PRIVATE_BasePath","__PRIVATE_nameOrPath","slice","limit","__PRIVATE_segment","__PRIVATE_construct","size","__PRIVATE_potentialChild","end","p1","p2","min","ResourcePath","__PRIVATE_toArray","join","__PRIVATE_canonicalString","path","indexOf","split","filter","__PRIVATE_identifierRegExp","FieldPath","test","str","replace","__PRIVATE_isValidIdentifier","__PRIVATE_current","__PRIVATE_addCurrentSegment","__PRIVATE_inBackticks","c","next","__PRIVATE_DocumentKey","__PRIVATE_fromString","__PRIVATE_popFirst","collectionId","k1","k2","__PRIVATE_isNullOrUndefined","__PRIVATE_isNegativeZero","isSafeInteger","Number","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","__PRIVATE_binaryString","base64","__PRIVATE_ByteString","atob","array","fromCharCode","raw","btoa","buffer","charCodeAt","__PRIVATE_RpcCode","target","targetId","__PRIVATE_purpose","sequenceNumber","__PRIVATE_snapshotVersion","lastLimboFreeSnapshotVersion","resumeToken","__PRIVATE_EMPTY_BYTE_STRING","__PRIVATE_TargetData","__PRIVATE_isPermanentError","__PRIVATE_mapCodeFromRpcCode","RpcCode","root","__PRIVATE_LLRBNode","EMPTY","__PRIVATE_SortedMap","__PRIVATE_insert","__PRIVATE_copy","__PRIVATE_BLACK","remove","node","cmp","__PRIVATE_prunedNodes","__PRIVATE_minKey","__PRIVATE_maxKey","action","__PRIVATE_inorderTraversal","__PRIVATE_descriptions","__PRIVATE_reverseTraversal","__PRIVATE_SortedMapIterator","__PRIVATE_startKey","__PRIVATE_isReverse","__PRIVATE_nodeStack","pop","result","color","RED","n","__PRIVATE_fixUp","__PRIVATE_isRed","__PRIVATE_moveRedLeft","__PRIVATE_removeMin","__PRIVATE_smallest","__PRIVATE_rotateRight","__PRIVATE_moveRedRight","__PRIVATE_rotateLeft","__PRIVATE_colorFlip","__PRIVATE_nl","__PRIVATE_nr","__PRIVATE_blackDepth","__PRIVATE_check","pow","data","__PRIVATE_elem","cb","range","__PRIVATE_iter","__PRIVATE_getIteratorFrom","__PRIVATE_hasNext","__PRIVATE_getNext","start","__PRIVATE_getIterator","__PRIVATE_SortedSetIterator","has","add","__PRIVATE_SortedSet","__PRIVATE_thisIt","__PRIVATE_otherIt","__PRIVATE_thisElem","__PRIVATE_otherElem","__PRIVATE_res","__PRIVATE_EMPTY_MAYBE_DOCUMENT_MAP","__PRIVATE_maybeDocumentMap","__PRIVATE_nullableMaybeDocumentMap","__PRIVATE_EMPTY_DOCUMENT_MAP","__PRIVATE_documentMap","__PRIVATE_EMPTY_DOCUMENT_VERSION_MAP","__PRIVATE_EMPTY_DOCUMENT_KEY_SET","__PRIVATE_documentKeySet","set","keys","__PRIVATE_EMPTY_TARGET_ID_SET","__PRIVATE_targetIdSet","__PRIVATE_comp","__PRIVATE_d1","__PRIVATE_d2","__PRIVATE_keyedMap","__PRIVATE_sortedSet","__PRIVATE_oldSet","__PRIVATE_DocumentSet","doc","delete","__PRIVATE_thisDoc","__PRIVATE_otherDoc","__PRIVATE_docStrings","__PRIVATE_newSet","__PRIVATE_change","__PRIVATE_oldChange","__PRIVATE_changeMap","type","__PRIVATE_changes","query","docs","__PRIVATE_oldDocs","docChanges","__PRIVATE_mutatedKeys","fromCache","__PRIVATE_syncStateChanged","__PRIVATE_excludesMetadataChanges","documents","__PRIVATE_ViewSnapshot","__PRIVATE_emptySet","hasPendingWrites","__PRIVATE_otherChanges","__PRIVATE_targetChanges","__PRIVATE_targetMismatches","__PRIVATE_documentUpdates","__PRIVATE_resolvedLimboDocuments","Map","TargetChange","__PRIVATE_createSynthesizedTargetChangeForCurrentChange","__PRIVATE_RemoteEvent","__PRIVATE_addedDocuments","__PRIVATE_modifiedDocuments","__PRIVATE_removedDocuments","__PRIVATE_updatedTargetIds","removedTargetIds","__PRIVATE_newDoc","__PRIVATE_existenceFilter","state","targetIds","cause","__PRIVATE_snapshotChangesMap","Ht","__PRIVATE__current","__PRIVATE__resumeToken","he","__PRIVATE_pendingResponses","ae","__PRIVATE__hasPendingChanges","__PRIVATE_approximateByteSize","__PRIVATE_documentChanges","__PRIVATE_changeType","__PRIVATE_metadataProvider","__PRIVATE_documentTargetMap","__PRIVATE_docChange","Document","__PRIVATE_addDocumentToTarget","__PRIVATE_NoDocument","__PRIVATE_removeDocumentFromTarget","targetChange","__PRIVATE_forEachTarget","__PRIVATE_targetState","__PRIVATE_ensureTargetState","__PRIVATE_isActiveTarget","__PRIVATE_updateResumeToken","__PRIVATE_recordTargetResponse","__PRIVATE_isPending","__PRIVATE_clearPendingChanges","removeTarget","__PRIVATE_markCurrent","__PRIVATE_resetTarget","__PRIVATE_targetStates","__PRIVATE_watchChange","__PRIVATE_expectedCount","__PRIVATE_targetData","__PRIVATE_targetDataForActiveTarget","__PRIVATE_isDocumentTarget","__PRIVATE_getCurrentDocumentCountForTarget","__PRIVATE_pendingTargetResets","__PRIVATE_pendingDocumentUpdates","__PRIVATE_targetContainsDocument","__PRIVATE_hasPendingChanges","__PRIVATE_toTargetChange","__PRIVATE_pendingDocumentTargetMapping","__PRIVATE_targets","__PRIVATE_isOnlyLimboTarget","__PRIVATE_forEachWhile","__PRIVATE_remoteEvent","document","__PRIVATE_addDocumentChange","__PRIVATE_ensureDocumentTargetMapping","__PRIVATE_updatedDocument","__PRIVATE_removeDocumentChange","__PRIVATE_getRemoteKeysForTarget","__PRIVATE_recordPendingTargetRequest","__PRIVATE_TargetState","__PRIVATE_targetMapping","__PRIVATE_targetActive","__PRIVATE_getTargetDataForTarget","__PRIVATE_isServerTimestamp","mapValue","fields","__type__","stringValue","__PRIVATE_getLocalWriteTime","__PRIVATE_localWriteTime","__PRIVATE_normalizeTimestamp","__local_write_time__","timestampValue","nanos","__PRIVATE_ISO_TIMESTAMP_REG_EXP","RegExp","__PRIVATE_typeOrder","__PRIVATE_valueEquals","__PRIVATE_leftType","booleanValue","__PRIVATE_leftTimestamp","__PRIVATE_rightTimestamp","__PRIVATE_normalizeByteString","bytesValue","referenceValue","__PRIVATE_normalizeNumber","geoPointValue","latitude","longitude","integerValue","__PRIVATE_n1","doubleValue","__PRIVATE_n2","isNaN","arrayValue","values","__PRIVATE_leftMap","__PRIVATE_rightMap","__PRIVATE_arrayValueContains","__PRIVATE_haystack","__PRIVATE_needle","find","__PRIVATE_valueCompare","__PRIVATE_rightType","__PRIVATE_leftNumber","__PRIVATE_rightNumber","__PRIVATE_compareTimestamps","__PRIVATE_leftBytes","__PRIVATE_rightBytes","__PRIVATE_compareTo","__PRIVATE_leftPath","__PRIVATE_rightPath","__PRIVATE_leftSegments","__PRIVATE_rightSegments","__PRIVATE_comparison","__PRIVATE_leftArray","__PRIVATE_rightArray","compare","__PRIVATE_leftKeys","__PRIVATE_rightKeys","sort","__PRIVATE_keyCompare","canonicalId","__PRIVATE_canonifyValue","__PRIVATE_normalizedTimestamp","toBase64","__PRIVATE_fromName","__PRIVATE_geoPoint","first","__PRIVATE_sortedKeys","__PRIVATE_fraction","exec","__PRIVATE_nanoStr","substr","__PRIVATE_parsedDate","blob","fromBase64String","fromUint8Array","__PRIVATE_refValue","isArray","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_isMapValue","__PRIVATE_DIRECTIONS","asc","desc","__PRIVATE_OPERATORS","<","<=",">",">=","==","array-contains","in","array-contains-any","__PRIVATE_useProto3Json","__PRIVATE_toInteger","__PRIVATE_toDouble","serializer","Infinity","__PRIVATE_toTimestamp","toISOString","__PRIVATE_toBytes","toUint8Array","__PRIVATE_fromBytes","toVersion","version","fromVersion","__PRIVATE_fromTimestamp","__PRIVATE_toResourceName","child","__PRIVATE_fromResourceName","__PRIVATE_resource","__PRIVATE_isValidResourceName","__PRIVATE_toName","__PRIVATE_extractLocalPathFromResourceName","__PRIVATE_toQueryPath","__PRIVATE_fromQueryPath","__PRIVATE_resourceName","__PRIVATE_EMPTY_PATH","__PRIVATE_getEncodedDatabaseId","__PRIVATE_toMutationDocument","proto","__PRIVATE_toMutation","__PRIVATE_mutation","__PRIVATE_SetMutation","update","__PRIVATE_DeleteMutation","__PRIVATE_PatchMutation","updateMask","__PRIVATE_toDocumentMask","__PRIVATE_fieldMask","__PRIVATE_TransformMutation","transform","fieldTransforms","__PRIVATE_fieldTransform","__PRIVATE_ServerTimestampTransform","fieldPath","field","setToServerValue","__PRIVATE_ArrayUnionTransformOperation","appendMissingElements","elements","__PRIVATE_ArrayRemoveTransformOperation","removeAllFromArray","__PRIVATE_NumericIncrementTransformOperation","increment","__PRIVATE_operand","__PRIVATE_VerifyMutation","verify","__PRIVATE_precondition","__PRIVATE_isNone","currentDocument","updateTime","exists","__PRIVATE_fromMutation","Precondition","__PRIVATE_none","__PRIVATE_ObjectValue","__PRIVATE_paths","fieldPaths","__PRIVATE_FieldMask","__PRIVATE_fromServerFormat","instance","FieldTransform","__PRIVATE_toDocumentsTarget","__PRIVATE_toQueryTarget","structuredQuery","collectionGroup","parent","from","allDescendants","__PRIVATE_popLast","__PRIVATE_lastSegment","where","filters","__PRIVATE_protos","FieldFilter","op","unaryFilter","__PRIVATE_toFieldPathReference","fieldFilter","compositeFilter","orderBy","__PRIVATE_orderBys","order","__PRIVATE_toPropertyOrder","direction","dir","val","startAt","__PRIVATE_toCursor","endAt","cursor","before","position","__PRIVATE_fromCursor","__PRIVATE_Bound","__PRIVATE_fromFieldPathReference","__PRIVATE_fieldReference","__PRIVATE_fromFieldFilter","create","__PRIVATE_fromUnaryFilter","__PRIVATE_nanField","NaN","__PRIVATE_nullField","nullValue","__PRIVATE_canonicalFields","previousValue","__previous_value__","__PRIVATE_transformResult","apply","__PRIVATE_coercedFieldValuesArray","__PRIVATE_toUnion","some","element","__PRIVATE_toRemove","__PRIVATE_baseValue","__PRIVATE_computeBaseValue","__PRIVATE_sum","asNumber","__PRIVATE_isPrefixOf","__PRIVATE_l","r","transformResults","qe","__PRIVATE_maybeDoc","__PRIVATE_Mutation","__PRIVATE_mutationResult","__PRIVATE_verifyKeyMatches","hasCommittedMutations","__PRIVATE_baseDoc","__PRIVATE_isValidFor","__PRIVATE_getPostMutationVersion","Xe","__PRIVATE_UnknownDocument","__PRIVATE_newData","__PRIVATE_patchDocument","empty","__PRIVATE_patchObject","__PRIVATE_builder","__PRIVATE_ObjectValueBuilder","newValue","__PRIVATE_build","__PRIVATE_requireDocument","__PRIVATE_serverTransformResults","__PRIVATE_transformObject","__PRIVATE_localTransformResults","__PRIVATE_baseObject","__PRIVATE_existingValue","__PRIVATE_coercedValue","__PRIVATE_applyToRemoteDocument","__PRIVATE_applyToLocalView","__PRIVATE_setOverlay","__PRIVATE_currentLevel","__PRIVATE_overlayMap","__PRIVATE_currentSegment","currentValue","__PRIVATE_mergedResult","__PRIVATE_applyOverlay","__PRIVATE_currentPath","__PRIVATE_currentOverlays","__PRIVATE_modified","__PRIVATE_resultAtPath","__PRIVATE_pathSegment","__PRIVATE_nested","__PRIVATE_extractFieldMask","__PRIVATE_nestedFields","__PRIVATE_nestedPath","__PRIVATE_objectValue","options","__PRIVATE_hasLocalMutations","__PRIVATE_MaybeDocument","__PRIVATE_explicitOrderBy","__PRIVATE_limitType","__PRIVATE_assertValidBound","Query","__PRIVATE_memoizedOrderBy","__PRIVATE_inequalityField","__PRIVATE_getInequalityFilterField","__PRIVATE_firstOrderByField","__PRIVATE_getFirstOrderByField","__PRIVATE_isKeyField","__PRIVATE_OrderBy","__PRIVATE_keyField","__PRIVATE_foundKeyOrdering","__PRIVATE_lastDirection","__PRIVATE_newFilters","concat","__PRIVATE_newOrderBy","bound","__PRIVATE_canonifyTarget","__PRIVATE_toTarget","__PRIVATE_canonifyBound","__PRIVATE_targetEquals","__PRIVATE_comparedOnKeyField","__PRIVATE_matchesPathAndCollectionGroup","__PRIVATE_matchesOrderBy","__PRIVATE_matchesFilters","__PRIVATE_matchesBounds","__PRIVATE_isInequality","__PRIVATE_operators","__PRIVATE_memoizedTarget","__PRIVATE_newTarget","__PRIVATE_docPath","__PRIVATE_hasCollectionId","__PRIVATE_isDocumentKey","__PRIVATE_isImmediateParentOf","__PRIVATE_sortsBeforeDocument","__PRIVATE_KeyFieldInFilter","__PRIVATE_KeyFieldFilter","__PRIVATE_ArrayContainsFilter","__PRIVATE_InFilter","__PRIVATE_ArrayContainsAnyFilter","__PRIVATE_matchesComparison","p","__PRIVATE_orderByComponent","component","__PRIVATE_boundEquals","__PRIVATE_isKeyOrderBy","v1","v2","__PRIVATE_TargetImpl","__PRIVATE_targetImpl","__PRIVATE_memoizedCanonicalId","f","o","batchId","baseMutations","mutations","__PRIVATE_docKey","__PRIVATE_batchResult","__PRIVATE_mutationResults","__PRIVATE_maybeDocs","__PRIVATE_mutatedDocuments","__PRIVATE_m","__PRIVATE_mutatedDocument","reduce","batch","__PRIVATE_commitVersion","__PRIVATE_docVersions","results","__PRIVATE_versionMap","__PRIVATE_MutationBatchResult","callback","__PRIVATE_isDone","__PRIVATE_nextCallback","__PRIVATE_catchCallback","__PRIVATE_nextFn","__PRIVATE_catchFn","__PRIVATE_callbackAttached","__PRIVATE_wrapFailure","__PRIVATE_wrapSuccess","PersistencePromise","resolve","reject","Promise","__PRIVATE_wrapUserFunction","all","__PRIVATE_resolvedCount","done","__PRIVATE_err","__PRIVATE_predicates","predicate","__PRIVATE_isTrue","collection","__PRIVATE_promises","__PRIVATE_waitFor","__PRIVATE_ObjectMap","readTime","__PRIVATE__readTime","__PRIVATE_maybeDocument","__PRIVATE_assertNotApplied","transaction","__PRIVATE_documentKey","__PRIVATE_bufferedEntry","__PRIVATE_getFromCache","__PRIVATE_documentKeys","__PRIVATE_getAllFromCache","__PRIVATE_changesApplied","__PRIVATE_applyChanges","__PRIVATE_PRIMARY_LEASE_LOST_ERROR_MSG","listener","__PRIVATE_onCommittedListeners","__PRIVATE_remoteDocumentCache","__PRIVATE_mutationQueue","__PRIVATE_indexManager","__PRIVATE_getAllMutationBatchesAffectingDocumentKey","__PRIVATE_batches","__PRIVATE_getDocumentInternal","__PRIVATE_inBatches","__PRIVATE_getEntry","__PRIVATE_localView","getEntries","__PRIVATE_getLocalViewOfDocuments","__PRIVATE_baseDocs","__PRIVATE_getAllMutationBatchesAffectingDocumentKeys","__PRIVATE_applyLocalMutationsToDocuments","__PRIVATE_sinceReadTime","__PRIVATE_isDocumentQuery","__PRIVATE_getDocumentsMatchingDocumentQuery","__PRIVATE_isCollectionGroupQuery","__PRIVATE_getDocumentsMatchingCollectionGroupQuery","__PRIVATE_getDocumentsMatchingCollectionQuery","__PRIVATE_getDocument","__PRIVATE_getCollectionParents","__PRIVATE_parents","__PRIVATE_collectionQuery","__PRIVATE_asCollectionQueryAtPath","__PRIVATE_mutationBatches","__PRIVATE_getDocumentsMatchingQuery","__PRIVATE_queryResults","__PRIVATE_getAllMutationBatchesAffectingQuery","__PRIVATE_matchingMutationBatches","__PRIVATE_addMissingBaseDocuments","__PRIVATE_mergedDocuments","__PRIVATE_mutatedDoc","__PRIVATE_existingDocuments","__PRIVATE_missingBaseDocEntriesForPatching","__PRIVATE_missingBaseDocs","__PRIVATE_addedKeys","__PRIVATE_removedKeys","__PRIVATE_viewSnapshot","__PRIVATE_LocalViewChanges","__PRIVATE_sequenceNumberSyncer","__PRIVATE_sequenceNumberHandler","__PRIVATE_setPreviousValue","__PRIVATE_writeNewSequenceNumber","__PRIVATE_writeSequenceNumber","__PRIVATE_externalPreviousValue","max","__PRIVATE_nextValue","__PRIVATE_ListenSequence","promise","__PRIVATE_queue","__PRIVATE_timerId","__PRIVATE_initialDelayMs","__PRIVATE_backoffFactor","__PRIVATE_maxDelayMs","reset","__PRIVATE_currentBaseMs","cancel","__PRIVATE_desiredDelayWithJitterMs","__PRIVATE_jitterDelayMs","__PRIVATE_delaySoFarMs","__PRIVATE_lastAttemptTime","__PRIVATE_remainingDelayMs","__PRIVATE_timerPromise","__PRIVATE_enqueueAfterDelay","__PRIVATE_skipDelay","__PRIVATE_encodeResourcePath","__PRIVATE_encodeSeparator","__PRIVATE_encodeSegment","__PRIVATE_resultBuf","__PRIVATE_escapeChar","__PRIVATE_decodeResourcePath","__PRIVATE_lastReasonableEscapeIndex","__PRIVATE_segmentBuilder","__PRIVATE_currentPiece","substring","__PRIVATE_MemoryCollectionParentIndex","collectionPath","__PRIVATE_collectionParentIndex","parentPath","__PRIVATE_existingParents","__PRIVATE_added","__PRIVATE_collectionParentsCache","__PRIVATE_addOnCommittedListener","__PRIVATE_collectionParent","__PRIVATE_collectionParentsStore","put","__PRIVATE_parentPaths","IDBKeyRange","__PRIVATE_loadAll","__PRIVATE_entry","txn","__PRIVATE_IndexedDbPersistence","__PRIVATE_getStore","DbCollectionParent","store","__PRIVATE_remoteSerializer","__PRIVATE_fromDbRemoteDocument","__PRIVATE_localSerializer","__PRIVATE_remoteDoc","noDocument","__PRIVATE_fromSegments","__PRIVATE_fromDbTimestamp","unknownDocument","__PRIVATE_toDbRemoteDocument","__PRIVATE_dbReadTime","__PRIVATE_toDbTimestampKey","__PRIVATE_toProto","DbRemoteDocument","__PRIVATE_toDbTimestamp","DbNoDocument","DbUnknownDocument","__PRIVATE_fromDbTimestampKey","__PRIVATE_dbTimestampKey","DbTimestamp","__PRIVATE_dbTimestamp","__PRIVATE_fromDbMutationBatch","__PRIVATE_dbBatch","localWriteTimeMs","__PRIVATE_MutationBatch","__PRIVATE_fromDbTarget","__PRIVATE_dbTarget","__PRIVATE_documentsTarget","__PRIVATE_atPath","__PRIVATE_fromCount","__PRIVATE_filterBy","__PRIVATE_fromFilter","__PRIVATE_accum","__PRIVATE_fromPropertyOrder","__PRIVATE_fromQueryTarget","lastListenSequenceNumber","__PRIVATE_toDbTarget","__PRIVATE_queryProto","__PRIVATE_dbLastLimboFreeTimestamp","DbTarget","__PRIVATE_remoteDocumentsStore","__PRIVATE_dbKey","__PRIVATE_sizeDelta","getMetadata","metadata","byteSize","__PRIVATE_setMetadata","__PRIVATE_dbRemoteDoc","__PRIVATE_maybeDecodeDocument","fi","__PRIVATE_dbDocumentSize","__PRIVATE_forEachDbEntry","__PRIVATE_sizeMap","Ti","Ei","last","__PRIVATE_keyIter","__PRIVATE_nextKey","__PRIVATE_iterate","__PRIVATE_potentialKeyRaw","control","__PRIVATE_potentialKey","__PRIVATE_skip","__PRIVATE_immediateChildrenPathLength","__PRIVATE_iterationOptions","lowerBound","__PRIVATE_collectionKey","__PRIVATE_readTimeKey","collectionReadTimeIndex","__PRIVATE_changedDocs","__PRIVATE_lastReadTime","__PRIVATE_documentsStore","readTimeIndex","mi","reverse","__PRIVATE_IndexedDbRemoteDocumentCache","__PRIVATE_RemoteDocumentChangeBuffer","__PRIVATE_trackRemovals","__PRIVATE_documentGlobalStore","DbRemoteDocumentGlobal","__PRIVATE_documentCache","__PRIVATE_collectionParents","__PRIVATE_previousSize","__PRIVATE_documentSizes","__PRIVATE_addEntry","__PRIVATE_deletedDoc","__PRIVATE_removeEntry","__PRIVATE_addToCollectionParentIndex","updateMetadata","__PRIVATE_getSizedEntry","__PRIVATE_getResult","__PRIVATE_getSizedEntries","__PRIVATE_maybeDocuments","__PRIVATE_lastId","__PRIVATE_TargetIdGenerator","__PRIVATE_referenceDelegate","__PRIVATE_retrieveMetadata","__PRIVATE_targetIdGenerator","highestTargetId","__PRIVATE_saveMetadata","lastRemoteSnapshotVersion","__PRIVATE_targetGlobal","highestListenSequenceNumber","__PRIVATE_saveTargetData","targetCount","__PRIVATE_updateMetadataFromTargetData","__PRIVATE_removeMatchingKeysForTargetId","__PRIVATE_targetsStore","upperBound","activeTargetIds","__PRIVATE_removeTargetData","__PRIVATE_globalTargetStore","DbTargetGlobal","updated","NEGATIVE_INFINITY","POSITIVE_INFINITY","queryTargetsIndexName","found","__PRIVATE_documentTargetStore","DbTargetDocument","__PRIVATE_addReference","__PRIVATE_removeReference","Zi","documentTargetsIndex","__PRIVATE_PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG","__PRIVATE_simpleDbTransaction","__PRIVATE_currentSequenceNumber","__PRIVATE_PersistenceTransaction","allowTabSynchronization","clientId","__PRIVATE_lruParams","window","__PRIVATE_forceOwningTab","__PRIVATE_isAvailable","__PRIVATE_IndexedDbLruDelegate","__PRIVATE_dbName","__PRIVATE_MAIN_DATABASE","LocalSerializer","__PRIVATE_targetCache","__PRIVATE_IndexedDbTargetCache","__PRIVATE_IndexedDbIndexManager","localStorage","__PRIVATE_webStorage","__PRIVATE_IndexedDbTransaction","__PRIVATE_SimpleDb","__PRIVATE_openOrCreate","SCHEMA_VERSION","SchemaConverter","then","db","__PRIVATE_simpleDb","__PRIVATE_updateClientMetadataAndTryBecomePrimary","isPrimary","__PRIVATE_attachVisibilityHandler","__PRIVATE_attachWindowUnloadHook","__PRIVATE_scheduleClientMetadataAndPrimaryLeaseRefreshes","runTransaction","__PRIVATE_getHighestSequenceNumber","__PRIVATE_listenSequence","__PRIVATE__started","catch","reason","close","__PRIVATE_primaryStateListener","async","__PRIVATE_primaryState","__PRIVATE_started","__PRIVATE_databaseDeletedListener","__PRIVATE_setVersionChangeListener","event","newVersion","networkEnabled","__PRIVATE_enqueueAndForget","__PRIVATE_clientMetadataStore","DbClientMetadata","inForeground","__PRIVATE_verifyPrimaryLease","__PRIVATE_success","__PRIVATE_enqueueRetryable","__PRIVATE_canActAsPrimary","__PRIVATE_releasePrimaryLeaseIfHeld","__PRIVATE_acquireOrExtendPrimaryLease","__PRIVATE_isIndexedDbTransactionError","__PRIVATE_primaryClientStore","DbPrimaryClient","__PRIVATE_primaryClient","__PRIVATE_isLocalClient","__PRIVATE_isWithinAge","__PRIVATE_lastGarbageCollectionTime","__PRIVATE_metadataStore","__PRIVATE_existingClients","active","__PRIVATE_filterActiveClients","__PRIVATE_inactive","__PRIVATE_client","__PRIVATE_inactiveClient","__PRIVATE_inactiveClients","e_36","removeItem","__PRIVATE_zombiedClientLocalStorageKey","__PRIVATE_clientMetadataRefresher","__PRIVATE_maybeGarbageCollectMultiClientState","ownerId","__PRIVATE_currentPrimary","leaseTimestampMs","__PRIVATE_isClientZombied","__PRIVATE_otherClient","__PRIVATE_otherClientHasBetterNetworkState","__PRIVATE_otherClientHasBetterVisibility","__PRIVATE_otherClientHasSameNetworkState","__PRIVATE_markClientZombied","__PRIVATE_detachVisibilityHandler","__PRIVATE_detachWindowUnloadHook","__PRIVATE_removeClientMetadata","__PRIVATE_removeClientZombiedEntry","__PRIVATE_clients","__PRIVATE_activityThresholdMs","updateTimeMs","__PRIVATE_clientMetadata","pr","user","__PRIVATE_IndexedDbMutationQueue","__PRIVATE_forUser","mode","__PRIVATE_transactionOperation","__PRIVATE_persistenceTransaction","__PRIVATE_simpleDbMode","ALL_STORES","__PRIVATE_simpleDbTxn","__PRIVATE_INVALID","__PRIVATE_holdsPrimaryLease","__PRIVATE_verifyAllowTabSynchronization","__PRIVATE_raiseOnCommittedEvent","__PRIVATE_newPrimary","__PRIVATE_databaseInfo","__PRIVATE_isDefaultDatabase","__PRIVATE_maxAgeMs","addEventListener","__PRIVATE_documentVisibilityHandler","visibilityState","removeEventListener","__PRIVATE_windowUnloadHandler","__PRIVATE_shutdown","__PRIVATE_isZombied","getItem","setItem","__PRIVATE_params","__PRIVATE_garbageCollector","__PRIVATE_LruGarbageCollector","__PRIVATE_docCountPromise","__PRIVATE_orphanedDocumentCount","__PRIVATE_getTargetCache","__PRIVATE_getTargetCount","__PRIVATE_docCount","__PRIVATE_orphanedCount","__PRIVATE_forEachOrphanedDocumentSequenceNumber","__PRIVATE_forEachOrphanedDocument","__PRIVATE_writeSentinelKey","__PRIVATE_removeTargets","__PRIVATE_mutationQueuesStore","__PRIVATE_iterateSerial","userId","__PRIVATE_mutationQueueContainsKey","__PRIVATE_containsKey","__PRIVATE_changeBuffer","__PRIVATE_getRemoteDocumentCache","__PRIVATE_newChangeBuffer","__PRIVATE_documentCount","__PRIVATE_isPinned","__PRIVATE_withSequenceNumber","__PRIVATE_updateTargetData","__PRIVATE_nextPath","__PRIVATE_nextToReport","__PRIVATE_getSize","uid","__PRIVATE_isAuthenticated","__PRIVATE_mutationsStore","DbMutationBatch","userMutationsIndex","__PRIVATE_documentStore","__PRIVATE_documentMutationsStore","__PRIVATE_mutationStore","__PRIVATE_serializedBaseMutations","__PRIVATE_serializedMutations","__PRIVATE_indexKey","DbDocumentMutation","PLACEHOLDER","__PRIVATE_documentKeysByBatchId","__PRIVATE_lookupMutationBatch","__PRIVATE_nextBatchId","__PRIVATE_foundBatch","__PRIVATE_dbBatches","__PRIVATE_indexPrefix","prefixForPath","__PRIVATE_indexStart","__PRIVATE_userID","__PRIVATE_encodedPath","__PRIVATE_uniqueBatchIDs","__PRIVATE_batchID","__PRIVATE_lookupMutationBatches","__PRIVATE_queryPath","__PRIVATE_immediateChildrenLength","__PRIVATE_batchIDs","__PRIVATE_removeMutationBatch","__PRIVATE_removeCachedMutationKeys","__PRIVATE_markPotentiallyOrphaned","__PRIVATE_checkEmpty","__PRIVATE_startRange","prefixForUser","__PRIVATE_danglingMutationReferences","DbMutationQueue","keyPath","__PRIVATE_indexTxn","only","__PRIVATE_numDeleted","__PRIVATE_removePromise","__PRIVATE_SimpleDbTransaction","createObjectStore","autoIncrement","createIndex","userMutationsKeyPath","unique","__PRIVATE_createQueryCache","deleteObjectStore","__PRIVATE_globalStore","__PRIVATE_existingMutations","__PRIVATE_v3MutationsStore","__PRIVATE_writeAll","removeAcknowledgedMutations","addDocumentGlobal","ensureSequenceNumbers","createCollectionParentIndex","objectStoreNames","contains","__PRIVATE_remoteDocumentStore","objectStore","readTimeIndexPath","collectionReadTimeIndexPath","rewriteCanonicalIds","__PRIVATE_byteCount","__PRIVATE_queuesStore","__PRIVATE_queues","lastAcknowledgedBatchId","__PRIVATE_docSentinelKey","__PRIVATE_maybeSentinel","cache","__PRIVATE_pathSegments","__PRIVATE_targetStore","__PRIVATE_originalDbTarget","__PRIVATE_originalTargetData","__PRIVATE_updatedDbTarget","lastStreamToken","documentTargetsKeyPath","queryTargetsKeyPath","__PRIVATE_getIOSVersion","getUA","__PRIVATE_schemaConverter","request","indexedDB","open","onsuccess","onblocked","onerror","onupgradeneeded","oldVersion","createOrUpgrade","__PRIVATE_toPromise","__PRIVATE_wrapRequest","deleteDatabase","__PRIVATE_isMockPersistence","__PRIVATE_ua","__PRIVATE_iOSVersion","__PRIVATE_isUnsupportedIOS","__PRIVATE_androidVersion","__PRIVATE_getAndroidVersion","__PRIVATE_isUnsupportedAndroid","__PRIVATE_process","__PRIVATE_env","__PRIVATE_USE_MOCK_PERSISTENCE","__PRIVATE_iOSVersionRegex","match","__PRIVATE_androidVersionRegex","__PRIVATE_versionChangeListener","onversionchange","__PRIVATE_objectStores","__PRIVATE_transactionFn","__PRIVATE_readonly","__PRIVATE_attemptNumber","__PRIVATE_transactionFnResult","abort","__PRIVATE_completionPromise","__PRIVATE_retryable","__PRIVATE_dbCursor","Js","__PRIVATE_shouldStop","ko","__PRIVATE_Deferred","oncomplete","__PRIVATE_completionDeferred","onabort","__PRIVATE_IndexedDbTransactionError","__PRIVATE_checkForAndReportiOSError","Co","aborted","__PRIVATE_storeName","__PRIVATE_SimpleDbStore","__PRIVATE_keyOrValue","__PRIVATE_indexOrRange","__PRIVATE_iterateCursor","__PRIVATE_keysOnly","__PRIVATE_optionsOrCallback","__PRIVATE_cursorRequest","primaryKey","__PRIVATE_shouldContinue","continue","controller","__PRIVATE_IterationController","__PRIVATE_userResult","__PRIVATE_userPromise","__PRIVATE_skipToKey","__PRIVATE_indexName","openKeyCursor","openCursor","__PRIVATE_reportedIOSError","__PRIVATE_IOS_ERROR","__PRIVATE_newError","setTimeout","__PRIVATE_getWindow","__PRIVATE_asyncQueue","__PRIVATE_targetTimeMs","__PRIVATE_removalCallback","__PRIVATE_deferred","bind","__PRIVATE_delayMs","__PRIVATE_delayedOp","__PRIVATE_DelayedOperation","__PRIVATE_timerHandle","__PRIVATE_handleDelayElapsed","clearTimeout","__PRIVATE_ExponentialBackoff","__PRIVATE_backoff","__PRIVATE_skipBackoff","__PRIVATE_visibilityHandler","eh","__PRIVATE__isShuttingDown","enqueue","__PRIVATE_verifyNotFailed","__PRIVATE_enqueueInternal","__PRIVATE_enqueueEvenAfterShutdown","__PRIVATE_retryableTail","__PRIVATE_retryingOp","__PRIVATE_backoffAndRun","__PRIVATE_newTail","__PRIVATE_tail","__PRIVATE_operationInProgress","stack","includes","__PRIVATE_timerIdsToSkip","__PRIVATE_createAndSchedule","__PRIVATE_removedOp","__PRIVATE_removeDelayedOperation","__PRIVATE_delayedOperations","__PRIVATE_currentTail","__PRIVATE_lastTimerId","__PRIVATE_drain","a","b","__PRIVATE_wrapInUserErrorIfRecoverable","__PRIVATE_bufferEntryComparator","__PRIVATE_aSequence","__PRIVATE_aIndex","__PRIVATE_bSequence","__PRIVATE_bIndex","__PRIVATE_seqCmp","__PRIVATE_maxElements","__PRIVATE_previousIndex","__PRIVATE_nextIndex","__PRIVATE_highestValue","maxValue","__PRIVATE_GC_DID_NOT_RUN","Ih","Ah","Rh","mh","__PRIVATE_cacheSizeCollectionThreshold","__PRIVATE_percentileToCollect","__PRIVATE_maximumSequenceNumbersToCollect","__PRIVATE_cacheSize","__PRIVATE_LruParams","__PRIVATE_DEFAULT_COLLECTION_PERCENTILE","__PRIVATE_DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT","__PRIVATE_DEFAULT_CACHE_SIZE_BYTES","__PRIVATE_COLLECTION_DISABLED","__PRIVATE_gcTask","__PRIVATE_localStore","__PRIVATE_scheduleGC","delay","__PRIVATE_hasRun","__PRIVATE_collectGarbage","__PRIVATE_ignoreIfPrimaryLeaseLoss","__PRIVATE_delegate","__PRIVATE_percentile","__PRIVATE_getSequenceNumberCount","__PRIVATE_RollingSequenceNumberBuffer","__PRIVATE_addElement","__PRIVATE_removeOrphanedDocuments","__PRIVATE_getCacheSize","__PRIVATE_runGarbageCollection","__PRIVATE_upperBoundSequenceNumber","__PRIVATE_sequenceNumbersToCollect","__PRIVATE_targetsRemoved","__PRIVATE_countedTargetsTs","__PRIVATE_foundUpperBoundTs","__PRIVATE_removedTargetsTs","__PRIVATE_removedDocumentsTs","__PRIVATE_startTs","__PRIVATE_calculateTargetCount","__PRIVATE_sequenceNumbers","__PRIVATE_nthSequenceNumber","__PRIVATE_numTargetsRemoved","__PRIVATE_documentsRemoved","persistence","__PRIVATE_queryEngine","__PRIVATE_initialUser","t","__PRIVATE_getMutationQueue","__PRIVATE_remoteDocuments","__PRIVATE_localDocuments","__PRIVATE_LocalDocumentsView","__PRIVATE_getIndexManager","__PRIVATE_setLocalDocumentsView","__PRIVATE_newMutationQueue","__PRIVATE_newLocalDocuments","__PRIVATE_oldBatches","__PRIVATE_getAllMutationBatches","__PRIVATE_promisedOldBatches","__PRIVATE_newBatches","__PRIVATE_removedBatchIds","__PRIVATE_addedBatchIds","__PRIVATE_changedKeys","__PRIVATE_getDocuments","__PRIVATE_affectedDocuments","Yh","Jh","Xh","__PRIVATE_existingDocs","__PRIVATE_extractBaseValue","__PRIVATE_addMutationBatch","__PRIVATE_applyToLocalDocumentSet","on","__PRIVATE_affected","__PRIVATE_documentBuffer","pi","__PRIVATE_applyWriteToRemoteDocuments","__PRIVATE_performConsistencyCheck","__PRIVATE_affectedKeys","__PRIVATE_getHighestUnacknowledgedBatchId","__PRIVATE_getLastRemoteSnapshotVersion","__PRIVATE_remoteVersion","__PRIVATE_newTargetDataByTargetMap","__PRIVATE_targetDataByTarget","__PRIVATE_oldTargetData","__PRIVATE_removeMatchingKeys","__PRIVATE_addMatchingKeys","__PRIVATE_newTargetData","__PRIVATE_withResumeToken","__PRIVATE_LocalStore","__PRIVATE_shouldPersistTargetData","__PRIVATE_updatedKeys","__PRIVATE_existingDoc","__PRIVATE_updateLimboDocument","__PRIVATE_updateRemoteVersion","__PRIVATE_setTargetsMetadata","__PRIVATE_toMicroseconds","__PRIVATE_RESUME_TOKEN_MAX_AGE_MICROS","__PRIVATE_viewChanges","__PRIVATE_viewChange","e_51","__PRIVATE_updatedTargetData","__PRIVATE_withLastLimboFreeSnapshotVersion","__PRIVATE_afterBatchId","__PRIVATE_getNextMutationBatchAfterBatchId","__PRIVATE_getTargetData","__PRIVATE_cached","__PRIVATE_allocateTargetId","__PRIVATE_addTargetData","__PRIVATE_cachedTargetData","__PRIVATE_targetIdByTarget","__PRIVATE_keepPersistedTargetData","__PRIVATE_usePreviousResults","__PRIVATE_remoteKeys","__PRIVATE_getMatchingKeysForTargetId","_a","__PRIVATE_docKeys","__PRIVATE_promiseChain","__PRIVATE_ackVersion","__PRIVATE_collect","__PRIVATE_synchronizeLastDocumentChangeReadTime","__PRIVATE_lookupMutationKeys","__PRIVATE_setNetworkEnabled","__PRIVATE_getActiveClients","__PRIVATE_getNewDocumentChanges","__PRIVATE_lastDocumentChangeReadTime","__PRIVATE_getLastReadTime","__PRIVATE_DocReference","__PRIVATE_compareByKey","__PRIVATE_compareByTargetId","__PRIVATE_refsByKey","ref","__PRIVATE_refsByTarget","__PRIVATE_removeRef","__PRIVATE_emptyKey","__PRIVATE_startRef","__PRIVATE_endRef","__PRIVATE_forEachInRange","__PRIVATE_firstRef","__PRIVATE_firstAfterOrEqual","__PRIVATE_targetOrBatchId","__PRIVATE_validateNoArgs","functionName","__PRIVATE_formatPlural","__PRIVATE_validateExactNumberOfArgs","__PRIVATE_numberOfArgs","__PRIVATE_validateAtLeastNumberOfArgs","__PRIVATE_minNumberOfArgs","__PRIVATE_validateBetweenNumberOfArgs","__PRIVATE_maxNumberOfArgs","__PRIVATE_validateArgType","__PRIVATE_argument","__PRIVATE_validateType","__PRIVATE_ordinal","__PRIVATE_validateOptionalArgType","__PRIVATE_validateNamedType","__PRIVATE_optionName","__PRIVATE_validateNamedOptionalType","__PRIVATE_validateNamedOptionalPropertyEquals","__PRIVATE_inputName","input","__PRIVATE_expected","__PRIVATE_expectedDescription","__PRIVATE_valueDescription","__PRIVATE_actualDescription","__PRIVATE_validateStringEnum","__PRIVATE_enums","__PRIVATE_isPlainObject","description","getPrototypeOf","Array","__PRIVATE_customObjectName","__PRIVATE_validateDefined","__PRIVATE_validateOptionNames","__PRIVATE_optionNames","__PRIVATE_invalidClassError","__PRIVATE_validatePositiveNumber","num","__PRIVATE_assertUint8ArrayAvailable","__PRIVATE_assertBase64Available","__PRIVATE_byteString","__PRIVATE__byteString","arguments","Blob","fieldNames","__PRIVATE_minNumberOfElements","__PRIVATE__internalPath","__PRIVATE_InternalFieldPath","__PRIVATE_BaseFieldPath","__PRIVATE__DOCUMENT_ID","__PRIVATE_RESERVED","__PRIVATE__methodName","__PRIVATE_SerializableFieldValue","context","__PRIVATE_dataSource","__PRIVATE_createError","__PRIVATE_DeleteFieldValueImpl","__PRIVATE_ServerTimestampFieldValueImpl","__PRIVATE__elements","__PRIVATE_parseContext","__PRIVATE_ParseContext","$a","methodName","Ma","ignoreUndefinedProperties","__PRIVATE_parsedElements","__PRIVATE_parseData","arrayUnion","__PRIVATE__operand","__PRIVATE_numericIncrement","__PRIVATE_FieldValueDelegate","__PRIVATE_ArrayUnionFieldValueImpl","__PRIVATE_ArrayRemoveFieldValueImpl","__PRIVATE_NumericIncrementFieldValueImpl","__PRIVATE__delegate","FieldValue","__PRIVATE__toFieldTransform","isFinite","__PRIVATE__lat","__PRIVATE__long","__PRIVATE_newSerializer","__PRIVATE_JsonProtoSerializer","__PRIVATE_RESERVED_FIELD_REGEX","__PRIVATE__databaseId","__PRIVATE__key","__PRIVATE__converter","__PRIVATE_isWrite","settings","__PRIVATE_validatePath","configuration","__PRIVATE_childPath","__PRIVATE_contextWith","__PRIVATE_validatePathSegment","__PRIVATE_fieldDescription","__PRIVATE_createContext","merge","mergeFields","__PRIVATE_validatePlainObject","__PRIVATE_updateData","__PRIVATE_parseObject","__PRIVATE_validatedFieldPaths","__PRIVATE_stringOrFieldPath","__PRIVATE_fieldPathFromDotSeparatedString","__PRIVATE_fieldMaskContains","__PRIVATE_covers","__PRIVATE_ParsedSetData","__PRIVATE_fieldMaskPaths","__PRIVATE_childContext","__PRIVATE_childContextForFieldPath","__PRIVATE_parsedValue","mask","__PRIVATE_ParsedUpdateData","moreFieldsAndValues","__PRIVATE_fieldPathFromArgument","__PRIVATE_allowArrays","__PRIVATE_looksLikeJsonObject","__PRIVATE_arrayElement","__PRIVATE_entryIndex","__PRIVATE_parsedEntry","__PRIVATE_childContextForArray","fromDate","GeoPoint","__PRIVATE_DocumentKeyReference","__PRIVATE_thisDb","__PRIVATE_otherDb","__PRIVATE_childContextForField","search","__PRIVATE_otherUser","User","__PRIVATE_authHeaders","Authorization","__PRIVATE_changeListener","__PRIVATE_authProvider","__PRIVATE_tokenListener","__PRIVATE_tokenCounter","currentUser","__PRIVATE_getUser","__PRIVATE_receivedInitialUser","auth","getImmediate","optional","addAuthTokenListener","cu","__PRIVATE_initialTokenCounter","forceRefresh","getToken","__PRIVATE_tokenData","accessToken","__PRIVATE_OAuthToken","removeAuthTokenListener","__PRIVATE_currentUid","getUid","__PRIVATE_gapi","__PRIVATE_sessionIndex","__PRIVATE_FIRST_PARTY","ru","headers","X-Goog-AuthUser","__PRIVATE_authHeader","__PRIVATE_getAuthHeaderValueForFirstParty","__PRIVATE_FirstPartyToken","__PRIVATE_connectionTimerId","__PRIVATE_idleTimerId","__PRIVATE_connection","__PRIVATE_credentialsProvider","__PRIVATE_performBackoff","__PRIVATE_isStarted","__PRIVATE_isOpen","__PRIVATE_idleTimer","__PRIVATE_handleIdleCloseTimer","__PRIVATE_cancelIdleCheck","stream","send","__PRIVATE_finalState","__PRIVATE_closeCount","__PRIVATE_resetToMax","__PRIVATE_invalidateToken","__PRIVATE_tearDown","__PRIVATE_onClose","__PRIVATE_dispatchIfNotClosed","__PRIVATE_getCloseGuardedDispatcher","token","__PRIVATE_startStream","__PRIVATE_rpcError","__PRIVATE_handleStreamClose","__PRIVATE_startRpc","__PRIVATE_onOpen","onMessage","__PRIVATE_startCloseCount","credentials","__PRIVATE_PersistentStream","__PRIVATE_openStream","__PRIVATE_watchChangeProto","targetChangeType","__PRIVATE_causeProto","status","__PRIVATE_WatchTargetChange","documentChange","__PRIVATE_entityChange","__PRIVATE_DocumentWatchChange","documentDelete","__PRIVATE_docDelete","documentRemove","__PRIVATE_docRemove","ExistenceFilter","__PRIVATE_ExistenceFilterChange","__PRIVATE_fromWatchChange","snapshot","__PRIVATE_onWatchChange","addTarget","labels","goog-listen-tags","__PRIVATE_toListenRequestLabels","__PRIVATE_sendRequest","Uu","__PRIVATE_handshakeComplete_","__PRIVATE_writeMutations","__PRIVATE_responseProto","streamToken","commitTime","__PRIVATE_MutationResult","__PRIVATE_fromWriteResults","writeResults","__PRIVATE_onMutationResult","__PRIVATE_onHandshakeComplete","writes","__PRIVATE_terminated","__PRIVATE_rpcName","__PRIVATE_verifyNotTerminated","__PRIVATE_invokeRPC","__PRIVATE_invokeStreamingRPC","__PRIVATE_datastore","Set","__PRIVATE_ensureCommitNotCalled","__PRIVATE_datastoreImpl","response","missing","__PRIVATE_fromMaybeDocument","__PRIVATE_recordVersion","write","__PRIVATE_toMutations","__PRIVATE_writtenDocs","__PRIVATE_preconditionForUpdate","__PRIVATE_lastWriteError","__PRIVATE_unwritten","__PRIVATE_readVersions","__PRIVATE_committed","__PRIVATE_docVersion","__PRIVATE_existingVersion","__PRIVATE_onlineStateHandler","__PRIVATE_watchStreamFailures","__PRIVATE_setAndBroadcast","__PRIVATE_onlineStateTimer","__PRIVATE_logClientOfflineWarningIfNecessary","__PRIVATE_clearOnlineStateTimer","__PRIVATE_newState","__PRIVATE_shouldWarnClientIsOffline","details","__PRIVATE_connectivityMonitor","__PRIVATE_addCallback","__PRIVATE_canUseNetwork","__PRIVATE_restartNetwork","__PRIVATE_onlineStateTracker","__PRIVATE_OnlineStateTracker","__PRIVATE_watchStream","__PRIVATE_PersistentListenStream","xu","__PRIVATE_onWatchStreamOpen","Cu","__PRIVATE_onWatchStreamClose","Lu","__PRIVATE_onWatchStreamChange","__PRIVATE_writeStream","__PRIVATE_PersistentWriteStream","__PRIVATE_onWriteStreamOpen","__PRIVATE_onWriteStreamClose","ju","__PRIVATE_onWriteHandshakeComplete","Wu","enableNetwork","__PRIVATE_offlineCauses","__PRIVATE_enableNetworkInternal","__PRIVATE_shouldStartWatchStream","__PRIVATE_startWatchStream","__PRIVATE_fillWritePipeline","__PRIVATE_disableNetworkInternal","stop","__PRIVATE_writePipeline","__PRIVATE_cleanUpWatchStreamState","__PRIVATE_listenTargets","__PRIVATE_sendWatchRequest","__PRIVATE_sendUnwatchRequest","__PRIVATE_markIdle","__PRIVATE_syncEngine","__PRIVATE_watchChangeAggregator","__PRIVATE_watch","__PRIVATE_unwatch","__PRIVATE_WatchChangeAggregator","__PRIVATE_handleWatchStreamStart","__PRIVATE_handleWatchStreamFailure","__PRIVATE_handleTargetError","__PRIVATE_disableNetworkUntilRecovery","__PRIVATE_handleDocumentChange","__PRIVATE_handleExistenceFilter","__PRIVATE_handleTargetChange","__PRIVATE_raiseWatchSnapshot","__PRIVATE_createRemoteEvent","__PRIVATE_requestTargetData","__PRIVATE_applyRemoteEvent","s_53","__PRIVATE_rejectListen","__PRIVATE_lastBatchIdRetrieved","__PRIVATE_canAddToWritePipeline","__PRIVATE_nextMutationBatch","__PRIVATE_addToWritePipeline","__PRIVATE_shouldStartWriteStream","__PRIVATE_startWriteStream","__PRIVATE_handshakeComplete","__PRIVATE_writeHandshake","t_70","shift","__PRIVATE_executeWithRecovery","__PRIVATE_applySuccessfulWrite","__PRIVATE_handleWriteError","__PRIVATE_inhibitBackoff","__PRIVATE_rejectFailedWrite","Transaction","__PRIVATE_verifyOperationInProgress","__PRIVATE_handleCredentialChange","createWebStorageClientStateKey","createWebStorageMutationBatchKey","__PRIVATE_mutationKey","createWebStorageQueryTargetMetadataKey","__PRIVATE_mutationBatch","parse","__PRIVATE_validData","__PRIVATE_firestoreError","__PRIVATE_MutationMetadata","__PRIVATE_batchMetadata","__PRIVATE_QueryTargetMetadata","__PRIVATE_clientState","__PRIVATE_activeTargetIdsSet","__PRIVATE_RemoteClientState","onlineState","__PRIVATE_SharedOnlineState","__PRIVATE_localClientId","__PRIVATE_handleWebStorageEvent","__PRIVATE_escapedPersistenceKey","storage","__PRIVATE_localClientStorageKey","__PRIVATE_sequenceNumberKey","__PRIVATE_activeClients","__PRIVATE_LocalClientState","__PRIVATE_clientStateKeyRe","__PRIVATE_mutationBatchKeyRe","__PRIVATE_queryTargetKeyRe","__PRIVATE_onlineStateKey","__PRIVATE_storageListener","e_63","__PRIVATE_storageItem","__PRIVATE_fromWebStorageEntry","__PRIVATE_persistClientState","__PRIVATE_onlineStateJSON","__PRIVATE_fromWebStorageOnlineState","__PRIVATE_handleOnlineStateEvent","__PRIVATE_earlyEvents","t_75","__PRIVATE_extractActiveQueryTargets","__PRIVATE_persistMutationState","__PRIVATE_removeMutationState","__PRIVATE_queryState","__PRIVATE_isActiveQueryTarget","__PRIVATE_localClientState","__PRIVATE_addQueryTarget","__PRIVATE_removeQueryTarget","__PRIVATE_persistQueryTargetState","__PRIVATE_addPendingMutation","__PRIVATE_persistOnlineState","__PRIVATE_storageEvent","storageArea","__PRIVATE_fromWebStorageClientStateKey","__PRIVATE_handleClientStateEvent","__PRIVATE_fromWebStorageClientState","__PRIVATE_mutationMetadata","__PRIVATE_fromWebStorageMutationMetadata","__PRIVATE_handleMutationBatchEvent","__PRIVATE_queryTargetMetadata","__PRIVATE_fromWebStorageQueryTargetMetadata","__PRIVATE_handleQueryTargetEvent","__PRIVATE_seqString","__PRIVATE_parsed","Fl","__PRIVATE_toWebStorageJSON","__PRIVATE_mutationState","__PRIVATE_targetKey","__PRIVATE_targetMetadata","__PRIVATE_applyBatchState","__PRIVATE_applyTargetState","__PRIVATE_updatedClients","__PRIVATE_existingTargets","__PRIVATE_newTargets","__PRIVATE_addedTargets","__PRIVATE_removedTargets","__PRIVATE_applyActiveTargetsChange","__PRIVATE_activeTargets","__PRIVATE_kev","__PRIVATE_unionWith","__PRIVATE_localState","__PRIVATE__syncedDocuments","__PRIVATE_documentSet","__PRIVATE_docComparator","s_","__PRIVATE_previousChanges","__PRIVATE_changeSet","__PRIVATE_DocumentChangeSet","__PRIVATE_oldDocumentSet","__PRIVATE_newMutatedKeys","__PRIVATE_newDocumentSet","__PRIVATE_needsRefill","__PRIVATE_lastDocInLimit","__PRIVATE_hasLimitToFirst","__PRIVATE_firstDocInLimit","__PRIVATE_hasLimitToLast","__PRIVATE_newMaybeDoc","__PRIVATE_oldDoc","__PRIVATE_oldDocHadPendingMutations","__PRIVATE_newDocHasPendingMutations","__PRIVATE_changeApplied","track","__PRIVATE_shouldWaitForSyncedDocument","e_","i_","o_","Ot","__PRIVATE_updateLimboDocuments","__PRIVATE_getChanges","__PRIVATE_c1","__PRIVATE_c2","__PRIVATE_applyTargetChange","__PRIVATE_limboChanges","__PRIVATE_newSyncState","__PRIVATE_limboDocuments","__PRIVATE_syncState","u_","__PRIVATE_oldLimboDocuments","__PRIVATE_shouldBeInLimbo","__PRIVATE_RemovedLimboDocument","__PRIVATE_AddedLimboDocument","__PRIVATE_queryResult","__PRIVATE_computeDocChanges","__PRIVATE_fromInitialDocuments","updateFunction","__PRIVATE_runWithBackOff","__PRIVATE_tryRunUpdateFunction","commit","__PRIVATE_commitError","__PRIVATE_handleTransactionError","__PRIVATE_userPromiseError","__PRIVATE_retries","__PRIVATE_isRetryableTransactionError","view","__PRIVATE_remoteStore","__PRIVATE_sharedClientState","__PRIVATE_maxConcurrentLimboResolutions","q","__PRIVATE_ReferenceSet","__PRIVATE_forSyncEngine","k_","__PRIVATE_syncEngineListener","__PRIVATE_assertSubscribed","__PRIVATE_queryView","__PRIVATE_queryViewsByQuery","__PRIVATE_addLocalQueryTarget","__PRIVATE_computeInitialSnapshot","__PRIVATE_allocateTarget","__PRIVATE_initializeViewAndComputeSnapshot","__PRIVATE_isPrimaryClient","listen","__PRIVATE_executeQuery","__PRIVATE_View","__PRIVATE_viewDocChanges","__PRIVATE_synthesizedTargetChange","__PRIVATE_updateTrackedLimbos","__PRIVATE_QueryView","__PRIVATE_queriesByTarget","__PRIVATE_queries","__PRIVATE_removeLocalQueryTarget","__PRIVATE_releaseTarget","__PRIVATE_clearQueryState","__PRIVATE_unlisten","__PRIVATE_removeAndCleanupTarget","__PRIVATE_userCallback","__PRIVATE_localWrite","__PRIVATE_addMutationCallback","__PRIVATE_emitNewSnapsAndNotifyLocalStore","__PRIVATE_TransactionRunner","__PRIVATE_run","__PRIVATE_limboResolution","__PRIVATE_activeLimboResolutionsByTarget","__PRIVATE_receivedDocument","source","__PRIVATE_newViewSnapshots","__PRIVATE_applyOnlineStateChange","__PRIVATE_onOnlineStateChange","__PRIVATE_updateQueryState","__PRIVATE_limboKey","__PRIVATE_activeLimboTargetsByKey","__PRIVATE_pumpEnqueuedLimboResolutions","__PRIVATE_mutationBatchResult","__PRIVATE_acknowledgeBatch","__PRIVATE_processUserCallback","__PRIVATE_triggerPendingWritesCallbacks","__PRIVATE_updateMutationState","__PRIVATE_rejectBatch","__PRIVATE_highestBatchId","__PRIVATE_callbacks","__PRIVATE_pendingWritesCallbacks","__PRIVATE_errorMessage","clear","__PRIVATE_newCallbacks","__PRIVATE_mutationUserCallbacks","__PRIVATE_toKey","__PRIVATE_onWatchError","__PRIVATE_limboDocumentRefs","__PRIVATE_removeReferencesForId","__PRIVATE_removeLimboTarget","__PRIVATE_limboTargetId","__PRIVATE_limboChange","__PRIVATE_trackLimboChange","__PRIVATE_enqueuedLimboResolutions","__PRIVATE_limboTargetIdGenerator","__PRIVATE_LimboResolution","__PRIVATE_newSnaps","__PRIVATE_docChangesInAllViews","__PRIVATE_queriesProcessed","__PRIVATE_fromSnapshot","__PRIVATE_notifyLocalViewChanges","__PRIVATE_fnName","__PRIVATE_handleUserChange","__PRIVATE_rejectOutstandingPendingWritesCallbacks","disableNetwork","__PRIVATE_keySet","__PRIVATE_syncedDocuments","__PRIVATE_SyncEngine","__PRIVATE__isPrimaryClient","__PRIVATE_synchronizeWithPersistedState","__PRIVATE_setOnlineState","__PRIVATE_batchState","__PRIVATE_lookupMutationDocuments","__PRIVATE_removeCachedMutationBatchMetadata","__PRIVATE_getAllActiveQueryTargets","__PRIVATE_synchronizeQueryViewsAndRaiseSnapshots","__PRIVATE_activeQueries","__PRIVATE_applyPrimaryState","t_90","__PRIVATE_isLocalQueryTarget","__PRIVATE_resetLimboDocuments","__PRIVATE_removeAllReferences","__PRIVATE_transitionToPrimary","e_78","t_94","__PRIVATE_synchronizeViewAndComputeSnapshot","__PRIVATE_getTarget","__PRIVATE_synthesizeTargetToQuery","__PRIVATE_synthesizedRemoteEvent","__PRIVATE_createSynthesizedRemoteEventForCurrentChange","__PRIVATE_removed","e_81","t_97","subscribe","__PRIVATE_firstListen","__PRIVATE_queryInfo","__PRIVATE_QueryListenersInfo","__PRIVATE_viewSnap","onError","__PRIVATE_listeners","__PRIVATE_onViewSnapshot","__PRIVATE_raiseSnapshotsInSyncEvent","__PRIVATE_lastListen","__PRIVATE_viewSnaps","__PRIVATE_raisedEvent","observer","__PRIVATE_snapshotsInSyncListeners","__PRIVATE_queryObserver","__PRIVATE_snap","includeMetadataChanges","__PRIVATE_raisedInitialEvent","__PRIVATE_shouldRaiseEvent","__PRIVATE_shouldRaiseInitialEvent","__PRIVATE_raiseInitialEvent","__PRIVATE_maybeOnline","__PRIVATE_waitForSyncWhenOnline","__PRIVATE_hasPendingWritesChanged","__PRIVATE_localDocumentsView","__PRIVATE_matchesAllDocuments","__PRIVATE_executeFullCollectionScan","__PRIVATE_previousResults","__PRIVATE_applyQuery","__PRIVATE_updatedResults","__PRIVATE_sortedPreviousResults","__PRIVATE_limboFreeSnapshotVersion","__PRIVATE_docAtLimitEdge","__PRIVATE_batchesByDocumentKey","__PRIVATE_findMutationBatch","__PRIVATE_rawIndex","__PRIVATE_indexOfBatchId","__PRIVATE_findMutationBatches","prefix","__PRIVATE_startPath","__PRIVATE_rowKeyPath","__PRIVATE_indexOfExistingBatchId","__PRIVATE_references","__PRIVATE_sizer","__PRIVATE_currentSize","iterator","__PRIVATE_MemoryRemoteDocumentCache","__PRIVATE_forTargetCache","__PRIVATE_highestSequenceNumber","__PRIVATE_removals","__PRIVATE_addReferences","__PRIVATE_removeReferences","__PRIVATE_matchingKeys","__PRIVATE_referencesForId","__PRIVATE_referenceDelegateFactory","__PRIVATE_MemoryTargetCache","__PRIVATE_MemoryIndexManager","__PRIVATE_documentSize","__PRIVATE_mutationQueues","__PRIVATE_MemoryMutationQueue","__PRIVATE_MemoryTransaction","__PRIVATE_onTransactionStarted","__PRIVATE_onTransactionCommitted","__PRIVATE_or","__PRIVATE_MemoryEagerDelegate","Qf","__PRIVATE__orphanedDocuments","__PRIVATE_localViewReferences","__PRIVATE_orphanedDocuments","__PRIVATE_isReferenced","__PRIVATE_mutationQueuesContainKey","__PRIVATE_sendFn","__PRIVATE_closeFn","__PRIVATE_wrappedOnOpen","__PRIVATE_wrappedOnClose","__PRIVATE_wrappedOnMessage","__PRIVATE_RPC_NAME_REST_MAPPING","BatchGetDocuments","Commit","__PRIVATE_X_GOOG_API_CLIENT_VALUE","info","__PRIVATE_baseUrl","__PRIVATE_header","url","__PRIVATE_makeUrl","__PRIVATE_xhr","XhrIo","listenOnce","EventType","COMPLETE","getLastErrorCode","ErrorCode","NO_ERROR","json","getResponseJson","TIMEOUT","HTTP_ERROR","getStatus","getResponseText","__PRIVATE_responseError","__PRIVATE_firestoreErrorCode","__PRIVATE_serverError","toLowerCase","__PRIVATE_jsonObj","__PRIVATE_requestString","Content-Type","__PRIVATE_modifyHeadersForRequest","__PRIVATE_urlParts","__PRIVATE_webchannelTransport","createWebChannelTransport","httpSessionIdParam","initMessageHeaders","messageUrlParams","sendRawJson","supportsCrossDomainXhr","internalChannelParams","forwardChannelRequestTimeoutMs","isMobileCordova","isReactNative","isElectron","isIE","isUWP","isBrowserExtension","httpHeadersOverwriteParam","channel","createWebChannel","__PRIVATE_opened","closed","__PRIVATE_streamBridge","__PRIVATE_StreamBridge","jf","Kf","__PRIVATE_unguardedEventListen","param","WebChannel","OPEN","CLOSE","__PRIVATE_callOnClose","WARN","warn","MESSAGE","__PRIVATE_msgData","__PRIVATE_msgDataOrError","__PRIVATE_callOnMessage","__PRIVATE_callOnOpen","__PRIVATE_urlRpcName","__PRIVATE_onNetworkAvailable","__PRIVATE_onNetworkUnavailable","__PRIVATE_configureNetworkMonitoring","__PRIVATE_networkAvailableListener","__PRIVATE_networkUnavailableListener","__PRIVATE_MEMORY_ONLY_PERSISTENCE_ERROR_MESSAGE","__PRIVATE_cfg","__PRIVATE_createSharedClientState","__PRIVATE_createPersistence","__PRIVATE_gcScheduler","__PRIVATE_createGarbageCollectionScheduler","__PRIVATE_createLocalStore","__PRIVATE_createRemoteStore","__PRIVATE_createSyncEngine","__PRIVATE_eventManager","__PRIVATE_createEventManager","__PRIVATE_EventManager","__PRIVATE_IndexFreeQueryEngine","__PRIVATE_persistenceSettings","__PRIVATE_durable","__PRIVATE_MemoryPersistence","__PRIVATE_factory","__PRIVATE_RemoteStore","__PRIVATE_BrowserConnectivityMonitor","__PRIVATE_NoopConnectivityMonitor","__PRIVATE_MemorySharedClientState","__PRIVATE_MemoryComponentProvider","initialize","__PRIVATE_setPrimaryStateListener","__PRIVATE_MultiTabLocalStore","__PRIVATE_MultiTabSyncEngine","__PRIVATE_WebStorageSharedClientState","__PRIVATE_LruScheduler","__PRIVATE_buildStoragePrefix","synchronizeTabs","__PRIVATE_withCacheSize","cacheSizeBytes","clearPersistence","__PRIVATE_AutoId","__PRIVATE_newId","__PRIVATE_componentProvider","__PRIVATE_initializationDone","__PRIVATE_persistenceResult","__PRIVATE_initialized","__PRIVATE_setChangeListener","__PRIVATE_initializeComponents","__PRIVATE_WebChannelConnection","__PRIVATE_DatastoreImpl","Oo","Pd","Xu","Ad","V_","md","__PRIVATE_eventMgr","__PRIVATE_setDatabaseDeletedListener","terminate","__PRIVATE_canFallback","console","Rd","DOMException","__PRIVATE_isShuttingDown","__PRIVATE_enqueueAndInitiateShutdown","__PRIVATE_removeChangeListener","__PRIVATE_registerPendingWritesCallback","__PRIVATE_QueryListener","__PRIVATE_clientTerminated","__PRIVATE_readDocument","__PRIVATE_addSnapshotsInSyncListener","__PRIVATE_removeSnapshotsInSyncListener","yd","__PRIVATE_scheduleEvent","muted","eventHandler","__PRIVATE_isPartialObserver","__PRIVATE_methods","object","method","timestampsInSnapshots","__PRIVATE_serverTimestampBehavior","__PRIVATE_referenceFactory","__PRIVATE_convertTimestamp","__PRIVATE_convertServerTimestamp","__PRIVATE_convertReference","__PRIVATE_convertGeoPoint","__PRIVATE_convertArray","__PRIVATE_convertObject","__PRIVATE_convertValue","__PRIVATE_getPreviousValue","__PRIVATE_normalizedValue","toDate","__PRIVATE_resourcePath","CACHE_SIZE_UNLIMITED","__PRIVATE_MINIMUM_CACHE_SIZE_BYTES","experimentalForceLongPolling","__PRIVATE_databaseIdOrApp","__PRIVATE_AsyncQueue","__PRIVATE_ensureClientConfigured","__PRIVATE__firestoreClient","app","__PRIVATE__firebaseApp","Firestore","__PRIVATE_databaseIdFromApp","__PRIVATE__persistenceKey","__PRIVATE__credentials","__PRIVATE_FirebaseCredentialsProvider","external","__PRIVATE_EmptyCredentialsProvider","__PRIVATE__componentProvider","__PRIVATE__settings","__PRIVATE_FirestoreSettings","Hd","__PRIVATE__userDataReader","__PRIVATE_UserDataReader","__PRIVATE_settingsLiteral","__PRIVATE_newSettings","getAuthHeaderValueForFirstParty","__PRIVATE_FirstPartyCredentialsProvider","experimentalForceOwningTab","experimentalTabSynchronization","__PRIVATE_configureClient","ir","__PRIVATE__queue","__PRIVATE_enqueueAndForgetEvenAfterShutdown","__PRIVATE_makeDatabaseInfo","_removeServiceInstance","tw","waitForPendingWrites","arg","__PRIVATE_onSnapshotsInSyncInternal","__PRIVATE_asyncObserver","__PRIVATE_AsyncObserver","__PRIVATE_mute","__PRIVATE_DatabaseInfo","__PRIVATE_FirestoreClient","__PRIVATE_pathString","CollectionReference","DocumentReference","__PRIVATE_forPath","__PRIVATE_InternalQuery","WriteBatch","SILENT","INFO","VERBOSE","level","__PRIVATE_newLevel","setLogLevel","__PRIVATE__firestore","__PRIVATE__transaction","documentRef","__PRIVATE_validateReference","__PRIVATE_lookup","DocumentSnapshot","__PRIVATE_validateSetOptions","__PRIVATE_convertedValue","__PRIVATE__dataReader","__PRIVATE_parseSetData","__PRIVATE_fieldOrUpdateData","__PRIVATE_ExternalFieldPath","__PRIVATE_parseUpdateVarargs","__PRIVATE_parseUpdateData","__PRIVATE_verifyNotCommitted","__PRIVATE__mutations","__PRIVATE__committed","firestore","converter","__PRIVATE_currArg","__PRIVATE_internalOptions","complete","__PRIVATE_onSnapshotInternal","__PRIVATE_errHandler","__PRIVATE_internalListener","__PRIVATE_validateGetOptions","__PRIVATE_getDocumentFromLocalCache","__PRIVATE_getViaSnapshotListener","Af","__PRIVATE__document","__PRIVATE__fromCache","__PRIVATE__hasPendingWrites","__PRIVATE_validateSnapshotOptions","QueryDocumentSnapshot","fromFirestore","__PRIVATE_UserDataWriter","__PRIVATE__areTimestampsInSnapshotsEnabled","serverTimestamps","SnapshotMetadata","__PRIVATE__query","opStr","__PRIVATE_createFilter","__PRIVATE_addFilter","directionStr","__PRIVATE_createOrderBy","__PRIVATE_addOrderBy","__PRIVATE_withLimitToFirst","__PRIVATE_withLimitToLast","__PRIVATE_docOrField","__PRIVATE_boundFromDocOrFields","__PRIVATE_withStartAt","__PRIVATE_withEndAt","__PRIVATE_boundFromDocument","__PRIVATE_allFields","__PRIVATE_boundFromFields","__PRIVATE_validateHasExplicitOrderByForLimitToLast","QuerySnapshot","__PRIVATE_firestoreClient","__PRIVATE_getDocumentsFromLocalCache","__PRIVATE_fieldValue","__PRIVATE_validateDisjunctiveFilterElements","__PRIVATE_referenceList","__PRIVATE_parseDocumentIdValue","__PRIVATE_parseQueryValue","__PRIVATE_validateNewFilter","__PRIVATE_validateNewOrderBy","components","__PRIVATE_rawValue","__PRIVATE_wrapped","__PRIVATE_documentIdValue","operator","__PRIVATE_arrayOps","__PRIVATE_disjunctiveOps","__PRIVATE_isArrayOp","__PRIVATE_isDisjunctiveOp","__PRIVATE_existingField","__PRIVATE_validateOrderByAndInequalityMatch","__PRIVATE_conflictingOp","__PRIVATE_findFilterOperator","__PRIVATE_inequality","__PRIVATE__originalQuery","__PRIVATE__snapshot","thisArg","__PRIVATE_convertToDocumentImpl","__PRIVATE__cachedChanges","__PRIVATE__cachedChangesIncludeMetadataChanges","oldIndex","newIndex","__PRIVATE_indexTracker","__PRIVATE_resultChangeType","__PRIVATE__path","toFirestore","__PRIVATE_docRef","__PRIVATE_typeDescription","__PRIVATE_validator","__PRIVATE_validateOptionalArrayElements","__PRIVATE_applyFirestoreDataConverter","__PRIVATE_RESERVED_READONLY_PROPS","__PRIVATE_makeConstructorPrivate","__PRIVATE_cls","__PRIVATE_optionalMessage","__PRIVATE_PublicConstructor","getOwnPropertyNames","__PRIVATE_staticProp","__PRIVATE_PublicFirestore","__PRIVATE_PublicTransaction","__PRIVATE_PublicWriteBatch","__PRIVATE_PublicDocumentReference","__PRIVATE_PublicDocumentSnapshot","__PRIVATE_PublicQueryDocumentSnapshot","__PRIVATE_PublicQuery","__PRIVATE_PublicQuerySnapshot","__PRIVATE_PublicCollectionReference","__PRIVATE_PublicFieldValue","__PRIVATE_PublicBlob","__PRIVATE_firestoreNamespace","__PRIVATE_registerFirestore","__PRIVATE_firestoreFactory","registerComponent","Component","container","__PRIVATE_IndexedDbComponentProvider","getProvider","setServiceProps","registerVersion"],"mappings":"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"}